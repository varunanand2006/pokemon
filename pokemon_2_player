import random
import time

p1_level = 50
p2_level = 50

def slow_print(s):
    if type(s) == str:
        for c in s:
            #sys.stdout.write(c)
            #sys.stdout.flush()
            print(c, end = "")
            time.sleep(0.03)
        print("")
    elif type(s) == list:
        for c in ("".join(s)):
            print(c, end="")
            time.sleep(0.03)
        print("")
    else:
        print(s)


if True:    #acessing file
    def encoder(dict):
        return_string = "|"
        # encoding the name
        return_string +=  dict["name"] + "|"
        # encoding types
        return_string += ",".join(dict["type"]) + "|"
        # encoding moves
        return_string += ",".join(dict["moves"]) + "|"
        # encoding stats
        stat_list = []
        for key in dict["stats"].keys():
            stat_list.append(str(dict["stats"][key]))
        return_string += ",".join(stat_list) + "|"
        # encoding ability
        if dict["ability"] == "":
            return_string += "NONE"
        return_string += dict["ability"] + "|"
        # encoding current hp
        return_string += str(dict["current hp"]) + "|"
        # encoding status coditions
        if dict["status condition"] == []:
            return_string += "NONE"
        return_string += ",".join(dict["status condition"]) + "|"
        # encoding held item
        if dict["held item"] == "":
            return_string += "NONE"
        return_string += dict["held item"] + "|"
        # encoding level
        return_string += str(dict["level"]) + "|"
        # encoding EV's
        temp_list = []
        if "EVs" not in dict.keys():
            dict["EVs"] = [0, 0, 0, 0, 0, 0]
        for item in dict["EVs"]:
            temp_list.append(str(item))
        return_string += ",".join(temp_list) + "|"
        # encoding exp
        return_string += str(dict["exp"]) + "|"
        # encoding nature
        return_string += dict["nature"] + "|"
        # encoding nickname
        return_string += dict["nickname"] + "|"
        return return_string

    def decoder(string):
        return_dict = {}
        info_split = string.split("|")
        # creating sublists
        info_split = info_split[1:]
        info_split = info_split[:-1]
        # decoding name
        return_dict["name"] = info_split[0]
        # decoding type
        info_split[1] = info_split[1].split(",")
        return_dict["type"] = info_split[1]
        if type(info_split[1]) == str:
            info_split[1] = [info_split[1]]
        # decoding moves
        info_split[2] = info_split[2].split(",")
        return_dict["moves"] = info_split[2]
        # decoding stats
        info_split[3] = info_split[3].split(",")
        return_dict["stats"] = {"hp": int(info_split[3][0]),
                                "attack": int(info_split[3][1]),
                                "defense": int(info_split[3][2]),
                                "s_attack": int(info_split[3][3]),
                                "s_defense": int(info_split[3][4]),
                                "speed": int(info_split[3][5])}
        # decoding ability
        if info_split[4] == "NONE":
            return_dict["ability"] = ""
        else:
            return_dict["ability"] = info_split[4]
        # decoding current hp
        return_dict["current hp"] = int(info_split[5])
        #decoding status conditions
        if info_split[6] == "NONE":
            return_dict["status condition"] = []
        else:
            info_split[6] = info_split[6].split(",")
            return_dict["status condition"] = info_split[6]
        # decoding held item
        if info_split[7] == "NONE":
            return_dict["held item"] = ""
        else:
            return_dict["held item"] = info_split[7]
        # decoding level
        return_dict["level"] = int(info_split[8])
        # decoding EVs
        info_split[9] = info_split[9].split(",")
        return_dict["EVs"] = []
        for item in info_split[9]:
            return_dict["EVs"].append(int(item))
        # decoding exp
        return_dict["exp"] = int(info_split[10])
        # decoding nature
        return_dict["nature"] = info_split[11]
        # decoding nickname
        return_dict["nickname"] = info_split[12]
        return return_dict

    def pokemon_writer(poke_list):
        return_string = ""
        for selected_poke in poke_list:
            return_string += encoder(selected_poke) + "\n"
        return return_string

    def pokemon_reader(txt):
        list_of = (txt.split("\n"))[1:]
        list_of = (txt.split("\n"))[:-1]
        poke_list = []
        for something in list_of:
            poke_list.append(decoder(something))
        return poke_list

    def bag_encoder(bag_dict):
        return_string = ""
        for key in bag_dict.keys():
            return_string += str(key) + ":" + str(bag_dict[key]) + "|"
        return return_string[:-1]

    def bag_decoder(bag_string):
        return_dict = {}
        bag_list = bag_string.split("|")
        for item_pair in bag_list:
            temp_pair = item_pair.split(":")
            return_dict[temp_pair[0]] = int(temp_pair[1])
        return return_dict

    def full_read(txt_file_name):
        save_file = open(txt_file_name, "r")
        txt = save_file.read()
        two_info = txt.split("Pokemon Save Info:")
        print(two_info)
        trainer_card = two_info[0].split("\n")
        trainer_name = trainer_card[0]
        trainer_bag = bag_decoder(trainer_card[1])
        trainer_money = int(trainer_card[2])
        trainer_pokemon = pokemon_reader(two_info[1][1:])
        return trainer_name, trainer_bag, trainer_money, trainer_pokemon

    def full_write(txt_file_name, trainer_name, trainer_bag, trainer_money, trainer_pokemon):
        save_file = open(txt_file_name, "w")
        save_file.write(trainer_name + "\n")
        save_file.write(bag_encoder(trainer_bag) + "\n")
        save_file.write(str(trainer_money) + "\n")
        save_file.write("Pokemon Save Info:\n")
        save_file.write(pokemon_writer(trainer_pokemon))

def print_battle_teams(poke_1_team, poke_2_team):
    slow_print(printer_outer(("Trainer 1: " + trainer_1), ("Trainer 2: " + trainer_2), 60))
    for i in range(num_pkmn_in_team):
        print(printer_outer(("Pokemon " + str(i + 1) + ": " + printer_outer(poke_1_team[i]["name"].title(), "Held Item:" + poke_1_team[i]["held item"].title(), 20)), ("Pokemon " + str(i + 1) + ": " + printer_outer(poke_2_team[i]["name"].title(), "Held Item:" + poke_2_team[i]["held item"].title(), 20)), 60))

print(
    """
                O
               O
                 O
       _________||__
     /       O /     \ 
    |         /       |
    | _______________ |
    |        _        |
    |_______[_]_______|
    """
)

slow_print("Hello and welcome to the battle arena! ")


slow_print("Which save file does trainer 1 want to access? ")
trainer_1_file = "vablaziken_save_file" #input("Trainer 1 file: ").lower()
slow_print("Which save file does trainer 2 want to access? ")
trainer_2_file = "vihaan_save_file" #input("Trainer 2 file: ").lower()
slow_print("Number of pokemon on each team: ")
num_pkmn_in_team = 1 # int(input("Number: "))
move_power_modifier = 1


trainer_1, items_bought, p1_money, trainer1_box = full_read(trainer_1_file)
trainer_2, items_bought2, p2_money, trainer2_box = full_read(trainer_2_file)

if True:
    #type_chart[""] = {"weakness": [""], "resistance": [""], "immunity": []}
    if True:
        type_chart = {}
        type_chart["normal"] = {"weakness": ["fighting"], "resistance": [], "immunity": ["ghost"]}
        type_chart["grass"] = {"weakness": ["fire", "ice", "poison", "bug", "flying"], "resistance": ["grass", "water", "ground", "electric"], "immunity": []}
        type_chart["fire"] = {"weakness": ["water", "rock", "ground"], "resistance": ["grass", "fire", "ice", "steel", "fairy", "bug"], "immunity": []}
        type_chart["water"] = {"weakness": ["grass", "electric"], "resistance": ["water", "fire", "ice", "steel"], "immunity": []}
        type_chart["electric"] = {"weakness": ["ground"], "resistance": ["electric", "steel"], "immunity": []}
        type_chart["dragon"] = {"weakness": ["dragon", "ice", "fairy"], "resistance": ["water", "fire", "grass", "electric"], "immunity": []}
        type_chart["flying"] = {"weakness": ["electric", "ice", "rock"], "resistance": ["grass", "fighting", "bug"], "immunity": ["ground"]}
        type_chart["poison"] = {"weakness": ["ground", "psychic"], "resistance": ["grass", "fighting", "poison", "fairy"], "immunity": []}
        type_chart["bug"] = {"weakness": ["fire", "flying", "rock"], "resistance": ["grass", "fighting", "ground"], "immunity": []}
        type_chart["fighting"] = {"weakness": ["psychic", "fairy", "flying"], "resistance": ["bug", "rock", "dark"], "immunity": []}
        type_chart["ice"] = {"weakness": ["fire", "rock", "fighting", "steel"], "resistance": ["ice"], "immunity": []}
        type_chart["ground"] = {"weakness": ["water", "grass", "ice"], "resistance": ["poison", "rock"], "immunity": ["electric"]}
        type_chart["rock"] = {"weakness": ["water", "grass", "steel", "fighting", "ground"], "resistance": ["normal", "fire", "poison", "flying"], "immunity": []}
        type_chart["ghost"] = {"weakness": ["ghost", "dark"], "resistance": ["poison", "bug"], "immunity": ["normal", "fighting"]}
        type_chart["dark"] = {"weakness": ["fighting", "fairy", "bug"], "resistance": ["ghost", "dark"], "immunity": ["psychic"]}
        type_chart["steel"] = {"weakness": ["fire", "fighting", "ground"], "resistance": ["dragon", "fairy", "normal", "grass", "ice", "flying", "psychic", "bug", "rock", "steel"], "immunity": ["poison"]}
        type_chart["fairy"] = {"weakness": ["steel", "poison"], "resistance": ["fighting", "bug", "dark"], "immunity": ["dragon"]}
        type_chart["psychic"] = {"weakness": ["bug", "dark", "ghost"], "resistance": ["fighting", "psychic"], "immunity": []}


    #pkmn_info = {"name": "", "type": [], "moves": [], "stats": {"hp": , "attack": , "defense": , "s_attack": , "s_defense": , "speed": }, "ability": ""}
    pokemon_list = {}
    #pokemon_list["bulbasaur"] = {"name": "bulbasaur", "type": ["grass", "poison"], "moves": ["tackle", "vine whip", "growl"], "stats": {"hp": 45, "attack": 49, "defense": 49, "s_attack": 65, "s_defense": 65, "speed": 45}}
    #pokemon_list["charmander"] = {"name": "charmander", "type": ["fire"], "moves": ["tackle", "ember", "growl"], "stats": {"hp": 39, "attack": 52, "defense": 43, "s_attack": 60, "s_defense": 50, "speed": 65}}
    #pokemon_list["squirtle"] = {"name": "squirtle", "type": ["water"], "moves": ["tackle", "water gun", "growl"], "stats": {"hp": 44, "attack": 48, "defense": 65, "s_attack": 50, "s_defense": 64, "speed": 43}}

    if True:
        #gen 1
        pokemon_list["venusaur"] = {"name": "venusaur", "type": ["grass", "poison"], "moves": ["vine whip", "frenzy plant", "sludge", "earthquake"], "stats": {"hp": 80, "attack": 82, "defense": 83, "s_attack": 100, "s_defense": 100, "speed": 80}, "ability": "overgrow"}
        pokemon_list["charizard"] = {"name": "charizard", "type": ["fire", "flying"], "moves": ["ember", "blast burn", "bite", "steel wing"], "stats": {"hp": 78, "attack": 84, "defense": 78, "s_attack": 109, "s_defense": 85, "speed": 100}, "ability": "blaze"}
        pokemon_list["blastoise"] = {"name": "blastoise", "type": ["water"], "moves": ["water gun", "hydro cannon", "bite", "blizzard"], "stats": {"hp": 79, "attack": 83, "defense": 100, "s_attack": 85, "s_defense": 105, "speed": 78}, "ability": "torrent"}
        pokemon_list["gengar"] = {"name": "gengar", "type": ["ghost", "poison"], "moves": ["shadow ball", "sludge", "bite", "quick attack"], "stats": {"hp": 60, "attack": 65, "defense": 60, "s_attack": 130, "s_defense": 75, "speed": 110}, "ability": "cursed body"}
        pokemon_list["alakazam"] = {"name": "alakazam", "type": ["psychic"], "moves": ["psychic", "shadow ball", "fire punch", "thunder punch"], "stats": {"hp": 55, "attack": 50, "defense": 45, "s_attack": 135, "s_defense": 95, "speed": 120}, "ability": "synchronize"}
        pokemon_list["machamp"] = {"name": "machamp", "type": ["fighting"], "moves": ["double kick", "fire punch", "work up", "rock slide"], "stats": {"hp": 90, "attack": 130, "defense": 80, "s_attack": 65, "s_defense": 85, "speed": 55}, "ability": "guts"}
        pokemon_list["pidgeot"] = {"name": "pidgeot", "type": ["normal", "flying"], "moves": ["peck", "quick attack", "hurricane", "steel wing"], "stats": {"hp": 83, "attack": 80, "defense": 75, "s_attack": 70, "s_defense": 70, "speed": 101}, "ability": "keen eye"}
        pokemon_list["beedrill"] = {"name": "beedrill", "type": ["bug", "poison"], "moves": ["x scissor", "sludge", "confide", "quick attack"], "stats": {"hp": 65, "attack": 90, "defense": 40, "s_attack": 45, "s_defense": 89, "speed": 75}, "ability": "swarm"}
        pokemon_list["lapras"] = {"name": "lapras", "type": ["water", "ice"], "moves": ["water gun", "blizzard", "psychic", "dragon dance"], "stats": {"hp": 130, "attack": 85, "defense": 80, "s_attack": 85, "s_defense": 90, "speed": 60}, "ability": "water absorb"}
        pokemon_list["raichu"] = {"name": "raichu", "type": ["electric"], "moves": ["thunder punch", "surf", "double team"], "stats": {"hp": 60, "attack": 90, "defense": 55, "s_attack": 90, "s_defense": 80, "speed": 110}, "ability": "lightning rod"}
        pokemon_list["golem"] = {"name": "golem", "type": ["rock", "ground"], "moves": ["rock slide", "earthquake", "rock tomb", "hammer arm"], "stats": {"hp": 80, "attack": 120, "defense": 130, "s_attack": 55, "s_defense": 65, "speed": 45}, "ability": "sand veil"}
        pokemon_list["gyarados"] = {"name": "gyarados", "type": ["water", "flying"], "moves": ["surf", "hurricane", "dragon dance", "rain dance"], "stats": {"hp": 95, "attack": 125, "defense": 79, "s_attack": 60, "s_defense": 100, "speed": 81}, "ability": "intimidate"}
        pokemon_list["pinsir"] = {"name": "pinsir", "type": ["bug"], "moves": ["x scissor", "earthquake", "rock slide", "swords dance"], "stats": {"hp": 65, "attack": 125, "defense": 100, "s_attack": 55, "s_defense": 70, "speed": 85}, "ability": "hyper cutter"}
        pokemon_list["exeggutor"] = {"name": "exeggutor", "type": ["grass", "psychic"], "moves": ["vine whip", "psychic", "swords dance", "ancient power"], "stats": {"hp": 95, "attack": 95, "defense": 85, "s_attack": 125, "s_defense": 75, "speed": 55}, "ability": "clorophyll"}
        pokemon_list["poliwrath"] = {"name": "poliwrath", "type": ["water", "fighting"], "moves": ["water gun", "blizzard", "work up", "belly drum"], "stats": {"hp": 90, "attack": 95, "defense": 95, "s_attack": 70, "s_defense": 90, "speed": 70}, "ability": "sift swim"}
        pokemon_list["chansey"] = {"name": "chansey", "type": ["normal"], "moves": ["charm", "double team", "blizzard"], "stats": {"hp": 250, "attack": 5, "defense": 5, "s_attack": 35, "s_defense": 105, "speed": 50}, "ability": "natural cure"}
        pokemon_list["aerodactyl"] = {"name": "aerodactyl", "type": ["rock", "flying"], "moves": ["ancient power", "earthquake", "bite", "steel wing"], "stats": {"hp": 80, "attack": 105, "defense": 65, "s_attack": 60, "s_defense": 75, "speed": 130}, "ability": "rock head"}
        pokemon_list["pikachu"] = {"name": "pikachu", "type": ["electric"], "moves": ["tackle", "thunder", "quick attack"], "stats": {"hp": 35, "attack": 55, "defense": 40, "s_attack": 50, "s_defense": 50, "speed": 90}, "ability": "lightning rod"}
        pokemon_list["snorlax"] = {"name": "snorlax", "type": ["normal"], "moves": ["tackle", "growl", "surf", "bite"], "stats": {"hp": 160, "attack": 110, "defense": 65, "s_attack": 65, "s_defense": 110, "speed": 30}, "ability": "thick fat"}
        pokemon_list["dragonite"] = {"name": "dragonite", "type": ["dragon", "flying"], "moves": ["dragon rush", "thunder punch", "fire punch", "dragon dance"], "stats": {"hp": 91, "attack": 134, "defense": 95, "s_attack": 100, "s_defense": 100, "speed": 80}, "ability": "multiscale"}
        pokemon_list["persian"] = {"name": "persian", "type": ["normal"], "moves": ["shadow ball", "nasty plot", "bite", "double team"], "stats": {"hp": 65, "attack": 70, "defense": 60, "s_attack": 65, "s_defense": 65, "speed": 115}, "ability": "limber"}
        pokemon_list["victreebel"] = {'name': 'victreebel', 'type': ['grass', 'poison'], 'moves': ["vine whip", "leaf storm", "sunny day"], 'stats': {'hp': 80, 'attack': 105, 'defense': 65, 's_attack': 100, 's_defense': 70, 'speed': 70}, "ability": "clorophyll"}
        pokemon_list["magneton"] = {'name': 'magneton', 'type': ['electric', 'steel'], 'moves': ["thunder", "charge beam", "metal sound", "explosion"], 'stats': {'hp': 50, 'attack': 60, 'defense': 95, 's_attack': 120, 's_defense': 70, 'speed': 70}, "ability": "sturdy"}
        #eveelutions
        pokemon_list["vaporeon"] = {"name": "vaporeon", "type": ["water"], "moves": ["water gun", "hydro pump", "blizzard", "mud slap"], "stats": {"hp": 130, "attack": 65, "defense": 60, "s_attack": 110, "s_defense": 95, "speed": 65}, "ability": "water absorb"}
        pokemon_list["flareon"] = {"name": "flareon", "type": ["fire"], "moves": ["ember", "overheat", "double kick", "charm"], "stats": {"hp": 65, "attack": 130, "defense": 60, "s_attack": 95, "s_defense": 110, "speed": 65}, "ability": "flash fire"}
        pokemon_list["jolteon"] = {"name": "jolteon", "type": ["electric"], "moves": ["thunder", "shadow ball", "double team", "work up"], "stats": {"hp": 65, "attack": 65, "defense": 60, "s_attack": 110, "s_defense": 95, "speed": 130}, "ability": "volt absorb"}

        #legendaries
        pokemon_list["mewtwo"] = {"name": "mewtwo", "type": ["psychic"], "moves": ["psychic", "shadow ball", "ancient power", "calm mind"], "stats": {"hp": 106, "attack": 110, "defense": 90, "s_attack": 154, "s_defense": 90, "speed": 130}, "ability": "synchronize"}
        pokemon_list["mew"] = {"name": "mew", "type": ["psychic"], "moves": ["psychic", "nasty plot", "shadow ball", "bulk up"], "stats": {"hp": 100, "attack": 100, "defense": 100, "s_attack": 100, "s_defense": 100, "speed": 100}, "ability": "synchronize"}
        pokemon_list["articuno"] = {"name": "articuno", "type": ["ice", "flying"], "moves": ["hurricane", "blizzard", "steel wing", "hail"], "stats": {"hp": 90, "attack": 85, "defense": 100, "s_attack": 95, "s_defense": 125, "speed": 85}, "ability": "snow cloak"}
        pokemon_list["zapdos"] = {"name": "zapdos", "type": ["electric", "flying"], "moves": ["thunder", "ancient power", "double team", "rain dance"], "stats": {"hp": 90, "attack": 90, "defense": 85, "s_attack": 125, "s_defense": 90, "speed": 100}, "ability": "static"}
        pokemon_list["moltres"] = {"name": "moltres", "type": ["fire", "flying"], "moves": ["overheat", "ancient power", "heat wave", "sunny day"], "stats": {"hp": 90, "attack": 100, "defense": 90, "s_attack": 125, "s_defense": 85, "speed": 90}, "ability": "flame body"}

        #gen 2          {"name": "", "type": [], "moves": [], "stats": {"hp": , "attack": , "defense": , "s_attack": , "s_defense": , "speed": }}
        pokemon_list["meganium"] = {"name": "meganium", "type": ["grass"], "moves": ["frenzy plant", "ancient power", "earthquake", "double team"], "stats": {"hp": 80, "attack": 82, "defense": 100, "s_attack": 83, "s_defense": 100, "speed": 80}, "ability": "overgrow"}
        pokemon_list["typhlosion"] = {"name": "typhlosion", "type": ["fire"], "moves": ["blast burn", "quick attack", "rock tomb", "sunny day"], "stats": {"hp": 78, "attack": 84, "defense": 78, "s_attack": 109, "s_defense": 85, "speed": 100}, "ability": "blaze"}
        pokemon_list["feraligatr"] = {"name": "feraligatr", "type": ["water"], "moves": ["hydro cannon", "mud slap", "bite", "ice fang"], "stats": {"hp": 85, "attack": 105, "defense": 100, "s_attack": 79, "s_defense": 83, "speed": 78}, "ability": "torrent"}
        pokemon_list["steelix"] = {"name": "steelix", "type": ["steel", "ground"], "moves": ["rock tomb", "earthquake", "sandstorm", "ice fang"], "stats": {"hp": 75, "attack": 85, "defense": 200, "s_attack": 55, "s_defense": 65, "speed": 30}, "ability": "sturdy"}
        pokemon_list["scizor"] = {"name": "scizor", "type": ["bug", "steel"], "moves": ["x scissor", "steel wing", "quick attack", "swords dance"], "stats": {"hp": 70, "attack": 130, "defense": 100, "s_attack": 55, "s_defense": 80, "speed": 65}, "ability": "swarm"}
        pokemon_list["kingdra"] = {"name": "kingdra", "type": ["water", "dragon"], "moves": ["hydro pump", "ice beam", "rain dance", "dragon dance"], "stats": {"hp": 75, "attack": 95, "defense": 95, "s_attack": 95, "s_defense": 95, "speed": 85}, "ability": "sift swim"}
        pokemon_list["tyranitar"] = {"name": "tyranitar", "type": ["rock", "dark"], "moves": ["earthquake", "bite", "ancient power", "dragon dance"], "stats": {"hp": 100, "attack": 134, "defense": 110, "s_attack": 95, "s_defense": 100, "speed": 61}, "ability": "sandstream"}
        pokemon_list["ampharos"] = {"name": "ampharos", "type": ["electric"], "moves": ["thunder", "dragon pulse", "fire punch", "charge bearm"], "stats": {"hp": 90, "attack": 95, "defense": 105, "s_attack": 165, "s_defense": 110, "speed": 45}, "ability": "static"}
        pokemon_list["crobat"] = {"name": "crobat", "type": ["poison", "flying"], "moves": ["venoshock", "steel wing", "bite", "nasty plot"], "stats": {"hp": 85, "attack": 90,  "defense": 80, "s_attack": 70, "s_defense": 80, "speed": 130}, "ability": "inner focus"}
        pokemon_list["espeon"] = {'name': 'espeon', 'type': ['psychic'], 'moves': ["psychic", "bite", "quick attack", "double team"], 'stats': {'hp': 65, 'attack': 65, 'defense': 60, 's_attack': 130, 's_defense': 95, 'speed': 110}, "ability": "synchronize"}
        pokemon_list["umbreon"] = {'name': 'umbreon', 'type': ['dark'], 'moves': ["bite", "double team", "quick attack", "nasty plot"], 'stats': {'hp': 95, 'attack': 65, 'defense': 110, 's_attack': 60, 's_defense': 130, 'speed': 65}, "ability": "synchronize"}
        pokemon_list["heracross"] = {'name': 'heracross', 'type': ['bug', "fighting"], 'moves': ["tackle", "bulk up", "megahorn", "swords dance"], 'stats': {'hp': 80, 'attack': 125, 'defense': 75, 's_attack': 40, 's_defense': 95, 'speed': 85}, "ability": "swarm"}
        pokemon_list["skarmory"] = {'name': 'skarmory', 'type': ['steel', 'flying'], 'moves': ["peck", "steel wing", "metal sound", "sandstorm"], 'stats': {'hp': 65, 'attack': 80, 'defense': 140, 's_attack': 40, 's_defense': 70, 'speed': 70}, "ability": "keen eye"}
        pokemon_list["piloswine"] = {"name": "piloswine", "type": ["ice", "ground"], "moves": ["ancient power", "ice beam", "earthquake", "amnesia"], "stats": {"hp": 100, "attack": 100, "defense": 80, "s_attack": 60, "s_defense": 60, "speed": 50}, "ability": "thick fat"}

        #legendaries
        pokemon_list["celebi"] = {"name": "celebi", "type": ["grass", "psychic"], "moves": ["leaf storm", "dazzling gleam", "ancient power", "psychic"], "stats": {"hp": 100, "attack": 100, "defense": 100, "s_attack": 100, "s_defense": 100, "speed": 100}, "ability": "natural cure"}

        #gen 3
        pokemon_list["sceptile"] = {'name': 'sceptile', 'type': ['grass'], 'moves': ["energy ball", "dragon pulse", "giga drain", "double team"], 'stats': {'hp': 70, 'attack': 85, 'defense': 65, 's_attack': 105, 's_defense': 85, 'speed': 120}, "ability": "overgrow"}
        pokemon_list["swampert"] = {'name': 'swampert', 'type': ['water', 'ground'], 'moves': ["earthquake", "surf", "ancient power", "bulk up"], 'stats': {'hp': 100, 'attack': 110, 'defense': 90, 's_attack': 85, 's_defense': 90, 'speed': 60}, "ability": "torrent"}
        pokemon_list["blaziken"] = {"name": "blaziken", "type": ["fire", "fighting"], "moves": ["blaze kick", "flare blitz", "stone edge", "swords dance"], "stats": {"hp": 80, "attack": 120, "defense": 70, "s_attack": 110, "s_defense": 70, "speed": 80}, "ability" : "speed boost"}
        pokemon_list["manectric"] = {'name': 'manectric', 'type': ['electric'], 'moves': ["thunder", "iron tail", "ice fang", "double team"], 'stats': {'hp': 70, 'attack': 75, 'defense': 60, 's_attack': 105, 's_defense': 60, 'speed': 105}, "ability": "lightning rod"}
        pokemon_list["altaria"] = {'name': 'altaria', 'type': ['dragon', 'flying'], 'moves': ["dragon pulse", "hurricane", "cotton guard", "dazzling gleam"], 'stats': {'hp': 75, 'attack': 70, 'defense': 90, 's_attack': 70, 's_defense': 105, 'speed': 80}, "ability": "cloud nine"}
        pokemon_list["shiftry"] = {'name': 'shiftry', 'type': ['grass', 'dark'], 'moves': ["energy ball", "rock tomb", "shadow ball", "hurricane"], 'stats': {'hp': 90, 'attack': 100, 'defense': 60, 's_attack': 90, 's_defense': 60, 'speed': 80}, "ability": "clorophyll"}
        pokemon_list["gardevoir"] = {"name": "gardevoir", "type": ["psychic", "fairy"], "moves": ["psychic", "moonblast", "shadow ball", "double team"], "stats": {"hp": 68, "attack": 65, "defense": 65, "s_attack": 125, "s_defense": 115, "speed": 80}, "ability": "synchronize"}
        pokemon_list["ludicolo"] = {"name": "ludicolo", "type": ["water", "grass"], "moves": ["hydro pump", "ice beam", "energy ball", "rain dance"], "stats": {"hp": 80, "attack": 70, "defense": 70, "s_attack": 90, "s_defense": 100, "speed": 70}, "ability": "sift swim"}
        pokemon_list["aggron"] = {"name": "aggron", "type": ["steel", "rock"], "moves": ["iron tail", "rock tomb", "iron defense", "earthquake"], "stats": {"hp": 70, "attack": 110, "defense": 180, "s_attack": 60, "s_defense": 60, "speed": 50}, "ability": "sturdy"}
        pokemon_list["flygon"] = {"name": "flygon", "type": ["ground", "dragon"], "moves": ["earthquake", "dragon rush", "sandstorm", "dragon dance"], "stats": {"hp": 80, "attack": 100, "defense": 80, "s_attack": 80, "s_defense": 80, "speed": 100}, "ability": "levitate"}
        pokemon_list["salamence"] = {"name": "salamence", "type": ["dragon", "flying"], "moves": ["dragon rush", "iron tail", "double team", "dragon dance"], "stats": {"hp": 95, "attack": 135, "defense": 80, "s_attack": 110, "s_defense": 80, "speed": 110}, "ability": "intimidate"}
        pokemon_list["metagross"] = {"name": "metagross", "type": ["steel", "psychic"], "moves": ["meteor mash", "iron defense", "double team", "sandstorm"], "stats": {"hp": 80, "attack": 135, "defense": 130, "s_attack": 95, "s_defense": 90, "speed": 70}, "ability": "clear body"}
        pokemon_list["mightyena"] = {'name': 'mightyena', 'type': ['dark'], 'moves': ["bite", "thunder fang", "play rough", "mud slap"], 'stats': {'hp': 70, 'attack': 90, 'defense': 70, 's_attack': 60, 's_defense': 60, 'speed': 70}, "ability": "intimidate"}
        pokemon_list["camerupt"] = {'name': 'camerupt', 'type': ['fire', 'ground'], 'moves': ["ember", "earthquake", "sunny day", "double team"], 'stats': {'hp': 70, 'attack': 100, 'defense': 70, 's_attack': 105, 's_defense': 75, 'speed': 40}, "ability": "magma armor"}
        pokemon_list["sharpedo"] = {'name': 'sharpedo', 'type': ['water', 'dark'], 'moves': ["bite", "ice fang", "rain dance", "surf"], 'stats': {'hp': 70, 'attack': 120, 'defense': 40, 's_attack': 95, 's_defense': 40, 'speed': 95}, "ability": "speed boost"}
        pokemon_list["walrein"] = {'name': 'walrein', 'type': ['water', 'ice'], 'moves': ["earthquake", "ice beam", "surf", "iron tail"], 'stats': {'hp': 110, 'attack': 80, 'defense': 90, 's_attack': 95, 's_defense': 90, 'speed': 65}, "ability": "thick fat"}

        #legendaries
        pokemon_list["rayquaza"] = {"name": "rayquaza", "type": ["dragon", "flying"], "moves": ["dragon ascent", "ancient power", "bulk up", "dragon dance"], "stats": {"hp": 105, "attack": 150, "defense": 90, "s_attack": 150, "s_defense": 90, "speed": 95}, "ability": "air lock"}
        pokemon_list["latias"] = {'name': 'latias', 'type': ['dragon', 'psychic'], 'moves': ["psychic", "dragon pulse", "ice beam", "earthquake"], 'stats': {'hp': 80, 'attack': 80, 'defense': 90, 's_attack': 110, 's_defense': 130, 'speed': 110}, "ability": "levitate"}
        pokemon_list["latios"] = {'name': 'latios', 'type': ['dragon', 'psychic'], 'moves': ["psychic", "dragon pulse", "thunder", "shadow ball"], 'stats': {'hp': 80, 'attack': 90, 'defense': 80, 's_attack': 130, 's_defense': 110, 'speed': 110}, "ability": "levitate"}
        pokemon_list["kyogre"] = {'name': 'kyogre', 'type': ['water'], 'moves': ["origin pulse", "ice beam", "rain dance", "calm mind"], 'stats': {'hp': 100, 'attack': 100, 'defense': 90, 's_attack': 150, 's_defense': 140, 'speed': 90}, "ability": "drizzle"}
        pokemon_list["groudon"] = {'name': 'groudon', 'type': ['ground'], 'moves': ["precipice blades", "overheat", "sunny day", "bulk up"], 'stats': {'hp': 100, 'attack': 150, 'defense': 140, 's_attack': 100, 's_defense': 90, 'speed': 90}, "ability": "drought"}
        pokemon_list["deoxys"] = {'name': 'deoxys', 'type': ['psychic'], 'moves': ["psychic", "thunder punch", "extreme speed", "ice punch"], 'stats': {'hp': 50, 'attack': 150, 'defense': 50, 's_attack': 150, 's_defense': 50, 'speed': 150}, "ability": "pressure"}
        pokemon_list["deoxys attack"] = {'name': 'deoxys attack', 'type': ['psychic'], 'moves': ["extreme speed", "ice beam", "shadow ball", "psycho boost"], 'stats': {'hp': 50, 'attack': 180, 'defense': 20, 's_attack': 180, 's_defense': 20, 'speed': 150}, "ability": "pressure"}
        pokemon_list["deoxys defense"] = {'name': 'deoxys defense', 'type': ['psychic'], 'moves': ["cosmic power", "recover", "psychic", "protect"], 'stats': {'hp': 50, 'attack': 70, 'defense': 160, 's_attack': 70, 's_defense': 160, 'speed': 90}, "ability": "pressure"}
        pokemon_list["deoxys speed"] = {'name': 'deoxys speed', 'type': ['psychic'], 'moves': ["energy ball", "charge beam", "psycho boost", "stealth rock"], 'stats': {'hp': 50, 'attack': 95, 'defense': 90, 's_attack': 95, 's_defense': 90, 'speed': 180}, "ability": "pressure"}
        #gen 4
        pokemon_list["togekiss"] = {'name': 'togekiss', 'type': ['fairy', 'flying'], 'moves': ["ancient power", "dazzling gleam", "shadow ball", "nasty plot"], 'stats': {'hp': 85, 'attack': 50, 'defense': 95, 's_attack': 120, 's_defense': 115, 'speed': 80}, "ability": "serene grace"}
        pokemon_list["lucario"] = {'name': 'lucario', 'type': ['fighting', 'steel'], 'moves': ["earthquake", "meteor mash", "close combat", "work up"], 'stats': {'hp': 70, 'attack': 110, 'defense': 70, 's_attack': 115, 's_defense': 70, 'speed': 90}, "ability": "aura"}
        pokemon_list["weavile"] = {'name': 'weavile', 'type': ['ice', 'dark'], 'moves': ["bite", "ice punch", "iron tail", "hone claws"], 'stats': {'hp': 70, 'attack': 120, 'defense': 65, 's_attack': 45, 's_defense': 85, 'speed': 125}, "ability": "prankster"}
        pokemon_list["toxicroak"] = {'name': 'toxicroak', 'type': ['poison', 'fighting'], 'moves': ["mud slap", "stone edge", "shadow ball", "earthquake"], 'stats': {'hp': 83, 'attack': 106, 'defense': 65, 's_attack': 86, 's_defense': 65, 'speed': 85}, "ability": "prankster"}

        #gen 8
        #legendaries
        pokemon_list["ice calyrex"] = {'name': 'ice calyrex', 'type': ['psychic', 'ice'], 'moves': ["glacial lance", "swords dance", "iron defense", "close combat"], 'stats': {'hp': 100, 'attack': 165, 'defense': 150, 's_attack': 85, 's_defense': 130, 'speed': 50}, "ability": "as one"}
        pokemon_list["shadow calyrex"] = {'name': 'shadow calyrex', 'type': ['psychic', 'ghost'], 'moves': ["astral barrage", "nasty plot", "psychic", "energy ball"], 'stats': {'hp': 100, 'attack': 85, 'defense': 80, 's_attack': 165, 's_defense': 100, 'speed': 150}, "ability": "as one"}

        #unevolved
        pokemon_list["bulbasaur"] = {'name': 'bulbasaur', 'type': ['grass', 'poison'],
                                     'moves': ["growl", "tackle", "vine whip", "work up"],
                                     'stats': {'hp': 45, 'attack': 49, 'defense': 49, 's_attack': 65, 's_defense': 65,
                                               'speed': 45}, "ability": ""}
        pokemon_list["ivysaur"] = {'name': 'ivysaur', 'type': ['grass', 'poison'],
                                   'moves': ["growl", "tackle", "vine whip", "work up"],
                                   'stats': {'hp': 60, 'attack': 62, 'defense': 63, 's_attack': 80, 's_defense': 80,
                                             'speed': 60}, 'ability': ''}
        pokemon_list["charmander"] = {'name': 'charmander', 'type': ['fire'],
                                      'moves': ["bite", "ember", "sunny day", "work up"],
                                      'stats': {'hp': 309, 'attack': 39, 'defense': 52, 's_attack': 43, 's_defense': 60,
                                                'speed': 50}, 'ability': ''}
        pokemon_list["charmeleon"] = {'name': 'charmeleon', 'type': ['fire'],
                                      'moves': ["bite", "ember", "sunny day", "work up"],
                                      'stats': {'hp': 58, 'attack': 64, 'defense': 58, 's_attack': 80, 's_defense': 65,
                                                'speed': 80}, 'ability': ''}
        pokemon_list["squirtle"] = {'name': 'squirtle', 'type': ['water'],
                                    'moves': ["bite", "water gun", "rain dance", "tackle"],
                                    'stats': {'hp': 44, 'attack': 48, 'defense': 65, 's_attack': 50, 's_defense': 64,
                                              'speed': 43}, 'ability': ''}
        pokemon_list["wartortle"] = {'name': 'wartortle', 'type': ['water'],
                                     'moves': ["bite", "water gun", "rain dance", "tackle"],
                                     'stats': {'hp': 59, 'attack': 63, 'defense': 80, 's_attack': 65, 's_defense': 80,
                                               'speed': 58}, 'ability': ''}

        pokemon_list["weedle"] = {'name': 'weedle', 'type': ['bug', 'posion'],
                                  'moves': ["x scissor", "sludge", "confide", "quick attack"],
                                  'stats': {'hp': 40, 'attack': 35, 'defense': 30, 's_attack': 20, 's_defense': 20,
                                            'speed': 50}, 'ability': ''}
        pokemon_list["kakuna"] = {'name': 'kakuna', 'type': ['bug', 'poison'],
                                  'moves': ["x scissor", "sludge", "confide", "quick attack"],
                                  'stats': {'hp': 45, 'attack': 25, 'defense': 50, 's_attack': 25, 's_defense': 25,
                                            'speed': 35}, 'ability': ''}
        pokemon_list["pidgey"] = {'name': 'pidgey', 'type': ['normal', 'flying'],
                                  'moves': ["tackle", "quick attack", "aerial ace", "steel wing"],
                                  'stats': {'hp': 40, 'attack': 45, 'defense': 40, 's_attack': 35, 's_defense': 35,
                                            'speed': 56}, 'ability': ''}
        pokemon_list["pidgeotto"] = {'name': 'pidgeotto', 'type': ['normal', 'flying'],
                                     'moves': ["tackle", "quick attack", "aerial ace", "steel wing"],
                                     'stats': {'hp': 63, 'attack': 60, 'defense': 55, 's_attack': 50, 's_defense': 50,
                                               'speed': 71}, 'ability': ''}
        pokemon_list["zubat"] = {'name': 'zubat', 'type': ['poison', 'flying'],
                                 'moves': ["air cutter", "giga drain", "bite", "double team"],
                                 'stats': {'hp': 40, 'attack': 45, 'defense': 35, 's_attack': 30, 's_defense': 40,
                                           'speed': 55},
                                 'ability': ''}
        pokemon_list["golbat"] = {'name': 'golbat', 'type': ['poison', 'flying'],
                                  'moves': ["air cutter", "giga drain", "bite", "double team"],
                                  'stats': {'hp': 75, 'attack': 80, 'defense': 70, 's_attack': 65, 's_defense': 75,
                                            'speed': 90}, 'ability': ''}
        pokemon_list["meowth"] = {'name': 'meowth', 'type': ['normal'],
                                  'moves': ["growl", "bite", "double team", "play rough"],
                                  'stats': {'hp': 40, 'attack': 45, 'defense': 35, 's_attack': 40, 's_defense': 40,
                                            'speed': 90}, 'ability': ''}
        pokemon_list["poliwag"] = {'name': 'poliwag', 'type': ['water', 'fighting'],
                                   'moves': ["water gun", "double team", "ice beam", "rain dance"],
                                   'stats': {'hp': 40, 'attack': 50, 'defense': 40, 's_attack': 40, 's_defense': 40,
                                             'speed': 90}, 'ability': ''}
        pokemon_list["poliwhirl"] = {'name': 'poliwhirl', 'type': ['water', 'fighting'],
                                     'moves': ["water gun", "double team", "ice beam", "rain dance"],
                                     'stats': {'hp': 65, 'attack': 65, 'defense': 65, 's_attack': 50, 's_defense': 50,
                                               'speed': 90}, 'ability': ''}
        pokemon_list["abra"] = {'name': 'abra', 'type': ['psychic'],
                                'moves': ["psychic", "calm mind", "light screen", "reflect"],
                                'stats': {'hp': 25, 'attack': 20, 'defense': 15, 's_attack': 105, 's_defense': 55,
                                          'speed': 90},
                                'ability': ''}
        pokemon_list["kadabra"] = {'name': 'kadabra', 'type': ['psychic'],
                                   'moves': ["psychic", "calm mind", "light screen", "reflect"],
                                   'stats': {'hp': 40, 'attack': 35, 'defense': 30, 's_attack': 120, 's_defense': 70,
                                             'speed': 105}, 'ability': ''}
        pokemon_list["machop"] = {'name': 'machop', 'type': ['fighting'],
                                  'moves': ["fire punch", "ice punch", "bulk up", "work up"],
                                  'stats': {'hp': 70, 'attack': 80, 'defense': 50, 's_attack': 35, 's_defense': 35,
                                            'speed': 35}, 'ability': ''}
        pokemon_list["machoke"] = {'name': 'machoke', 'type': ['fighting'],
                                   'moves': ["fire punch", "ice punch", "bulk up", "work up"],
                                   'stats': {'hp': 80, 'attack': 100, 'defense': 70, 's_attack': 50, 's_defense': 60,
                                             'speed': 45}, 'ability': ''}
        pokemon_list["bellsprout"] = {'name': 'bellsprout', 'type': ['grass', 'poison'],
                                      'moves': ["vine whip", "razor leaf", "energy ball", "swords dance"],
                                      'stats': {'hp': 50, 'attack': 75, 'defense': 35, 's_attack': 70, 's_defense': 30,
                                                'speed': 40}, 'ability': ''}
        pokemon_list["weepinbell"] = {'name': 'weepinbell', 'type': ['grass', 'poison'],
                                      'moves': ["vine whip", "razor leaf", "energy ball", "swords dance"],
                                      'stats': {'hp': 65, 'attack': 90, 'defense': 50, 's_attack': 85, 's_defense': 45,
                                                'speed': 55}, 'ability': ''}
        pokemon_list["geodude"] = {'name': 'geodude', 'type': ['rock', 'ground'],
                                   'moves': ["tackle", "sandstorm", "stealth rock", "stone edge"],
                                   'stats': {'hp': 40, 'attack': 80, 'defense': 100, 's_attack': 30, 's_defense': 30,
                                             'speed': 20}, 'ability': ''}
        pokemon_list["graveler"] = {'name': 'graveler', 'type': ['rock', 'ground'],
                                    'moves': ["tackle", "sandstorm", "stealth rock", "stone edge"],
                                    'stats': {'hp': 55, 'attack': 95, 'defense': 115, 's_attack': 45, 's_defense': 45,
                                              'speed': 35}, 'ability': ''}
        pokemon_list["magnemite"] = {'name': 'magnemite', 'type': ['electric', 'steel'],
                                     'moves': ["tackle", "thunder wave", "light screen", "reflect"],
                                     'stats': {'hp': 25, 'attack': 35, 'defense': 70, 's_attack': 95, 's_defense': 55,
                                               'speed': 45}, 'ability': ''}
        pokemon_list["ghastly"] = {'name': 'ghastly', 'type': ['poison', 'ghost'],
                                   'moves': ["dark pulse", "shadow ball", "giga drain", "double team"],
                                   'stats': {'hp': 30, 'attack': 35, 'defense': 30, 's_attack': 100, 's_defense': 35,
                                             'speed': 80}, 'ability': ''}
        pokemon_list["haunter"] = {'name': 'haunter', 'type': ['poison', 'ghost'],
                                   'moves': ["dark pulse", "shadow ball", "giga drain", "double team"],
                                   'stats': {'hp': 45, 'attack': 50, 'defense': 45, 's_attack': 115, 's_defense': 55,
                                             'speed': 95}, 'ability': ''}

        pokemon_list["onix"] = {'name': 'onix', 'type': ['rock', 'ground'],
                                'moves': ["stealth rock", "sandstorm", "iron tail", "stone edge"],
                                'stats': {'hp': 35, 'attack': 45, 'defense': 160, 's_attack': 30, 's_defense': 45,
                                          'speed': 70},
                                'ability': ''}
        pokemon_list["exeggcute"] = {'name': 'exeggcute', 'type': ['grass', 'psychic'],
                                     'moves': ["giga drain", "sunny day", "ancient power", "reflect"],
                                     'stats': {'hp': 60, 'attack': 40, 'defense': 80, 's_attack': 60, 's_defense': 45,
                                               'speed': 40}, 'ability': ''}
        pokemon_list["horsea"] = {'name': 'horsea', 'type': ['water'],
                                  'moves': ["water gun", "rain dance", "dragon dance", "agility"],
                                  'stats': {'hp': 30, 'attack': 40, 'defense': 70, 's_attack': 70, 's_defense': 25,
                                            'speed': 60}, 'ability': ''}
        pokemon_list["seadra"] = {'name': 'seadra', 'type': ['water'],
                                  'moves': ["water gun", "rain dance", "dragon dance", "agility"],
                                  'stats': {'hp': 55, 'attack': 65, 'defense': 95, 's_attack': 95, 's_defense': 45,
                                            'speed': 85}, 'ability': ''}
        pokemon_list["scyther"] = {'name': 'scyther', 'type': ['bug', 'flying'],
                                   'moves': ["quick attack", "double team", "swords dance", "agility"],
                                   'stats': {'hp': 70, 'attack': 110, 'defense': 80, 's_attack': 55, 's_defense': 80,
                                             'speed': 105}, 'ability': ''}
        pokemon_list["magikarp"] = {'name': 'magikarp', 'type': ['water'],
                                    'moves': ["tackle", "water gun", "rain dance", "double team"],
                                    'stats': {'hp': 20, 'attack': 10, 'defense': 55, 's_attack': 15, 's_defense': 20,
                                              'speed': 80}, 'ability': ''}
        pokemon_list["eevee"] = {'name': 'eevee', 'type': ['normal'],
                                 'moves': ["growl", "tackle", "quick attack", "bite"],
                                 'stats': {'hp': 55, 'attack': 55, 'defense': 50, 's_attack': 45, 's_defense': 65,
                                           'speed': 55},
                                 'ability': ''}
        pokemon_list["dratini"] = {'name': 'dratini', 'type': ['dragon'],
                                   'moves': ["thunder wave", "agility", "dragon dance", "dragon rush"],
                                   'stats': {'hp': 41, 'attack': 64, 'defense': 45, 's_attack': 50, 's_defense': 50,
                                             'speed': 50}, 'ability': ''}
        pokemon_list["dragonair"] = {'name': 'dragonair', 'type': ['dragon'],
                                     'moves': ["thunder wave", "agility", "dragon dance", "dragon rush"],
                                     'stats': {'hp': 61, 'attack': 84, 'defense': 65, 's_attack': 70, 's_defense': 70,
                                               'speed': 70}, 'ability': ''}

        # gen 2
        pokemon_list["chikorita"] = {'name': 'chikorita', 'type': ['grass'],
                                     'moves': ["growl", "tackle", "razor leaf", "reflect"],
                                     'stats': {'hp': 45, 'attack': 49, 'defense': 65, 's_attack': 49, 's_defense': 65,
                                               'speed': 45}, 'ability': ''}
        pokemon_list["bayleef"] = {'name': 'bayleef', 'type': ['grass'],
                                   'moves': ["growl", "tackle", "razor leaf", "reflect"],
                                   'stats': {'hp': 60, 'attack': 62, 'defense': 80, 's_attack': 63, 's_defense': 80,
                                             'speed': 60}, 'ability': ''}
        pokemon_list["cyndaquil"] = {'name': 'cyndaquil', 'type': ['fire'],
                                     'moves': ["ember", "quick attack", "tackle", "double team"],
                                     'stats': {'hp': 39, 'attack': 52, 'defense': 43, 's_attack': 60, 's_defense': 50,
                                               'speed': 65}, 'ability': ''}
        pokemon_list["quilava"] = {'name': 'quilava', 'type': ['fire'],
                                   'moves': ["ember", "quick attack", "tackle", "double team"],
                                   'stats': {'hp': 58, 'attack': 64, 'defense': 58, 's_attack': 80, 's_defense': 65,
                                             'speed': 80}, 'ability': ''}
        pokemon_list["totodile"] = {'name': 'totodile', 'type': ['water'],
                                    'moves': ["water gun", "bite", "ice fang", "work up"],
                                    'stats': {'hp': 50, 'attack': 65, 'defense': 64, 's_attack': 44, 's_defense': 48,
                                              'speed': 43}, 'ability': ''}
        pokemon_list["croconaw"] = {'name': 'croconaw', 'type': ['water'],
                                    'moves': ["water gun", "bite", "ice fang", "work up"],
                                    'stats': {'hp': 65, 'attack': 80, 'defense': 80, 's_attack': 59, 's_defense': 63,
                                              'speed': 58}, 'ability': ''}

        pokemon_list["togepi"] = {'name': 'togepi', 'type': ['fairy'],
                                  'moves': ["growl", "ancient power", "shadow ball", "double team"],
                                  'stats': {'hp': 35, 'attack': 20, 'defense': 65, 's_attack': 40, 's_defense': 65,
                                            'speed': 20}, 'ability': ''}
        pokemon_list["togetic"] = {'name': 'togetic', 'type': ['fairy', 'flying'],
                                   'moves': ["growl", "ancient power", "shadow ball", "double team"],
                                   'stats': {'hp': 55, 'attack': 40, 'defense': 85, 's_attack': 80, 's_defense': 105,
                                             'speed': 40}, 'ability': ''}
        pokemon_list["mareep"] = {'name': 'mareep', 'type': ['electric'],
                                  'moves': ["thunder wave", "cotton guard", "double team", "thunder"],
                                  'stats': {'hp': 55, 'attack': 40, 'defense': 40, 's_attack': 65, 's_defense': 45,
                                            'speed': 35}, 'ability': ''}
        pokemon_list["flaaffy"] = {'name': 'flaaffy', 'type': ['electric'],
                                   'moves': ["thunder wave", "cotton guard", "double team", "thunder"],
                                   'stats': {'hp': 70, 'attack': 55, 'defense': 55, 's_attack': 80, 's_defense': 60,
                                             'speed': 45}, 'ability': ''}
        pokemon_list["larvitar"] = {'name': 'larvitar', 'type': ['rock', 'ground'],
                                    'moves': ["iron defense", "bite", "tackle", "stone edge"],
                                    'stats': {'hp': 50, 'attack': 64, 'defense': 50, 's_attack': 45, 's_defense': 50,
                                              'speed': 41}, 'ability': ''}
        pokemon_list["pupitar"] = {'name': 'pupitar', 'type': ['rock', 'ground'],
                                   'moves': ["iron defense", "bite", "tackle", "stone edge"],
                                   'stats': {'hp': 70, 'attack': 84, 'defense': 70, 's_attack': 65, 's_defense': 70,
                                             'speed': 51}, 'ability': ''}
        pokemon_list["swinub"] = {'name': 'swinub', 'type': ['ice', 'ground'],
                                  'moves': ["mud slap", "tackle", "hail", "ice beam"],
                                  'stats': {'hp': 50, 'attack': 50, 'defense': 40, 's_attack': 30, 's_defense': 30,
                                            'speed': 50}, 'ability': ''}
        pokemon_list["sneasel"] = {'name': 'sneasel', 'type': ['dark', 'ice'],
                                   'moves': ["quick attack", "agility", "bite", "ice beam"],
                                   'stats': {'hp': 55, 'attack': 95, 'defense': 55, 's_attack': 35, 's_defense': 75,
                                             'speed': 115}, 'ability': ''}

        # gen 3
        pokemon_list["treecko"] = {'name': 'treecko', 'type': ['grass'],
                                   'moves': ["pound", "quick attack", "giga drain", "double team"],
                                   'stats': {'hp': 40, 'attack': 45, 'defense': 35, 's_attack': 65, 's_defense': 55,
                                             'speed': 70}, 'ability': ''}
        pokemon_list["grovyle"] = {'name': 'grovyle', 'type': ['grass'],
                                   'moves': ["pound", "quick attack", "giga drain", "double team"],
                                   'stats': {'hp': 50, 'attack': 65, 'defense': 45, 's_attack': 85, 's_defense': 65,
                                             'speed': 95}, 'ability': ''}
        pokemon_list["torchic"] = {'name': 'torchic', 'type': ['fire'],
                                   'moves': ["growl", "scratch", "flame charge", "aerial ace"],
                                   'stats': {'hp': 45, 'attack': 60, 'defense': 40, 's_attack': 70, 's_defense': 50,
                                             'speed': 45}, 'ability': ''}
        pokemon_list["combusken"] = {'name': 'combusken', 'type': ['fire'],
                                     'moves': ["growl", "scratch", "flame charge", "aerial ace"],
                                     'stats': {'hp': 60, 'attack': 85, 'defense': 60, 's_attack': 85, 's_defense': 60,
                                               'speed': 55}, 'ability': ''}
        pokemon_list["mudkip"] = {'name': 'mudkip', 'type': ['water'],
                                  'moves': ["growl", "tackle", "water gun", "bite"],
                                  'stats': {'hp': 50, 'attack': 70, 'defense': 50, 's_attack': 50, 's_defense': 50,
                                            'speed': 40}, 'ability': ''}
        pokemon_list["marshtomp"] = {'name': 'marshtomp', 'type': ['water', 'ground'],
                                     'moves': ["growl", "tackle", "water gun", "bite"],
                                     'stats': {'hp': 70, 'attack': 85, 'defense': 70, 's_attack': 60, 's_defense': 70,
                                               'speed': 50}, 'ability': ''}

        pokemon_list["poochyena"] = {'name': 'poochyena', 'type': ['dark'],
                                     'moves': ["tackle", "bite", "mud slap", "iron tail"],
                                     'stats': {'hp': 35, 'attack': 55, 'defense': 35, 's_attack': 30, 's_defense': 30,
                                               'speed': 35}, 'ability': ''}
        pokemon_list["lotad"] = {'name': 'lotad', 'type': ['water', 'grass'],
                                 'moves': ["growl", "water gun", "giga drain", "rain dance"],
                                 'stats': {'hp': 40, 'attack': 30, 'defense': 30, 's_attack': 40, 's_defense': 50,
                                           'speed': 30},
                                 'ability': ''}
        pokemon_list["lombre"] = {'name': 'lombre', 'type': ['water', 'grass'],
                                  'moves': ["growl", "water gun", "giga drain", "rain dance"],
                                  'stats': {'hp': 60, 'attack': 50, 'defense': 50, 's_attack': 60, 's_defense': 70,
                                            'speed': 50}, 'ability': ''}
        pokemon_list["seedot"] = {'name': 'seedot', 'type': ['grass', 'dark'],
                                  'moves': ["tackle", "energy ball", "sunny day", "amnesia"],
                                  'stats': {'hp': 40, 'attack': 40, 'defense': 50, 's_attack': 30, 's_defense': 30,
                                            'speed': 30}, 'ability': ''}
        pokemon_list["nuzleaf"] = {'name': 'nuzleaf', 'type': ['grass', 'dark'],
                                   'moves': ["tackle", "energy ball", "sunny day", "amnesia"],
                                   'stats': {'hp': 70, 'attack': 70, 'defense': 40, 's_attack': 60, 's_defense': 40,
                                             'speed': 60}, 'ability': ''}
        pokemon_list["ralts"] = {'name': 'ralts', 'type': ['psychic', 'psychic'],
                                 'moves': ["growl", "double team", "psychic", "calm mind"],
                                 'stats': {'hp': 28, 'attack': 25, 'defense': 25, 's_attack': 45, 's_defense': 35,
                                           'speed': 40},
                                 'ability': ''}
        pokemon_list["kirlia"] = {'name': 'kirlia', 'type': ['psychic', 'fairy'],
                                  'moves': ["growl", "double team", "psychic", "calm mind"],
                                  'stats': {'hp': 38, 'attack': 35, 'defense': 35, 's_attack': 65, 's_defense': 55,
                                            'speed': 50}, 'ability': ''}
        pokemon_list["aron"] = {'name': 'aron', 'type': ['steel', 'rock'],
                                'moves': ["tackle", "metal claw", "metal sound", "iron head"],
                                'stats': {'hp': 50, 'attack': 70, 'defense': 100, 's_attack': 40, 's_defense': 40,
                                          'speed': 30},
                                'ability': ''}
        pokemon_list["lairon"] = {'name': 'lairon', 'type': ['steel', 'rock'],
                                  'moves': ["tackle", "metal claw", "metal sound", "iron head"],
                                  'stats': {'hp': 60, 'attack': 90, 'defense': 140, 's_attack': 50, 's_defense': 50,
                                            'speed': 40}, 'ability': ''}
        pokemon_list["electrike"] = {'name': 'electrike', 'type': ['electric'],
                                     'moves': ["thunder wave", "quick attack", "bite", "thunder fang"],
                                     'stats': {'hp': 40, 'attack': 45, 'defense': 40, 's_attack': 65, 's_defense': 40,
                                               'speed': 65}, 'ability': ''}
        pokemon_list["carvanha"] = {'name': 'carvanha', 'type': ['water'],
                                    'moves': ["bite", "ice fang", "agility", "ancient power"],
                                    'stats': {'hp': 45, 'attack': 90, 'defense': 20, 's_attack': 65, 's_defense': 20,
                                              'speed': 65}, 'ability': ''}
        pokemon_list["numel"] = {'name': 'numel', 'type': ['fire', 'ground'], 'moves': ["growl", "tackle", "ember", "earthquake"], 'stats': {'hp': 60, 'attack': 60, 'defense': 40, 's_attack': 65, 's_defense': 45,'speed': 35}, 'ability': ''}

        pokemon_list["trapinch"] = {'name': 'trapinch', 'type': ['ground'], 'moves': ["giga drain", "bite", "sandstorm", "earthquake"], 'stats': {'hp': 45, 'attack': 100, 'defense': 45, 's_attack': 45, 's_defense': 45, 'speed': 10}, 'ability': ''}
        pokemon_list["vibrava"] = {'name': 'vibrava', 'type': ['ground', 'dragon'], 'moves': ["giga drain", "bite", "sandstorm", "earthquake"], 'stats': {'hp': 50, 'attack': 70, 'defense': 50, 's_attack': 50, 's_defense': 50, 'speed': 70}, 'ability': ''}
        pokemon_list["swablu"] = {'name': 'swablu', 'type': ['normal', 'flying'], 'moves': ["growl", "peck", "cotton guard", "dragon rush"],'stats': {'hp': 45, 'attack': 40, 'defense': 60, 's_attack': 40, 's_defense': 75, 'speed': 50}, 'ability': ''}
        pokemon_list["spheal"] = {'name': 'spheal', 'type': ['ice', 'water'], 'moves': ["growl", "water gun", "hail", "ice beam"], 'stats': {'hp': 70, 'attack': 40, 'defense': 50, 's_attack': 55, 's_defense': 50, 'speed': 25}, 'ability': ''}
        pokemon_list["sealeo"] = {'name': 'sealeo', 'type': ['ice', 'water'], 'moves': ["growl", "water gun", "hail", "ice beam"], 'stats': {'hp': 90, 'attack': 60, 'defense': 70, 's_attack': 75, 's_defense': 70, 'speed': 45}, 'ability': ''}
        pokemon_list["bagon"] = {'name': 'bagon', 'type': ['dragon'], 'moves': ["ember", "bite", "dragon claw", "dragon dance"], 'stats': {'hp': 45, 'attack': 75, 'defense': 60, 's_attack': 40, 's_defense': 30, 'speed': 50}, 'ability': ''}
        pokemon_list["shelgon"] = {'name': 'shelgon', 'type': ['dragon'], 'moves': ["ember", "bite", "dragon claw", "dragon dance"], 'stats': {'hp': 65, 'attack': 95, 'defense': 100, 's_attack': 60, 's_defense': 50, 'speed': 50}, 'ability': ''}
        pokemon_list["beldum"] = {'name': 'beldum', 'type': ['steel', 'psychic'], 'moves': ["tackle", "iron defense", "metal claw", "psychic"], 'stats': {'hp': 40, 'attack': 55, 'defense': 80, 's_attack': 35, 's_defense': 60, 'speed': 30}, 'ability': ''}
        pokemon_list["metang"] = {'name': 'metang', 'type': ['steel', 'psychic'], 'moves': ["tackle", "iron defense", "metal claw", "psychic"], 'stats': {'hp': 60, 'attack': 75, 'defense': 100, 's_attack': 55, 's_defense': 80, 'speed': 50}, 'ability': ''}

        # gen 4
        pokemon_list["riolu"] = {'name': 'riolu', 'type': ['fighting'], 'moves': ["quick attack", "metal claw", "swords dance", "bite"], 'stats': {'hp': 40, 'attack': 70, 'defense': 40, 's_attack': 35, 's_defense': 40, 'speed': 60}, 'ability': ''}
        pokemon_list["croagunk"] = {'name': 'croagunk', 'type': ['poison', 'fighting'], 'moves': ["mud slap", "earthquake", "bulk up", "work up"], 'stats': {'hp': 48, 'attack': 61, 'defense': 40, 's_attack': 61, 's_defense': 40, 'speed': 50}, 'ability': ''}


        #megas
        mega_list = {}
        mega_list["mega venusaur"] = {"name": "mega venusaur", "type": ["grass", "poison"], "moves": [], "stats": {"hp": 80, "attack": 100, "defense": 123, "s_attack": 122, "s_defense": 120, "speed": 80}, "ability": "thick fat"}
        mega_list["mega charizard x"] = {"name": "mega charizard x", "type": ["fire", "dragon"], "moves": [], "stats": {"hp": 78, "attack": 130, "defense": 111, "s_attack": 130, "s_defense": 85, "speed": 100}, "ability": "tough claws"}
        mega_list["mega charizard y"] = {"name": "mega charizard y", "type": ["fire", "flying"], "moves": [], "stats": {"hp": 78, "attack": 104, "defense": 78, "s_attack": 159, "s_defense": 115, "speed": 100}, "ability": "drought"}
        mega_list["mega blastoise"] = {"name": "mega blastoise", "type": ["water"], "moves": [], "stats": {"hp": 79, "attack": 83, "defense": 100, "s_attack": 85, "s_defense": 105, "speed": 78}, "ability": "mega launcher"}
        mega_list["mega rayquaza"] = {"name": "mega rayquaza", "type": ["dragon", "flying"], "stats": {"hp": 105, "attack": 180, "defense": 100, "s_attack": 180, "s_defense": 100, "speed": 115}, "ability": "air lock"}
        mega_list["mega latias"] = {'name': 'mega latias', 'type': ['dragon', 'psychic'], 'stats': {'hp': 80, 'attack': 100, 'defense': 120, 's_attack': 140, 's_defense': 150, 'speed': 110}, "ability": "levitate"}
        mega_list["mega latios"] = {'name': 'mega latios', 'type': ['dragon', 'psychic'], 'stats': {'hp': 80, 'attack': 130, 'defense': 100, 's_attack': 160, 's_defense': 120, 'speed': 110}, "ability": "levitate"}
        mega_list["mega metagross"] = {'name': 'mega metagross', 'type': ['steel', 'psychic'], 'stats': {'hp': 80, 'attack': 145, 'defense': 150, 's_attack': 105, 's_defense': 110, 'speed': 110}, "ability": "tough claws"}
        mega_list["mega salamence"] = {'name': 'mega salamence', 'type': ['dragon', 'flying'], 'stats': {'hp': 95, 'attack': 145, 'defense': 130, 's_attack': 120, 's_defense': 90, 'speed': 120}, "ability": "aerilate"}
        mega_list["mega manectric"] = {'name': 'mega manectric', 'type': ['electric'], 'stats': {'hp': 70, 'attack': 75, 'defense': 80, 's_attack': 135, 's_defense': 80, 'speed': 135}, "ability": "intimidate"}
        mega_list["mega aggron"] = {'name': 'mega aggron', 'type': ['steel'], 'stats': {'hp': 70, 'attack': 140, 'defense': 230, 's_attack': 60, 's_defense': 80, 'speed': 50}, "ability": "filter"}
        mega_list["mega gardevoir"] = {'name': 'mega gardevoir', 'type': ['psychic', 'fairy'], 'stats': {'hp': 68, 'attack': 85, 'defense': 65, 's_attack': 165, 's_defense': 135, 'speed': 100}, "ability": "pixelate"}
        mega_list["mega blaziken"] = {'name': 'mega blaziken', 'type': ['fire', 'fighting'], 'stats': {'hp': 80, 'attack': 160, 'defense': 80, 's_attack': 130, 's_defense': 80, 'speed': 100}, "ability": "speed boost"}
        mega_list["mega sceptile"] = {'name': 'mega sceptile', 'type': ['grass', 'dragon'], 'stats': {'hp': 70, 'attack': 110, 'defense': 75, 's_attack': 145, 's_defense': 85, 'speed': 145}, "ability": "lightning rod"}
        mega_list["mega swampert"] = {'name': 'mega swampert', 'type': ['water', 'ground'], 'stats': {'hp': 100, 'attack': 150, 'defense': 110, 's_attack': 95, 's_defense': 110, 'speed': 70}, "ability": "sift swim"}
        mega_list["mega tyranitar"] = {'name': 'mega tyranitar', 'type': ['rock', 'dark'], 'stats': {'hp': 100, 'attack': 164, 'defense': 150, 's_attack': 95, 's_defense': 120, 'speed': 71}, "ability": "sand stream"}
        mega_list["mega ampharos"] = {'name': 'mega ampharos', 'type': ['electric', 'dragon'], 'stats': {'hp': 90, 'attack': 95, 'defense': 105, 's_attack': 165, 's_defense': 110, 'speed': 45}, "ability": "mold breaker"}
        mega_list["mega mewtwo x"] = {'name': 'mega mewtwo x', 'type': ['psychic', 'fighting'], 'stats': {'hp': 106, 'attack': 190, 'defense': 100, 's_attack': 154, 's_defense': 100, 'speed': 130}, "ability": "steadfast"}
        mega_list["mega mewtwo y"] = {'name': 'mega mewtwo y', 'type': ['psychic'], 'stats': {'hp': 106, 'attack': 150, 'defense': 70, 's_attack': 194, 's_defense': 120, 'speed': 140}, "ability": "insomnia"}
        mega_list["mega beedrill"] = {'name': 'mega beedrill', 'type': ['bug', 'poison'], 'stats': {'hp': 65, 'attack': 150, 'defense': 40, 's_attack': 15, 's_defense': 80, 'speed': 145}, "ability": "swarm"}
        mega_list["mega alakazam"] = {'name': 'mega alakazam', 'type': ['psychic'], 'stats': {'hp': 55, 'attack': 50, 'defense': 65, 's_attack': 175, 's_defense': 105, 'speed': 150}, "ability": "trace"}
        mega_list["mega gengar"] = {'name': 'mega gengar', 'type': ['ghost', 'poison'], 'stats': {'hp': 60, 'attack': 65, 'defense': 80, 's_attack': 170, 's_defense': 95, 'speed': 130}, "ability": "shadow tag"}


    unevolved_list = ['pikachu', 'magneton', 'chansey', 'piloswine', 'bulbasaur', 'ivysaur', 'charmander', 'charmeleon', 'squirtle', 'wartortle', 'weedle', 'kakuna', 'pidgey', 'pidgeotto', 'zubat', 'golbat', 'meowth', 'poliwag', 'poliwhirl', 'abra', 'kadabra', 'machop', 'machoke', 'bellsprout', 'weepinbell', 'geodude', 'graveler', 'magnemite', 'ghastly', 'haunter', 'onix', 'exeggcute', 'horsea', 'seadra', 'scyther', 'magikarp', 'eevee', 'dratini', 'dragonair', 'chikorita', 'bayleef', 'cyndaquil', 'quilava', 'totodile', 'croconaw', 'togepi', 'togetic', 'mareep', 'flaaffy', 'larvitar', 'pupitar', 'swinub', 'sneasel', 'treecko', 'grovyle', 'torchic', 'combusken', 'mudkip', 'marshtomp', 'poochyena', 'lotad', 'lombre', 'seedot', 'nuzleaf', 'ralts', 'kirlia', 'aron', 'lairon', 'electrike', 'carvanha', 'numel', 'trapinch', 'vibrava', 'swablu', 'spheal', 'sealeo', 'bagon', 'shelgon', 'beldum', 'metang', 'riolu', 'croagunk']

    #mega stuff
    mega_stones = {"aggronite": "mega aggron", "ampharosite": "mega ampharos", "blastoisinite": "mega blastoise", "blazikenite": "mega blaziken", "charizardite x": "mega charizard x", "charizardite y": "mega charizard y",
                   "metagrossite": "mega metagross", "salamencite": "mega salamence", "latiasite": "mega latias", "latiosite": "mega latios", "manectite": "mega manectric", "gardevoirite": "mega gardevoir",
                   "sceptilite": "mega sceptile", "swampertite": "mega swampert", "tyranitarite": "mega tyranitar", "venusaurite": "mega venusaur", "mewtwonite x": "mega mewtwo x", "mewtwonite y": "mega mewtwo y",
                   "beedrillite": "mega beedrill", "alakazite": "mega alakazam", "gengarite": "mega gengar"}

    def mega_evolve(pokemon):
        if pokemon["held item"] not in mega_stones.keys():
            slow_print("This pokemon doesn't have a mega stone! ")
            return pokemon
        elif pokemon["name"][0:4] == "mega":
            slow_print("Already mega evolved!")
            return pokemon
        if mega_stones[pokemon["held item"]][4:] != pokemon["name"]:
            slow_print("This pokemon doesn't have the correct mega stone! ")
        slow_print("<><> " + pokemon["name"].title() + "'s " + pokemon["held item"] + " activated! <><>")
        slow_print(pokemon["name"].title() + " mega evolved!")
        mega_pokemon = mega_stones[pokemon["held item"]]
        hp_loss = pokemon["stats"]["hp"] - pokemon["current hp"]
        pokemon["stats"] = all_stats_calc(mega_list[mega_pokemon]["stats"], pokemon["level"], pokemon["EVs"])
        pokemon["name"] = mega_list[mega_pokemon]["name"]
        pokemon["ability"] = mega_list[mega_pokemon]["ability"]
        pokemon["type"] = mega_list[mega_pokemon]["type"]
        pokemon["current hp"] = mega_list[mega_pokemon]["stats"]["hp"] - hp_loss
        return pokemon

    def de_mega_evolve(pokemon):
        pokemon["name"] = pokemon["name"][4:]
        pokemon["stats"] = all_stats_calc(pokemon_list[pokemon["name"]]["stats"], pokemon["level"], pokemon["EVs"])
        pokemon["type"] = pokemon_list[pokemon["name"]]["type"]
        return pokemon


    #move_list[""] = {"name": , "power": , "c_type": "", "type": "", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
    move_list = {}

    if True:
        #normal type moves
        move_list["protect"] = {"name": "protect", "power": 0, "c_type": "status", "type": "normal", "accuracy": 100, "stat change": {}, "priority": 4, "heal": 0}
        move_list["tackle"] = {"name": "tackle", "power": 40, "c_type": "physical", "type": "normal", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["pound"] = {"name": "pound", "power": 40, "c_type": "physical", "type": "normal", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["scratch"] = {"name": "scratch", "power": 40, "c_type": "physical", "type": "normal", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["quick attack"] = {"name": "quick attack", "power": 40, "c_type": "physical", "type": "normal", "accuracy": 100, "stat change": {}, "priority": 1, "heal": 0}
        move_list["extreme speed"] = {"name": "extreme speed", "power": 80, "c_type": "physical", "type": "normal", "accuracy": 100, "stat change": {}, "priority": 2, "heal": 0}
        move_list["swords dance"] = {"name": "swords dance", "power": 0, "c_type": "status", "type": "normal", "accuracy": 100, "stat change": {"attack": 2}, "priority": 0, "heal": 0}
        move_list["growl"] = {"name": "growl", "power": 0, "c_type": "status", "type": "normal", "accuracy": 100, "stat change": {"Oattack": -1}, "priority": 0, "heal": 0}
        move_list["work up"] = {"name": "work up", "power": 0, "c_type": "status", "type": "normal", "accuracy": 100, "stat change": {"attack": 1, "s_attack": 1}, "priority": 0, "heal": 0}
        move_list["double team"] = {"name": "double team", "power": 0, "c_type": "status", "type": "normal", "accuracy": 100, "stat change": {"evasion": 1}, "priority": 0, "heal": 0}
        move_list["belly drum"] = {"name": "belly drum", "power": 0, "c_type": "status", "type": "normal", "accuracy": 100, "stat change": {"attack": 6}, "priority": 0, "heal": -45}
        move_list["explosion"] = {"name": "explosion", "power": 250, "c_type": "physical", "type": "normal", "accuracy": 100, "stat change": {}, "priority": 0, "heal": -1000}
        move_list["confide"] = {"name": "confide", "power": 0, "c_type": "status", "type": "normal", "accuracy": 100, "stat change": {"Os_attack": -1}, "priority": 0, "heal": 0}
        move_list["recover"] = {"name": "recover", "power": 0, "c_type": "status", "type": "normal", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 60}
        move_list["baton pass"] = {"name": "baton pass", "power": 0, "c_type": "status", "type": "normal", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        #grass type moves
        move_list["vine whip"] = {"name": "vine whip", "power": 45, "c_type": "physical", "type": "grass", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["frenzy plant"] = {"name": "frenzy plant", "power": 150, "c_type": "special", "type": "grass", "accuracy": 90, "stat change": {}, "priority": 0, "heal": 0}
        move_list["energy ball"] = {"name": "energy ball", "power": 90, "c_type": "special", "type": "grass", "accuracy": 100, "stat change": {"O_s_defense": -0.1}, "priority": 0, "heal": 0}
        move_list["leaf storm"] = {"name": "leaf storm", "power": 130, "c_type": "special", "type": "grass", "accuracy": 90, "stat change": {"s_attack": -2}, "priority": 0, "heal": 0}
        move_list["giga drain"] = {"name": "giga drain", "power": 75, "c_type": "special", "type": "grass", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 30}
        move_list["grassy terrain"] = {"name": "grassy terrain", "power": 0, "c_type": "status", "type": "electric", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["cotton guard"] = {"name": "cotton guard", "power": 0, "c_type": "status", "type": "grass", "accuracy": 100, "stat change": {"defense": 3}, "priority": 0, "heal": 0}
        #fire type moves
        move_list["ember"] = {"name": "ember", "power": 40, "c_type": "special", "type": "fire", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0, "status condition": {"burn": 0.1}}
        move_list["fire punch"] = {"name": "fire punch", "power": 75, "c_type": "physical", "type": "fire", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0, "status condition": {"burn": 0.1}}
        move_list["blast burn"] = {"name": "blast burn", "power": 150, "c_type": "special", "type": "fire", "accuracy": 90, "stat change": {}, "priority": 0, "heal": 0}
        move_list["overheat"] = {"name": "overheat", "power": 130, "c_type": "special", "type": "fire", "accuracy": 90, "stat change": {"s_attack": -2}, "priority": 0, "heal": 0}
        move_list["heat wave"] = {"name": "heat wave", "power": 95, "c_type": "special", "type": "fire", "accuracy": 90, "stat change": {}, "priority": 0, "heal": 0, "status condition": {"burn": 0.1}}
        move_list["fire fang"] = {"name": "fire fang", "power": 65, "c_type": "physical", "type": "fire", "accuracy": 95, "stat change": {}, "priority": 0, "heal": 0, "status condition": {"burn": 0.1}}
        move_list["flame charge"] = {"name": "flame charge", "power": 50, "c_type": "physical", "type": "fire", "accuracy": 100, "stat change": {"speed": 1}, "priority": 0, "heal": 0}
        move_list["blaze kick"] = {"name": "blaze kick", "power": 85, "c_type": "physical", "type": "fire", "accuracy": 90, "stat change": {}, "priority": 0, "heal": 0, "status condition": {"burn": 0.1}}
        move_list["sunny day"] = {"name": "sunny day", "power": 0, "c_type": "status", "type": "fire", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["flare blitz"] = {"name": "flare blitz", "power": 120, "c_type": "physical", "type": "fire", "accuracy": 100, "stat change": {}, "priority": 0, "heal": -40}
        move_list["v create"] = {"name": "v create", "power": 180, "c_type": "physical", "type": "fire", "accuracy": 95, "stat change": {"defense": -1, "s_defense": -1, "speed": -1}, "priority": 0, "heal": 0}
        #water type moves
        move_list["water gun"] = {"name": "water gun", "power": 40, "c_type": "special", "type": "water", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["hydro cannon"] = {"name": "hydro cannon", "power": 150, "c_type": "special", "type": "water", "accuracy": 90, "stat change": {}, "priority": 0, "heal": 0}
        move_list["surf"] = {"name": "surf", "power": 90, "c_type": "special", "type": "water", "accuracy": 90, "stat change": {}, "priority": 0, "heal": 0}
        move_list["hydro pump"] = {"name": "hydro pump", "power": 110, "c_type": "special", "type": "water", "accuracy": 80, "stat change": {}, "priority": 0, "heal": 0}
        move_list["origin pulse"] = {"name": "origin pulse", "power": 110, "c_type": "special", "type": "water", "accuracy": 85, "stat change": {}, "priority": 0, "heal": 0}
        move_list["rain dance"] = {"name": "rain dance", "power": 0, "c_type": "status", "type": "water", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        #electric type moves
        move_list["thunder"] = {"name": "thunder", "power": 110, "c_type": "special", "type": "electric", "accuracy": 70, "stat change": {}, "priority": 0, "heal": 0, "status condition": {"paralyze": 0.3}}
        move_list["thunder punch"] = {"name": "thunder punch", "power": 75, "c_type": "physical", "type": "electric", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0, "status condition": {"paralyze": 0.1}}
        move_list["thunder fang"] = {"name": "thunder fang", "power": 65, "c_type": "physical", "type": "electric", "accuracy": 95, "stat change": {}, "priority": 0, "heal": 0, "status condition": {"paralyze": 0.1}}
        move_list["charge beam"] = {"name": "charge beam", "power": 50, "c_type": "special", "type": "electric", "accuracy": 90, "stat change": {"s_attack": 0.7}, "priority": 0, "heal": 0}
        move_list["thunder wave"] = {"name": "thunder wave", "power": 0, "c_type": "status", "type": "electric", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0, "status condition": {"paralyze": 1}}
        move_list["electroweb"] = {"name": "electroweb", "power": 55, "c_type": "special", "type": "electric", "accuracy": 95, "stat change": {"Ospeed": -1}, "priority": 0, "heal": 0}
        move_list["thunderbolt"] = {"name": "thunderbolt", "power": 90, "c_type": "special", "type": "electric", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0, "status condition": {"paralyze": 0.1}}
        move_list["eerie impulse"] = {"name": "eerie impulse", "power": 0, "c_type": "status", "type": "electric", "accuracy": 100, "stat change": {"Os_attack": -2}, "priority": 0, "heal": 0}
        move_list["electric terrain"] = {"name": "electric terrain", "power": 0, "c_type": "status", "type": "electric", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        #flying type moves
        move_list["hurricane"] = {"name": "hurricane", "power": 110, "c_type": "special", "type": "flying", "accuracy": 70, "stat change": {}, "priority": 0, "heal": 0}
        move_list["air slash"] = {"name": "air slash", "power": 75, "c_type": "special", "type": "flying", "accuracy": 95, "stat change": {}, "priority": 0, "heal": 0}
        move_list["peck"] = {"name": "peck", "power": 35, "c_type": "physical", "type": "flying", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["dragon ascent"] = {"name": "dragon ascent", "power": 120, "c_type": "physical", "type": "flying", "accuracy": 100, "stat change": {"defense": -1, "s_defense": -1}, "priority": 0, "heal": 0}
        move_list["feather dance"] = {"name": "feather dance", "power": 0, "c_type": "status", "type": "flying", "accuracy": 100, "stat change": {"Oattack": -2}, "priority": 0, "heal": 0}
        move_list["air cutter"] = {"name": "air cutter", "power": 60, "c_type": "physical", "type": "flying", "accuracy": 95, "stat change": {}, "priority": 0, "heal": 0}
        move_list["brave bird"] = {"name": "brave bird", "power": 120, "c_type": "physical", "type": "flying", "accuracy": 100, "stat change": {}, "priority": 0, "heal": -40}
        #ground type moves
        move_list["earthquake"] = {"name": "earthquake", "power": 100, "c_type": "physical", "type": "ground", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["mud slap"] = {"name": "mud slap", "power": 20, "c_type": "special", "type": "ground", "accuracy": 100, "stat change": {"Oaccuracy": -1}, "priority": 0, "heal": 0}
        move_list["precipice blades"] = {"name": "brecipice blades", "power": 120, "c_type": "physical", "type": "ground", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        #rock type moves
        move_list["rock slide"] = {"name": "rock slide", "power": 75, "c_type": "physical", "type": "rock", "accuracy": 90, "stat change": {}, "priority": 0, "heal": 0}
        move_list["ancient power"] = {"name": "ancient power", "power": 60, "c_type": "special", "type": "rock", "accuracy": 100, "stat change": {"attack": 0.1, "defense": 0.1, "s_attack": 1, "s_defense": 0.1, "speed": 0.1}, "priority": 0, "heal": 0}
        move_list["rock tomb"] = {"name": "rock tomb", "power": 60, "c_type": "physical", "type": "rock", "accuracy": 95, "stat change": {"Ospeed": -1}, "priority": 0, "heal": 0}
        move_list["rock polish"] = {"name": "rock polish", "power": 0, "c_type": "status", "type": "rock", "accuracy": 100, "stat change": {"speed": 2}, "priority": 0, "heal": 0}
        move_list["accelerock"] = {"name": "accelerock", "power": 40, "c_type": "physical", "type": "rock", "accuracy": 100, "stat change": {}, "priority": 1, "heal": 0}
        move_list["sandstorm"] = {"name": "sandstorm", "power": 40, "c_type": "status", "type": "rock", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["stone edge"] = {"name": "stone edge", "power": 100, "c_type": "physical", "type": "rock", "accuracy": 80, "stat change": {}, "priority": 0, "heal": 0}
        #ice type moves
        move_list["ice punch"] = {"name": "ice punch", "power": 75, "c_type": "physical", "type": "ice", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["blizzard"] = {"name": "blizzard", "power": 110, "c_type": "special", "type": "ice", "accuracy": 70, "stat change": {}, "priority": 0, "heal": 0}
        move_list["hail"] = {"name": "hail", "power": 0, "c_type": "status", "type": "ice", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["ice beam"] = {"name": "ice beam", "power": 90, "c_type": "special", "type": "ice", "accuracy": 100, "stat change": {"freeze": 0.1}, "priority": 0, "heal": 0}
        move_list["ice fang"] = {"name": "ice fang", "power": 65, "c_type": "physical", "type": "ice", "accuracy": 95, "stat change": {}, "priority": 0, "heal": 0}
        move_list["glacial lance"] = {"name": "glacial lance", "power": 130, "c_type": "physical", "type": "ice", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        #bug type moves
        move_list["x scissor"] = {"name": "x scissor", "power": 80, "c_type": "physical", "type": "bug", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["megahorn"] = {"name": "megahorn", "power": 120, "c_type": "physical", "type": "bug", "accuracy": 85, "stat change": {}, "priority": 0, "heal": 0}
        #poison type moves
        move_list["venoshock"] = {"name": "venoshock", "power": 65, "c_type": "special", "type": "poison", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["sludge"] = {"name": "sludge", "power": 65, "c_type": "special", "type": "poison", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0, "status condition": {"poison": 0.3}}
        #steel type moves
        move_list["steel wing"] = {"name": "steel wing", "power": 70, "c_type": "physical", "type": "steel", "accuracy": 90, "stat change": {}, "priority": 0, "heal": 0}
        move_list["iron tail"] = {"name": "iron tail", "power": 100, "c_type": "physical", "type": "steel", "accuracy": 75, "stat change": {}, "priority": 0, "heal": 0}
        move_list["meteor mash"] = {"name": "meteor mash", "power": 90, "c_type": "physical", "type": "steel", "accuracy": 90, "stat change": {"attack": 0.2}, "priority": 0, "heal": 0}
        move_list["iron defense"] = {"name": "iron defense", "power": 0, "c_type": "status", "type": "steel", "accuracy": 100, "stat change": {"defense": 2}, "priority": 0, "heal": 0}
        move_list["metal sound"] = {"name": "metal sound", "power": 0, "c_type": "status", "type": "steel", "accuracy": 100, "stat change": {"Os_defense": -2}, "priority": 0, "heal": 0}
        move_list["bullet punch"] = {"name": "bullet punch", "power": 40, "c_type": "physical", "type": "steel", "accuracy": 90, "stat change": {}, "priority": 1, "heal": 0}
        #dragon type moves
        move_list["dragon rush"] = {"name": "dragon rush", "power": 100, "c_type": "physical", "type": "dragon", "accuracy": 75, "stat change": {}, "priority": 0, "heal": 0}
        move_list["dragon pulse"] = {"name": "dragon pulse", "power": 80, "c_type": "physical", "type": "dragon", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["dragon pulse"] = {"name": "dragon pulse", "power": 85, "c_type": "special", "type": "dragon", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["draco meteor"] = {"name": "draco meteor", "power": 130, "c_type": "special", "type": "dragon", "accuracy": 90, "stat change": {"s_attack": -2}, "priority": 0, "heal": 0}
        move_list["dragon dance"] = {"name": "dragon dance", "power": 0, "c_type": "special", "type": "dragon", "accuracy": 100, "stat change": {"attack": 1, "speed": 1}, "priority": 0, "heal": 0}
        move_list["breaking swipe"] = {"name": "breaking swipe", "power": 60, "c_type": "physical", "type": "dragon", "accuracy": 100, "stat change": {"Oattack": -1}, "priority": 0, "heal": 0}
        #fairy type moves
        move_list["charm"] = {"name": "charm", "power": 0, "c_type": "status", "type": "fairy", "accuracy": 100, "stat change": {"Oattack": -2}, "priority": 0, "heal": 0}
        move_list["dazzling gleam"] = {"name": "dazzling gleam", "power": 80, "c_type": "special", "type": "fairy", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["moonblast"] = {"name": "moonblast", "power": 95, "c_type": "special", "type": "fairy", "accuracy": 100, "stat change": {"Os_attack": -0.3}, "priority": 0, "heal": 0}
        move_list["play rough"] = {"name": "play rough", "power": 90, "c_type": "physical", "type": "fairy", "accuracy": 90, "stat change": {"O_attack": -0.1}, "priority": 0, "heal": 0}
        move_list["misty terrain"] = {"name": "misty terrain", "power": 0, "c_type": "status", "type": "electric", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        #dark type moves
        move_list["bite"] = {"name": "bite", "power": 60, "c_type": "physical", "type": "dark", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["nasty plot"] = {"name": "nasty plot", "power": 0, "c_type": "status", "type": "dark", "accuracy": 100, "stat change": {"s_sttack": 2}, "priority": 0, "heal": 0}
        move_list["fake tears"] = {"name": "fake tears", "power": 0, "c_type": "status", "type": "dark", "accuracy": 100, "stat change": {"Os_sttack": -2}, "priority": 0, "heal": 0}
        move_list["hone claws"] = {"name": "hone claws", "power": 0, "c_type": "status", "type": "dark", "accuracy": 100, "stat change": {"attack": 1, "accuracy": 1}, "priority": 0, "heal": 0}
        #ghost type moves
        move_list["shadow ball"] = {"name": "shadow ball", "power": 80, "c_type": "special", "type": "ghost", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["shadow claw"] = {"name": "shadow claw", "power": 70, "c_type": "physical", "type": "ghost", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["astral barrage"] = {"name": "astral barrage", "power": 120, "c_type": "special", "type": "ghost", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        #psychic type moves
        move_list["psychic"] = {"name": "psychic", "power": 90, "c_type": "special", "type": "psychic", "accuracy": 100, "stat change": {"Os_defense": -0.1}, "priority": 0, "heal": 0}
        move_list["psycho boost"] = {"name": "psycho boost", "power": 140, "c_type": "special", "type": "psychic", "accuracy": 90, "stat change": {"s_attack": -2}, "priority": 0, "heal": 0}
        move_list["calm mind"] = {"name": "calm mind", "power": 0, "c_type": "status", "type": "psychic", "accuracy": 100, "stat change": {"s_attack": 1, "s_defense": 1}, "priority": 0, "heal": 0}
        move_list["amnesia"] = {"name": "amnesia", "power": 0, "c_type": "status", "type": "psychic", "accuracy": 100, "stat change": {"s_defense": 2}, "priority": 0, "heal": 0}
        move_list["cosmic power"] = {"name": "cosmic power", "power": 0, "c_type": "status", "type": "psychic", "accuracy": 100, "stat change": {"defense": 1, "s_defense": 1}, "priority": 0, "heal": 0}
        move_list["barrier"] = {"name": "barrier", "power": 0, "c_type": "status", "type": "psychic", "accuracy": 100, "stat change": {"defense": 2}, "priority": 0, "heal": 0}
        move_list["reflect"] = {"name": "reflect", "power": 0, "c_type": "status", "type": "psychic", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["light screen"] = {"name": "light screen", "power": 0, "c_type": "status", "type": "psychic", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["trick room"] = {"name": "trick room", "power": 0, "c_type": "status", "type": "psychic", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["psychic terrain"] = {"name": "psychic terrain", "power": 0, "c_type": "status", "type": "electric", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        #fighting type moves
        move_list["double kick"] = {"name": "double kick", "power": 60, "c_type": "physical", "type": "fighting", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["hammer arm"] = {"name": "hammer arm", "power": 100, "c_type": "physical", "type": "fighting", "accuracy": 90, "stat change": {"speed": -1}, "priority": 0, "heal": 0}
        move_list["power up punch"] = {"name": "power up punch", "power": 40, "c_type": "physical", "type": "fighting", "accuracy": 100, "stat change": {"attack": 1}, "priority": 0, "heal": 0}
        move_list["bulk up"] = {"name": "bulk up", "power": 0, "c_type": "status", "type": "fighting", "accuracy": 100, "stat change": {"attack": 1, "defense": 1}, "priority": 0, "heal": 0}
        move_list["close combat"] = {"name": "close combat", "power": 100, "c_type": "physical", "type": "fighting", "accuracy": 100, "stat change": {"defense": -1, "s_defense": -1}, "priority": 0, "heal": 0}
        #entry hazard moves
        move_list["spikes"] = {"name": "spikes", "power": 0, "c_type": "status", "type": "ground", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["toxic spikes"] = {"name": "toxic spikes", "power": 0, "c_type": "status", "type": "poison", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        move_list["stealth rock"] = {"name": "stealth rock", "power": 0, "c_type": "status", "type": "rock", "accuracy": 100, "stat change": {}, "priority": 0, "heal": 0}
        #items
        move_list["potion"] = {"name": "potion", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {}, "priority": 6, "heal": 0}
        move_list["super potion"] = {"name": "super potion", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {}, "priority": 6, "heal": 0}
        move_list["hyper potion"] = {"name": "hyper potion", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {}, "priority": 6, "heal": 0}
        move_list["max potion"] = {"name": "max potion", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {}, "priority": 6, "heal": 0}
        move_list["full restore"] = {"name": "full restore", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {}, "priority": 6, "heal": 0}
        move_list["revive"] = {"name": "revive", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {}, "priority": 6, "heal": 0}
        move_list["max revive"] = {"name": "max revive", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {}, "priority": 6, "heal": 0}
        move_list["full heal"] = {"name": "full heal", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {}, "priority": 6, "heal": 0}
        move_list["x attack"] = {"name": "x attack", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {"attack": 1}, "priority": 6, "heal": 0}
        move_list["x s_attack"] = {"name": "x s_attack", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {"s_attack": 1}, "priority": 6, "heal": 0}
        move_list["x defense"] = {"name": "x defense", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {"defense": 1}, "priority": 6, "heal": 0}
        move_list["x s_defense"] = {"name": "x s_defense", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {"s_defense": 1}, "priority": 6, "heal": 0}
        move_list["x speed"] = {"name": "x speed", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {"speed": 1}, "priority": 6, "heal": 0}
        #switch
        move_list["switch"] = {"name": "switch", "power": 0, "c_type": "status", "type": "normal", "accuracy": 10000, "stat change": {}, "priority": 100, "heal": 0}

    if True:
        tm = {}
        # tm[""] = {"name": "", "learnable": [""]}
        # status moves
        tm["protect"] = {"name": "protect", "learnable": ['venusaur', 'charizard', 'blastoise', 'pikachu', "pidgeot", 'raichu', 'crobat', 'persian', 'poliwrath', 'alakazam', 'machamp', 'magneton', 'gengar', 'chansey', 'kingdra', 'blissey', 'scizor', 'vaporeon', 'jolteon', 'flareon', 'gyarados', 'lapras', 'snorlax', 'aerodactyl', 'zapdos', 'moltres', 'articuno', 'dragonite', 'mewtwo', 'mew', 'togekiss', 'espeon', 'umbreon', 'heracross', 'steelix', 'piloswine', 'skarmory', 'tyranitar', 'celebi', 'sceptile', 'blaziken', 'swampert', 'ludicolo', 'shiftry', 'gardevoir', 'aggron', 'manectric', 'sharedo', 'flygon', 'altaria', 'walrein', 'salamence', 'metagross', 'latios', 'latias', 'rayquaza', 'kyogre', 'groudon', "deoxys", "deoxys attack", "deoxys defense", "deoxys speed"]}
        tm["swords dance"] = {"name": "swords dance", "learnable": ["venusaur", "blastoise", "charizard", "victreebel", "exeggutor", "pinsir", "mew", "scizor", "heracross", "skarmory", "celebi", "sceptile", "blaziken", "ludicolo", "shiftry", "walrein", "groudon", "rayquaza", "lucario", "toxicroak", "weavile"]}
        tm["nasty plot"] = {"name": "nasty plot", "learnable": ["pikachu", "raichu", "crobat", "persian", "gengar", "alakazam", "mightyena", "mewtwo", "mew", "togekiss", "shiftry", "togekiss", "lucario", "weavile"]}
        tm["bulk up"] = {"name": "bulk up", "learnable": ["poliwrath", "machamp", "pinsir", "mewtwo", "mew", "heracross", "blaziken", "swampert", "groudon", "rayquaza"]}
        tm["calm mind"] = {"name": "calm mind", "learnable": ["alakazam", "exeggutor", "mewtwo", "mew", "espeon", "gardevoir", "latias", "latios", "kyogre"]}
        tm["amnesia"] = {"name": "amnesia", "learnable": ["venusaur", "persian", "snorlax", "mewtwo", "mew", "piloswine", "swampert", "shiftry", "togekiss"]}
        tm["double team"] = {"name": "double team", "learnable": ["pikachu", "raichu", "beedrill", "gyarados", "pidgeot", "scizor", "sceptile", "gardevoir", "metagross"]}
        tm["charm"] = {"name": "charm", "learnable": ["venusaur", "persian", "pikachu", "raichu", "eevee", 'vaporeon', 'jolteon', 'flareon', "snorlax", "mew", "umbreon", "espeon", "blissey", "gardevoir", "latias", "togekiss"]}

        tm["blast burn"] = {"name": "blast burn", "learnable": ["charizard", "typhlosion", "blaziken"]}
        tm["frenzy plant"] = {"name": "frenzy plant", "learnable": ["venusaur", "meganium", "sceptile"]}
        tm["hydro cannon"] = {"name": "hydro cannon", "learnable": ["blastoise", "feraligatr", "swampert"]}

        tm["draco meteor"] = {"name": "draco meteor", "learnable": ["dragonite", "kingdra", "flygon", "altaria", "salamence", "latias", "latios", "rayquaza"]}
        tm["dragon pulse"] = {"name": "dragon pulse", "learnable": ["charizard", "blastoise", "gyarados", "lapras", "aerodactyl", "dragonite", "mew", "steelix", "kingdra", "tyranitar", "sceptile", "aggron", "flygon", "altaria", "salamence", "latias", "latios", "groudon", "rayquaza"]}
        tm["dragon dance"] = {"name": "dragon dance", "learnable": ["charizard", "kingdra", "gyarados", "lapras", "aerodactyl", "dragonite", "mew", "steelix", "kingdra", "tyranitar", "sceptile", "flygon", "altaria", "salamence", "latias", "latios", "rayquaza"]}

        tm["dragon ascent"] = {"name": "dragon ascent", "learnable": ["rayquaza"]}
        tm["origin pulse"] = {"name": "origin pulse", "learnable": ["kyogre"]}
        tm["precipice blades"] = {"name": "precipice blades", "learnable": ["groudon"]}

        tm["shadow ball"] = {"name": "shadow ball", "learnable": ["gengar", "crobat", "persian", "alakazam", "mewtwo", "mew", "vaporeon", "jolteon", "flareon", "snorlax", "espeon", "umbreon", "celebi", "gardevoir", "shiftry", "metagross", "latios", "latias", "deoxys", "deoxys attack", "deoxys defense", "deoxys speed"]}
        tm["ice beam"] = {"name": "ice beam", "learnable": ["blastoise", "articuno", "poliwrath", "kingdra", "gyarados", "lapras", "vaporeon", "snorlax", "dragonite", "mewtwo", "mew", "piloswine", "tyranitar", "swampert", "ludicolo", "sharpedo", "altaria", "walrein", "latios", "latias", "kyogre", "rayquaza"]}
        tm["psychic"] = {"name": "psychic", "learnable": ["poliwrath", "alakazam", "gengar", "exeggutor", "lapras", "snorlax", "mewtwo", "mew", "espeon", "umbreon", "celebi", "gardevoir", "metagross", "latios", "latias", "deoxys", "deoxys attack", "deoxys defense", "deoxys speed"]}
        tm["x scissor"] = {"name": "x scissor", "learnable": ["pinsir", "scizor", "mew", "crobat", "skarmory", "sceptile", "shiftry"]}
        tm["bite"] = {"name": "bite", "learnable": ["blastoise", "crobat", "persian", "gyarados", "vaporeon", "flareon", "jolteon", "aerodactyl", "snorlax", "espeon", "umbreon", "tyranitar", "manectric", "sharpedo", "flygon", "salamence"]}
        tm["ancient power"] = {"name": "ancient power", "learnable": ["aerodactyl", "articuno", "moltres", "zapdos", "mewtwo", "mew", "celebi", "piloswine", "kyogre", "groudon", "rayquaza", "togekiss"]}
        tm["earthquake"] = {"name": "earthquake", "learnable": ["venusaur", "charizard", "blastoise", "poliwrath", "machamp", "pinsir", "gyarados", "aerodactyl", "snorlax", "mew", "dragonite", "mewtwo", "heracross", "piloswine", "tyranitar", "sceptile", "blaziken", "swampert", "aggron", "sharpedo", "flygon", "altaria", "salamence", "metagross", "groudon", "latios", "latias", "kyogre", "rayquaza"]}
        tm["steel wing"] = {"name": "steel wing", "learnable": ["charizard", "pidgeot", "crobat", "skarmory", "articuno", "moltres", "zapdos", "dragonite", "mew", "scizor", "flygon", "altaria", "salamence", "latios", "latias", "togekiss"]}
        tm["stone edge"] = {"name": "stone edge", "learnable": ["machamp", "steelix", "gyarados", "aerodactyl", "dragonite", "tyranitar", "blaziken", "mew", "heracross", "piloswine", "aggron", "salamence", "groudon", "rayquaza"]}
        tm["flare blitz"] = {"name": "flare blitz", "learnable": ["charizard", "flareon", "moltres", "mew", "blaziken"]}
        tm["close combat"] = {"name": "close combat", "learnable": ["poliwrath", "machamp", "pinsir", "mew", "heracross", "blaziken", "sharpedo"]}
        tm["hydro pump"] = {"name": "close combat", "learnable": ["blastoise", "poliwrath", "kingdra", "gyarados", "lapras", "vaporeon", "snorlax", "dragonite", "mew", "tyranitar", "swampert", "ludicolo", "aggron", "sharpedo", "walrein", "salamence", "kyogre", "rayquaza"]}
        tm["breaking swipe"] = {"name": "breaking swipe", "learnable": ['charizard', 'dragonite', 'mew', 'steelix', 'kingdra', 'tyranitar', 'sceptile', 'flygon', 'altaria', 'salamence', 'latias', 'latios', 'rayquaza']}
        tm["extreme speed"] = {"name": "extreme speed", "learnable": ["dragonite", "rayquaza", "togekiss"]}
        tm["feather dance"] = {"name": "feather dance", "learnable": ["blaziken"]}
        tm["electroweb"] = {"name": "electroweb", "learnable": ["pikachu", "raichu", "magenton", "mew"]}
        tm["v create"] = {"name": "v create", "learnable": ["rayquaza"]}
        tm["shadow claw"] = {"name": "shadow claw", "learnable": ["charizard", "persian", "gengar", "mew", "heracross", "tyranitar", "blaziken", "aggron", "salamence", "latias", "latios", "groudon", "rayquaza"]}

        #weather, terrain, barrier setters, entry hazards
        tm["reflect"] = {"name": "reflect", "learnable": ["pikachu", "raichu", "alakazam", "exeggutor", "articuno", "magneton", "mewtwo", "mew", "espeon", "piloswine", "celebi", "gardevoir", "metagross", "latios", "latias", "togekiss"]}
        tm["light screen"] = {"name": "light screen", "learnable": ["pikachu", "raichu", "magneton", "chansey", "blissey", "zapdos", "venusaur", "alakazam", "machamp", "exeggutor", "jolteon", "zapdos", "dragonite", "mewtwo", "mew", "togekiss", "espeon", "scizor", "piloswine", "gardevoir", "manectric", "metagross", "latias", "latios"]}
        tm["trick room"] = {"name": "trick room", "learnable": ["alakazam", "gengar", "exeggutor", "mewtwo", "mew", "espeon", "celebi", "gardevoir", "deoxys", "deoxys speed", "deoxys attack", "deoxys defense"]}
        tm["sunny day"] = {"name": "sunny day", "learnable": ["venusaur", "charizard", "crobat", "persian", "alakazam", "machamp", "magneton", "gengar", "exeggutor", "chansey", "blissey", "scizor", "pinsir", "eevee", "vaporeon", "jolteon", "flareon", "espeon", "umbreon", "aerodactyl", "snorlax", "articuno", "moltres", "zapdos", "dragonite", "mewtwo", "mew", "togekiss", "steelix", "heracross", "skarmory", "tyranitar", "sceptile", "blaziken", "ludicolo", "shiftry", "gardevoir", "aggron", "flygon", "altaria", "salamence", "metagross", "latias", "latios", "groudon", "rayquaza"]}
        tm["rain dance"] = {"name": "rain dance", "learnable": ["blastoise", "pikachu", "raichu", "crobat", "persian", "poliwrath", "alakazam", "machamp", "magneton", "gengar", "chansey", "kingdra", "blissey", "scizor", "pinsir", "gyarados", "lapras", "aerodactyl", "snorlax", "articuno", "moltres", "zapdos", "dragonite", "mewtwo", "mew", "togekiss", "eevee", "vaporeon", "jolteon", "flareon", "espeon", "umbreon", "heracross", "piloswine", "tyranitar", "celebi", "swampert", "ludicolo", "gardevoir", "aggron", "manectric", "sharpedo", "altaria", "walrein", "salamence", "metagross", "latias", "latios", "kyogre", "rayquaza"]}
        tm["sandstorm"] = {"name": "sandstorm", "learnable": ["steelix", "gyarados", "aerodactyl", "snorlax", "dragonite", "articuno", "zapdos", "moltres", "mewtwo", "mew", "scizor", "skarmory", "blissey", "tyranitar", "celebi", "aggron", "flygon", "metagross", "latias", "latios", "groudon", "rayquaza"]}
        tm["hail"] = {"name": "hail", "learnable": ["blastoise", "poliwrath", "chansey", "blissey", "kingdra", "gyarados", "lapras", "vaporeon", "articuno", "zapdos", "dragonite", "mewtwo", "mew", "piloswine", "swampert", "ludicolo", "sharpedo", "walrein", "kyogre"]}
        tm["electric terrain"] = {"name": "electric terrain", "learnable": ["pikachu", "raichu", "magneton", "mew", "manectric"]}
        tm["misty terrain"] = {"name": "misty terrain", "learnable": ["mew", "gardevoir"]}
        tm["grassy terrain"] = {"name": "grassy terrain", "learnable": ["venusaur", "exeggutor", "mew", "celebi", "sceptile", "shiftry"]}
        tm["psychic terrain"] = {"name": "psychic terrain", "learnable": ["alakazam", "mewtwo", "mew", "celebi", "gardevoir"]}
        tm["spikes"] = {"name": "spikes", "learnable": ["skarmory", "mew", "heracross", "deoxys defense", "deoxys speed"]}
        tm["toxic spikes"] = {"name": "toxic spikes", "learnable": ["beedrill", "deoxys", "deoxys attack", "deoxys speed", "mew"]}
        tm["stealth rock"] = {"name": "stealth rock", "learnable": ["golem", "steelix", "chansey", "pinsir", "aerodactyl", "mew", "piloswine", "skarmory", "blissey", "tyranitar", "swampert", "aggron", "camerupt", "metagross", "groudon", "deoxys"]}


        def tm_assigner(pokemon, tm):
            if pokemon["name"] not in tm["learnable"]:
                print("This pokemon cannot learn this move! ")
                return pokemon
            print(printer_outer(printer_outer("Pokemon: " + pokemon["name"], "Type: " + ", ".join(pokemon["type"]), 25),
                                "Moves: " + ", ".join(pokemon["moves"]), 60))
            move_replace = input("Which move would you like to replace? (In numbers 1-4): ")
            try:
                pokemon["moves"][int(move_replace) - 1] = tm["name"]
            except:
                print("The tm did not work! Try putting in a number 1-4. ")
            return pokemon


        # print(tm_assigner({"name": "venusaur", "type": ["grass", "poison"], "moves": ["vine whip", "frenzy plant", "sludge", "earthquake"], "stats": {"hp": 80, "attack": 82, "defense": 83, "s_attack": 100, "s_defense": 100, "speed": 80}, "held item" : ""}, tm["leech seed"]))

        def tm_inputs(p_team):
            while True:
                print("\n")
                ans = (input("Would you like to use a tm?(Y/N) ")).lower()
                if ans.startswith("n"):
                    break
                else:
                    count_t = 1
                    for pokemon in p_team:
                        print(count_t, printer_outer(
                            printer_outer("Pokemon: " + pokemon["name"], "Type: " + ", ".join(pokemon["type"]), 25),
                            "Moves: " + ", ".join(pokemon["moves"]), 60))
                        count_t += 1
                    pokemon_ch = input("Which pokemon would you like to tm? (1-6): ")
                    try:
                        pokemon_ch = p_team[int(pokemon_ch) - 1]
                    except:
                        pokemon_ch = input("Which pokemon would you like to tm? (1-6) USE NUMBERS!: ")
                        pokemon_ch = p_team[int(pokemon_ch) - 1]
                    list_of_tm = list(tm.keys())
                    print("Compatible Tm's: ", end="")
                    for item in list_of_tm:
                        if pokemon_ch["name"] in tm[item]["learnable"]:
                            if tm[item]["name"] not in pokemon_ch["moves"]:
                                print(item.title(), end=", ")
                    print("\n")
                    tm_chos = (input("Which tm would you like to use? (input name): ")).lower()
                    try:
                        tm_assigner(pokemon_ch, tm[tm_chos])
                    except:
                        print("TM did not work!")
                    print("Pokemon summary: ", printer_outer(
                        printer_outer("Pokemon: " + pokemon_ch["name"], "Type: " + ", ".join(pokemon_ch["type"]), 25), "Moves: " + ", ".join(pokemon_ch["moves"]), 60))
            return p_team



    health_bar_num = 30
    default_val = {"hp": 100, "attack": 10, "defense": 10, "s_attack": 10, "s_defense": 10, "speed": 10}
    default_boosts = {"attack": 0, "defense": 0, "s_attack": 0, "s_defense": 0, "accuracy": 0, "evasion": 0, "speed": 0}
    the_move_info = {"power": 100, "c_type": "physical", "type": "normal", "accuracy": 100}
    weather_dict = {"rain": ["rain dance"], "sunny": ["sunny day"], "sandstorm": ["sandstorm"], "hail": ["hail"]}

    #items
    if True:
        #healing items
        items = {}
        items["potion"] = {"item": "potion", "price": 300, "description": "Restores 20 HP", "heal": 20, "stat boosts": {}}
        items["super potion"] = {"item": "super potion", "price": 700, "description": "Restores 60 HP", "heal": 60, "stat boosts": {}}
        items["hyper potion"] = {"item": "hyper potion", "price": 1200, "description": "Restores 120 HP", "heal": 120, "stat boosts": {}}
        items["max potion"] = {"item": "max potion", "price": 2500, "description": "Restores full HP", "heal": 1000, "stat boosts": {}}
        items["full heal"] = {"item": "full heal", "price": 500, "description": "Cures all status condition", "heal": 0, "stat boosts": {}}
        items["full restore"] = {"item": "full restore", "price": 3000, "description": "Restores full HP and cures all status condition", "heal": 1000, "stat boosts": {}}
        items["revive"] = {"item": "revive", "price": 1500, "description": "Restores full HP and cures all status condition", "heal": 0, "stat boosts": {}}
        items["max revive"] = {"item": "max revive", "price": 4500, "description": "Restores full HP and cures all status condition", "heal": 0, "stat boosts": {}}

        #battle items
        items["x accuracy"] = {"item": "x accuracy", "price": 1000, "description": "Raises a pokemon's accuracy by 1 stage", "heal": 0, "stat boosts": {"accuracy": 1}}
        items["x attack"] = {"item": "x attack", "price": 1000, "description": "Raises a pokemon's attack by 1 stage", "heal": 0, "stat boosts": {"attack": 1}}
        items["x defense"] = {"item": "x defense", "price": 1000, "description": "Raises a pokemon's defense by 1 stage", "heal": 0, "stat boosts": {"defense": 1}}
        items["x s_attack"] = {"item": "x s_attack", "price": 1000, "description": "Raises a pokemon's special attack by 1 stage", "heal": 0, "stat boosts": {"s_attack": 1}}
        items["x s_defense"] = {"item": "x s_defense", "price": 1000, "description": "Raises a pokemon's special defense by 1 stage", "heal": 0, "stat boosts": {"s_defense": 1}}
        items["x speed"] = {"item": "x speed", "price": 1000, "description": "Raises a pokemon's speed by 1 stage", "heal": 0, "stat boosts": {"speed": 1}}

        #held items
        items["leftovers"] = {"item": "leftovers", "price": 2000, "description": "Restores some hp on a pokemon each turn", "heal": 0, "stat boosts": {}}
        items["weakness policy"] = {"item": "weakness policy", "price": 1000, "description": "Increases attack and special attack when hit with a supereffective move", "heal": 0, "stat boosts": {}}
        items["muscle band"] = {"item": "muscle band", "price": 2000, "description": "Increases power of physical moves", "heal": 0, "stat boosts": {}}
        items["wise glasses"] = {"item": "wise glasses", "price": 2000, "description": "Increases power of special moves", "heal": 0, "stat boosts": {}}
        items["absorb bulb"] = {"item": "absorb bulb", "price": 500, "description": "Increases special attack if user is hit with a water type move", "heal": 0, "stat boosts": {}}
        items["cell battery"] = {"item": "cell battery", "price": 500, "description": "Increases special attack if user is hit with an electric type move", "heal": 0, "stat boosts": {}}
        items["snowball"] = {"item": "snowball", "price": 500, "description": "Increases attack if user is hit with an ice type move", "heal": 0, "stat boosts": {}}
        items["luminous moss"] = {"item": "luminous moss", "price": 500, "description": "Increases special defense if user is hit with a water type move", "heal": 0, "stat boosts": {}}
        items["soul dew"] = {"item": "soul dew", "price": 2000, "description": "Increases special attack and special defense of latios and latias", "heal": 0, "stat boosts": {}}
        items["life orb"] = {"item": "life orb", "price": 4000, "description": "Increases power of attacks, but makes user lose hp each turn", "heal": 0, "stat boosts": {}}
        items["expert belt"] = {"item": "expert belt", "price": 3000, "description": "Increases power of super effective attacks", "heal": 0, "stat boosts": {}}
        items["light clay"] = {"item": "light clay", "price": 1500, "description": "Increases duration of screens", "heal": 0, "stat boosts": {}}
        items["lucky egg"] = {"item": "light clay", "price": 5000, "description": "Increases exp gain by 50%", "heal": 0, "stat boosts": {}}
        #items["focus sash"] = {"item": "focus sash", "price": 5000, "description": "Allows your pokemon to survive an attack with 1 hp, breaks after used", "heal": 0, "stat boosts": {}}

        #type boosting items    by 20% for all
        items["charcoal"] = {"item": "charcoal", "price": 1000, "description": "Increases power of fire type moves", "heal": 0, "stat boosts": {}}
        items["mystic water"] = {"item": "mystic water", "price": 1000, "description": "Increases power of water type moves", "heal": 0, "stat boosts": {}}
        items["miracle seed"] = {"item": "miracle seed", "price": 1000, "description": "Increases power of grass type moves", "heal": 0, "stat boosts": {}}
        items["sharp beak"] = {"item": "sharp beak", "price": 1000, "description": "Increases power of flying type moves", "heal": 0, "stat boosts": {}}
        items["dragon fang"] = {"item": "dragon fang", "price": 1000, "description": "Increases power of dragon type moves", "heal": 0, "stat boosts": {}}
        items["never melt ice"] = {"item": "never melt ice", "price": 1000, "description": "Increases power of ice type moves", "heal": 0, "stat boosts": {}}
        items["black glasses"] = {"item": "black glasses", "price": 1000, "description": "Increases power of dark type moves", "heal": 0, "stat boosts": {}}
        items["magnet"] = {"item": "magnet", "price": 1000, "description": "Increases power of electric type moves", "heal": 0, "stat boosts": {}}
        items["hard stone"] = {"item": "hard stone", "price": 1000, "description": "Increases power of rock type moves", "heal": 0, "stat boosts": {}}
        items["soft sand"] = {"item": "soft sand", "price": 1000, "description": "Increases power of ground type moves", "heal": 0, "stat boosts": {}}
        items["metal coat"] = {"item": "metal coat", "price": 1000, "description": "Increases power of steel type moves", "heal": 0, "stat boosts": {}}
        items["twisted spoon"] = {"item": "twisted spoon", "price": 1000, "description": "Increases power of psychic type moves", "heal": 0, "stat boosts": {}}
        items["spell tag"] = {"item": "spell tag", "price": 1000, "description": "Increases power of ghost type moves", "heal": 0, "stat boosts": {}}
        items["poison barb"] = {"item": "poison barb", "price": 1000, "description": "Increases power of poison type moves", "heal": 0, "stat boosts": {}}

        #mega stones
        items["venusaurite"] = {"item": "venusaurite", "price": 5000, "description": "Allows venusaur to mega evolve", "heal": 0, "stat boosts": {}}
        items["charizardite y"] = {"item": "charizardite y", "price": 5000, "description": "Allows charizard to mega evolve", "heal": 0, "stat boosts": {}}
        items["charizardite x"] = {"item": "charizardite x", "price": 5000, "description": "Allows charizard to mega evolve", "heal": 0, "stat boosts": {}}
        items["blastoiseinite"] = {"item": "blastoiseinite", "price": 5000, "description": "Allows blastoise to mega evolve", "heal": 0, "stat boosts": {}}
        items["mewtwonite y"] = {"item": "mewtwonite y", "price": 5000, "description": "Allows mewtwo to mega evolve", "heal": 0, "stat boosts": {}}
        items["mewtwonite x"] = {"item": "mewtwonite x", "price": 5000, "description": "Allows mewtwo to mega evolve", "heal": 0, "stat boosts": {}}
        items["blazikenite"] = {"item": "blazikenite", "price": 5000, "description": "Allows blaziken to mega evolve", "heal": 0, "stat boosts": {}}
        items["sceptilite"] = {"item": "sceptilite", "price": 5000, "description": "Allows sceptile to mega evolve", "heal": 0, "stat boosts": {}}
        items["swampertite"] = {"item": "swampertite", "price": 5000, "description": "Allows swampert to mega evolve", "heal": 0, "stat boosts": {}}
        items["tyranitarite"] = {"item": "tyranitarite", "price": 5000, "description": "Allows tyranitar to mega evolve", "heal": 0, "stat boosts": {}}
        items["metagrossite"] = {"item": "metagrossite", "price": 5000, "description": "Allows metagross to mega evolve", "heal": 0, "stat boosts": {}}
        items["salamencite"] = {"item": "salamencite", "price": 5000, "description": "Allows salamence to mega evolve", "heal": 0, "stat boosts": {}}
        items["aggronite"] = {"item": "aggronite", "price": 5000, "description": "Allows aggron to mega evolve", "heal": 0, "stat boosts": {}}
        items["manectite"] = {"item": "manectite", "price": 5000, "description": "Allows manectric to mega evolve", "heal": 0, "stat boosts": {}}
        items["gardevoirite"] = {"item": "gardevoirite", "price": 5000, "description": "Allows gardevoir to mega evolve", "heal": 0, "stat boosts": {}}
        items["latiasite"] = {"item": "latiasite", "price": 5000, "description": "Allows latias to mega evolve", "heal": 0, "stat boosts": {}}
        items["latiosite"] = {"item": "latiosite", "price": 5000, "description": "Allows latios to mega evolve", "heal": 0, "stat boosts": {}}
        items["beedrillite"] = {"item": "beedrillite", "price": 5000, "description": "Allows beedrill to mega evolve", "heal": 0, "stat boosts": {}}
        items["alakazite"] = {"item": "alakazite", "price": 5000, "description": "Allows alakazam to mega evolve", "heal": 0, "stat boosts": {}}
        items["gengarite"] = {"item": "gengarite", "price": 5000, "description": "Allows gengar to mega evolve", "heal": 0, "stat boosts": {}}

        #berries
        items["oran berry"] = {"item": "oran berry", "price": 500, "description": "Heals 10 hp in a pinch", "heal": 0, "stat boosts": {}}
        items["sitrus berry"] = {"item": "sitrus berry", "price": 500, "description": "Heals 1/4 of your hp in a pinch", "heal": 0, "stat boosts": {}}
        items["enigma berry"] = {"item": "enigma", "price": 500, "description": "Heals 1/4 of your hp when hit by a supereffective attack", "heal": 0, "stat boosts": {}}
        items["lum berry"] = {"item": "lum berry", "price": 500, "description": "Clears status condition", "heal": 0, "stat boosts": {}}
        items["occa berry"] = {"item": "occa berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Fire-type attack", "heal": 0, "stat boosts": {}}
        items["passho berry"] = {"item": "passho berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Water-type attack", "heal": 0, "stat boosts": {}}
        items["wacan berry"] = {"item": "waccan berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Electric-type attack", "heal": 0, "stat boosts": {}}
        items["rindo berry"] = {"item": "rindo berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Grass-type attack", "heal": 0, "stat boosts": {}}
        items["yache berry"] = {"item": "yache berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Ice-type attack", "heal": 0, "stat boosts": {}}
        items["chople berry"] = {"item": "chople berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Fighting-type attack", "heal": 0, "stat boosts": {}}
        items["kebia berry"] = {"item": "kebia berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Poison-type attack", "heal": 0, "stat boosts": {}}
        items["shuca berry"] = {"item": "shuca berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Ground-type attack", "heal": 0, "stat boosts": {}}
        items["coba berry"] = {"item": "coba berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Flying-type attack", "heal": 0, "stat boosts": {}}
        items["payapa berry"] = {"item": "payapa berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Psychic-type attack", "heal": 0, "stat boosts": {}}
        items["tanga berry"] = {"item": "tanga berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Bug-type attack", "heal": 0, "stat boosts": {}}
        items["charti berry"] = {"item": "charti berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Rock-type attack", "heal": 0, "stat boosts": {}}
        items["kasib berry"] = {"item": "kasib berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Ghost-type attack", "heal": 0, "stat boosts": {}}
        items["haban berry"] = {"item": "haban berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Dragon-type attack", "heal": 0, "stat boosts": {}}
        items["colbur berry"] = {"item": "colbur berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Dark-type attack", "heal": 0, "stat boosts": {}}
        items["babiri berry"] = {"item": "babiri berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Steel-type attack", "heal": 0, "stat boosts": {}}
        items["roseli berry"] = {"item": "roseli berry", "price": 500, "description": "Will lessen the damage taken from one supereffective Fairy-type attack", "heal": 0, "stat boosts": {}}
        items["chilan berry"] = {"item": "chilan berry", "price": 500, "description": "Will lessen the damage taken from one Normal-type attack", "heal": 0, "stat boosts": {}}



        type_boosting_items = {"charcoal": "fire", "mystic water": "water", "miracle seed": "grass", "sharp beak": "flying", "dragon fang": "dragon",
                               "never melt ice": "ice", "black glasses": "dark", "magnet": "electric", "hard stone": "rock", "soft sand": "ground",
                               "metal coat": "steel", "twisted spoon": "psychic", "spell tag": "ghost", "poison barb": "poison"}

        supereffective_berry = {"occa berry": "fire", "passho berry": "water", "wacan berry": "electric", "rindo berry": "grass", "yache berry": "ice", "chople berry": "fighting",
                                "kebia berry": "poison", "shuca berry": "ground", "coba berry": "flying", "payapa berry": "psychic", "tanga berry": "bug", "charti berry": "rock",
                                "kasib berry": "ghost", "haban berry": "dragon", "colbur berry": "dark", "babiri berry": "steel", "roseli berry": "fairy", "chilan berry": "normal"}

        stat_berry = {"liechi berry": "attack", "ganlon berry": "defense", "salac berry": "speed", "petaya berry": "s_attack", "apicot berry": "s_defense"}

    #assigns boosting items to types
    type_boosting_items = {"charcoal": "fire", "mystic water": "water", "miracle seed": "grass", "sharp beak": "flying", "dragon fang": "dragon",
                           "never melt ice": "ice", "black glasses": "dark", "magnet": "electric", "hard stone": "rock", "soft sand": "ground",
                           "metal coat": "steel", "twisted spoon": "psychic", "spell tag": "ghost", "poison barb": "poison"}

    #assigns berries to types
    supereffective_berries = {"occa berry": "fire", "passho berry": "water", "wacan berry": "electric", "rindo berry": "grass", "yache berry": "ice", "chople berry": "fighting",
                            "kebia berry": "poison", "shuca berry": "ground", "coba berry": "flying", "payapa berry": "psychic", "tanga berry": "bug", "charti berry": "rock",
                            "kasib berry": "ghost", "haban berry": "dragon", "colbur berry": "dark", "babiri berry": "steel", "roseli berry": "fairy", "chilan berry": "normal"}

    stat_berry = {"liechi berry": "attack", "ganlon berry": "defense", "salac berry": "speed", "petaya berry": "s_attack", "apicot berry": "s_defense"}
    items_bought = {}

    pokemon_file = open("pokemon_save_info", "a")

    if True:
        def experience_gain(gain_pokemon, defeated_pokemon):
            a = 1
            b = exp_dict[defeated_pokemon["name"]]
            if gain_pokemon["held item"] == "lucky egg":
                e = 1.5
            else:
                e = 1
            f = 1
            L = gain_pokemon["level"]
            Lp = defeated_pokemon["level"]
            p = 1
            s = 1
            t = 1
            v = 1
            return int(((b * L * f * v) / (5 * s) * ((2 * L + 10) / (L + Lp + 10)) ** 2.5) * t * e * p)


        exp_dict = {
            "venusaur": 263,
            "charizard": 267,
            "blastoise": 265,
            "beedrill": 198,
            "pidgeot": 240,
            "pikachu": 112,
            "raichu": 243,
            "persian": 154,
            "poliwrath": 255,
            "alakazam": 250,
            "machamp": 253,
            "victreebel": 245,
            "golem": 248,
            "magneton": 163,
            "gengar": 250,
            "exeggutor": 186,
            "rhydon": 170,
            "chansey": 395,
            "pinsir": 175,
            "tauros": 172,
            "gyarados": 189,
            "lapras": 187,
            "vaporeon": 184,
            "jolteon": 184,
            "flareon": 184,
            "aerodactyl": 180,
            "snorlax": 189,
            "articuno": 290,
            "zapdos": 290,
            "moltres": 290,
            "dragonite": 300,
            "mewtwo": 340,
            "mew": 300,
            "meganium": 263,
            "typhlosion": 267,
            "feraligatr": 265,
            "crobat": 268,
            "ampharos": 255,
            "espeon": 184,
            "umbreon": 184,
            "steelix": 179,
            "scizor": 175,
            "heracross": 175,
            "piloswine": 158,
            "skarmory": 163,
            "kingdra": 270,
            "blissey": 635,
            "tyranitar": 300,
            "celebi": 300,
            "sceptile": 265,
            "blaziken": 265,
            "swampert": 268,
            "ludicolo": 240,
            "shiftry": 240,
            "gardevoir": 259,
            "aggron": 265,
            "manectric": 166,
            "flygon": 260,
            "altaria": 172,
            "walrein": 265,
            "salamence": 300,
            "metagross": 300,
            "latias": 300,
            "latios": 300,
            "kyogre": 335,
            "groudon": 335,
            "rayquaza": 340,
            "jirachi": 300,
            "deoxys": 300,
            "deoxys defense": 300,
            "deoxys speed": 300,
            "deoxys attack": 300,
            "toxicroak": 172,
            "lucario": 184,
            "weavile": 179,
            "togekiss": 273,
            "ice calyrex": 300,
            "ice calyrex": 300
        }

        exp_group = {
            "venusaur": "medium slow",
            "charizard": "medium slow",
            "blastoise": "medium slow",
            "beedrill": "medium fast",
            "pidgeot": "medium slow",
            "pikachu": "medium fast",
            "raichu": "medium fast",
            "persian": "medium fast",
            "poliwrath": "medium slow",
            "alakazam": "medium slow",
            "machamp": "medium slow",
            "victreebel": "medium slow",
            "golem": "medium slow",
            "magneton": "medium fast",
            "gengar": "medium slow",
            "exeggutor": "slow",
            "rhydon": "slow",
            "chansey": "fast",
            "pinsir": "slow",
            "tauros": "slow",
            "gyarados": "slow",
            "lapras": "slow",
            "vaporeon": "medium fast",
            "jolteon": "medium fast",
            "flareon": "medium fast",
            "aerodactyl": "slow",
            "snorlax": "slow",
            "articuno": "slow",
            "zapdos": "slow",
            "moltres": "slow",
            "dragonite": "slow",
            "mewtwo": "slow",
            "mew": "medium slow",
            "meganium": "medium slow",
            "typhlosion": "medium slow",
            "feraligatr": "medium slow",
            "crobat": "medium fast",
            "ampharos": "medium slow",
            "espeon": "medium fast",
            "umbreon": "medium fast",
            "steelix": "medium fast",
            "scizor": "medium fast",
            "heracross": "slow",
            "piloswine": "slow",
            "skarmory": "slow",
            "kingdra": "medium fast",
            "blissey": "fast",
            "tyranitar": "slow",
            "celebi": "slow",
            "sceptile": "medium slow",
            "blaziken": "medium slow",
            "swampert": "medium slow",
            "ludicolo": "medium slow",
            "shiftry": "medium slow",
            "gardevoir": "slow",
            "aggron": "slow",
            "manectric": "slow",
            "flygon": "medium slow",
            "altaria": "erratic",
            "walrein": "medium slow",
            "salamence": "slow",
            "metagross": "slow",
            "latias": "slow",
            "latios": "slow",
            "kyogre": "slow",
            "groudon": "slow",
            "rayquaza": "slow",
            "jirachi": "slow",
            "deoxys": "slow",
            "deoxys defense": "slow",
            "deoxys speed": "slow",
            "deoxys attack": "slow",
            "toxicroak": "medium fast",
            "lucario": "medium slow",
            "weavile": "medium slow",
            "togekiss": "fast",
            "ice calyrex": "slow",
            "shadow calyrex": "slow"
        }


        def xp_to_next_lvl(level, group):
            n = level
            if group == "erratic":
                if level < 50:
                    return (n ** 3) * (100 - n) // 50
                elif level >= 50 and level < 68:
                    return (n ** 3) * (150 - n) // 100
                elif level >= 68 and level < 98:
                    return (n ** 3) * ((1911 - 10 * n) / 3) // 500
                elif level >= 98:
                    return (n ** 3) * (160 - n) // 100
            elif group == "fast":
                return 4 * n ** 3 // 5
            elif group == "medium fast":
                return n ** 3
            elif group == "medium slow":
                return int((6 / 5 * (n ** 3)) - (15 * (n ** 2)) + (100 * n) - 140)
            elif group == "slow":
                return 5 * (n ** 3) // 4
            elif group == "fluctuating":
                if level < 15:
                    return int((n ** 3) * (((n + 1) / 3) + 24) // 50)
                elif level >= 15 and level < 36:
                    return int((n ** 3) * (n + 14) // 50)
                elif level >= 36:
                    return int((n ** 3) * ((n / 2) + 32) // 50)

        def level_up(user_pokemon, opponent_pokemon):
            user_pokemon["exp"] += experience_gain(user_pokemon, opponent_pokemon)
            if user_pokemon["exp"] >= xp_to_next_lvl(user_pokemon["level"], exp_group[user_pokemon["name"]]):
                user_pokemon["exp"] -= xp_to_next_lvl(user_pokemon["level"], exp_group[user_pokemon["name"]])
                level_up = True
            else:
                level_up = False
            if level_up == True:
                if user_pokemon["level"] < 100:
                    user_pokemon["level"] += 1
                user_pokemon["stats"] = all_stats_calc(pokemon_list[user_pokemon["name"]], user_pokemon["level"],
                                                       user_pokemon["EVs"])
            print(user_pokemon["name"] + " leveled up to level " + str(user_pokemon["level"]))
            return user_pokemon

if True: # items
    #lets players buy items from shop
    def buy(money, buy_dict = {}):
        print(printer_outer(printer_outer("item", "price", 20), "Description", 30))
        for item in items.keys():
            if item == "x accuracy" or item == "charcoal" or item == "leftovers" or item == "venusaurite":
                print("\n")
            print(printer_outer(printer_outer(items[item]["item"].title() + ": ",  str(items[item]["price"]), 20), "Description:  " + items[item]["description"], 35))
        while True:
            print("\n")
            slow_print("Money: " + str(money))
            slow_print("Which item would you like to buy?(Type D if you are done) ")
            bought = input("Item bought: ")
            if bought.lower() == "d":
                break
            item_in = False
            for item in items.keys():
                if bought == items[item]["item"]:
                    item_in = True
            if item_in == False:
                slow_print("Not a valid item! ")
            else:
                if items[bought]["price"] > money:
                    slow_print("Not enough money to buy this item!")
                else:
                    if bought in buy_dict.keys():
                        buy_dict[bought] += 1
                    else:
                        buy_dict[bought] = 1
                    money -= items[bought]["price"]
                if money <= 0:
                    break
        return buy_dict

    #lets players give items to their pokemon
    def item_assigner(p_team, item_dict):
        for pokemon in p_team:
            while True:
                print(printer_outer("Pokemon: " + (pokemon["name"]).title(), "Moves: " + ", ".join(pokemon["moves"]), 25))
                print("Bag: ", item_dict)
                print("Which item would you like to attach to this pokemon?(Type N if none)")
                item_chosen = input("Item: ")
                if item_chosen.lower() == "n":
                    break
                if item_chosen in item_dict.keys():
                    if item_dict[item_chosen] > 0:
                        if pokemon["held item"] != "":
                            if pokemon["held item"] in item_dict.keys():
                                item_dict[pokemon["held item"]] += 1
                            else:
                                item_dict[pokemon["held item"]] = 1
                        pokemon["held item"] = item_chosen
                        item_dict[item_chosen] -= 1
                        break
                    else:
                        print("Cannot add item due to there being none in bag!")
                else:
                    print("Not an item in your bag!")
            clean_bag(item_dict)
        return p_team

    #checks if chosen item is in bag
    def check_in_bag(bag, item):
        if item in bag.keys():
            if bag[item] < 1:
                slow_print("You don't have any more of this item left! ")
                return False
            else:
                return True
        else:
            slow_print("Item not in your bag! ")
            return False

    def clean_bag(item_bag):
        for key in item_bag.keys():
            if item_bag[key] == 0:
                del item_bag[key]
        return item_bag

    #uses healing item
    def use_item(item, pokemon, p_stat_boosts):
        if item["name"] == "full heal" or item["name"] == "full restore":
            pokemon["status condition"] = []
        if item["name"] == "potion":
            pokemon["current hp"] += 20
        if item["name"] == "super potion":
            pokemon["current hp"] += 60
        if item["name"] == "hyper potion":
            pokemon["current hp"] += 120
        if item["name"] == "max potion" or item["name"] == "full restore":
            pokemon["current hp"] += 1000
        if item["name"] == "revive":
            pokemon["current hp"] = int(pokemon["stats"]["hp"] / 2)
        if item["name"] == "max revive":
            pokemon["current hp"] = pokemon["stats"]["hp"]
        if item["name"] == "x accuracy" or item == "x attack" or item == "x defense" or item == "x s_attack" or item == "x s_defense" or item == "x speed":
            for stat in p_stat_boosts.keys():
                for item_boost in items[item]["stat boosts"].keys():
                    if item_boost == stat:
                        p_stat_boosts[stat] += items[item]["stat boosts"][item_boost]
                        slow_print("The " + item + " boosted " + pokemon["name"] + "'s " + stat + " by " + items[item]["stat boosts"][item_boost] + " stages!")
                        if p_stat_boosts[stat] > 6:
                            p_stat_boosts[stat] = 6
        if pokemon["current hp"] > pokemon["stats"]["hp"]:
            pokemon["current hp"] = pokemon["stats"]["hp"]
        return pokemon, p_stat_boosts

    #function for boosting power of a type of move
    def check_type_booster(pokemon, move):
        if pokemon["held item"] not in type_boosting_items.keys():
            return 1
        if type_boosting_items[pokemon["held item"]] == move["type"]:
            return 1.2
        else:
            return 1

    #function for bands
    def check_bands(pokemon, move):
        if pokemon["held item"] == "muscle band" and move["c_type"] == "physical":
            return 1.2
        elif pokemon["held item"] == "wise glasses" and move["c_type"] == "special":
            return 1.2
        else:
            return 1

    #function for absorb bulb, snowball...
    def check_when_hit(hit_pokemon, move, p_boosts):
        if hit_pokemon["held item"] == "absorb bulb" and move["type"] == "water" or pokemon["held item"] == "cell battery" and move["type"] == "electric":
            p_boosts["s_attack"] += 1
            if p_boosts["s_attack"] > 6:
                p_boosts["s_attack"] = 6
            slow_print(hit_pokemon["name"].title() + "'s " + hit_pokemon["held item"] + " activated!")
        elif hit_pokemon["held item"] == "snowball" and move["type"] == "ice":
            p_boosts["attack"] += 1
            if p_boosts["attack"] > 6:
                p_boosts["attack"] = 6
            slow_print(hit_pokemon["name"].title() + "'s " + hit_pokemon["held item"] + " activated!")
        elif hit_pokemon["held item"] == "luminous moss" and move["type"] == "water":
            p_boosts["s_defense"] += 1
            if p_boosts["s_defense"] > 6:
                p_boosts["s_defense"] = 6
            slow_print(hit_pokemon["name"].title() + "'s " + hit_pokemon["held item"] + " activated!")
        elif hit_pokemon["held item"] == "weakness policy" and check_type(move["type"], hit_pokemon["type"]) > 1:
            p_boosts["attack"] += 2
            if p_boosts["attack"] > 6:
                p_boosts["attack"] = 6
            p_boosts["s_attack"] += 2
            if p_boosts["s_attack"] > 6:
                p_boosts["s_attack"] = 6
            slow_print(hit_pokemon["name"].title() + "'s " + hit_pokemon["held item"] + " activated!")
        return p_boosts

    #function for berries used
    def use_berry(hit_pokemon, move, p_boosts):
        if hit_pokemon["held item"] == "oran berry":
            if hit_pokemon["current hp"] // 2 < hit_pokemon["stats"]["hp"]:
                hit_pokemon["current hp"] += 10
                slow_print(hit_pokemon["name"] + " used an " + hit_pokemon["held item"])
                hit_pokemon["held item"] = ""
                if hit_pokemon["current hp"] > hit_pokemon["stats"]["hp"]:
                    hit_pokemon["current hp"] = hit_pokemon["stats"]["hp"]
        elif hit_pokemon["held item"] == "sitrus berry":
            if hit_pokemon["current hp"] // 2 < hit_pokemon["stats"]["hp"]:
                hit_pokemon["current hp"] += hit_pokemon["stats"]["hp"] // 4
                slow_print(hit_pokemon["name"] + " used a " + hit_pokemon["held item"])
                hit_pokemon["held item"] = ""
                if hit_pokemon["current hp"] > hit_pokemon["stats"]["hp"]:
                    hit_pokemon["current hp"] = hit_pokemon["stats"]["hp"]
        elif hit_pokemon["held item"] == "enigma berry":
            if check_type(move["type"], hit_pokemon["type"]) > 1:
                hit_pokemon["current hp"] += hit_pokemon["stats"]["hp"] // 4
                slow_print(hit_pokemon["name"] + " used a " + hit_pokemon["held item"])
                hit_pokemon["held item"] = ""
                if hit_pokemon["current hp"] > hit_pokemon["stats"]["hp"]:
                    hit_pokemon["current hp"] = hit_pokemon["stats"]["hp"]
        elif hit_pokemon["held item"] == "cheri berry":
            if "paralyze" in hit_pokemon["status condition"]:
                hit_pokemon["status condition"].remove("paralyze")
                slow_print(hit_pokemon["name"] + " used a " + hit_pokemon["held item"])
                hit_pokemon["held item"] = ""
        elif hit_pokemon["held item"] == "chesto berry":
            if "asleep" in hit_pokemon["status condition"]:
                hit_pokemon["status condition"].remove("asleep")
                slow_print(hit_pokemon["name"] + " used a " + hit_pokemon["held item"])
                hit_pokemon["held item"] = ""
        elif hit_pokemon["held item"] == "pecha berry":
            if "poison" in hit_pokemon["status condition"]:
                hit_pokemon["status condition"].remove("poison")
                slow_print(hit_pokemon["name"] + " used a " + hit_pokemon["held item"])
                hit_pokemon["held item"] = ""
        elif hit_pokemon["held item"] == "rawst berry":
            if "burn" in hit_pokemon["status condition"]:
                hit_pokemon["status condition"].remove("burn")
                slow_print(hit_pokemon["name"] + " used a " + hit_pokemon["held item"])
                hit_pokemon["held item"] = ""
        elif hit_pokemon["held item"] == "aspear berry":
            if "freeze" in hit_pokemon["status condition"]:
                hit_pokemon["status condition"].remove("freeze")
                slow_print(hit_pokemon["name"] + " used a " + hit_pokemon["held item"])
                hit_pokemon["held item"] = ""
        elif hit_pokemon["held item"] == "persim berry":
            if "confuse" in hit_pokemon["status condition"]:
                hit_pokemon["status condition"].remove("confuse")
                slow_print(hit_pokemon["name"] + " used a " + hit_pokemon["held item"])
                hit_pokemon["held item"] = ""
        elif hit_pokemon["held item"] == "lum berry":
            if hit_pokemon["status condition"] != []:
                hit_pokemon["status condition"] = []
                slow_print(hit_pokemon["name"] + " used a " + hit_pokemon["held item"])
                hit_pokemon["held item"] = ""
        return hit_pokemon

    #function for supereffective berries
    def supereffective_berry(hit_pokemon, move, p_boosts):
        if hit_pokemon["held item"] in supereffective_berries.keys():
            if move["type"] == supereffective_berries[hit_pokemon["held item"]]:
                return 1/2
        else:
            return 1

#abilities
if True:
    def overgrow(pokemon, move):
        if pokemon["current hp"] * 3 < pokemon["stats"]["hp"]:
            if move["type"] == "grass":
                return 1.5
        return 1

    def blaze(pokemon, move):
        if pokemon["current hp"] * 3 < pokemon["stats"]["hp"]:
            if move["type"] == "fire":
                return 1.5
        return 1

    def torrent(pokemon, move):
        if pokemon["current hp"] * 3 < pokemon["stats"]["hp"]:
            if move["type"] == "water":
                return 1.5
        return 1

    def swarm(pokemon, move):
        if pokemon["current hp"] * 3 < pokemon["stats"]["hp"]:
            if move["type"] == "bug":
                return 1.5
        return 1

    def tough_claws(move):
        if move["c_type"] == "physical":
            return 1.3
        return 1

    def mega_launcher(move):
        if move["name"] == "aura sphere" or move["name"] == "dark pulse" or move["name"] == "dragon pulse" or move["name"] == "water pulse":
            return 1.5
        return 1

    #when calculating move
    """def lightning_rod(pokemon, move, s_boosts):
        move_power = 1
        if move["type"] == "electric":
            move_power = 0
            s_boosts["s_attack"] += 1
            if s_boosts["s_attack"] > 6:
                print(pokemon["name"] + "'s special attack cannot be raised any further by lightning rod!")
                s_boosts["s_attack"] = 6
            else:
                print(pokemon["name"] + "'s lightning rod raised it's speed by 1!")
        return s_boosts, move_power
    
    def water_absorb(pokemon, move):
        if move["type"] == "water":
            move_power = 0
            pokemon["current hp"] += pokemon["stats"]["hp"] // 4
            if pokemon["current hp"] > pokemon["current hp"]:
                pokemon["current hp"] = pokemon["current hp"]
            else:
                print(pokemon["name"].title() + "'s water absorb restored some hp!")
        return pokemon, move_power
    
    def volt_absorb(pokemon, move):
        if move["type"] == "electric":
            move_power = 0
            pokemon["current hp"] += pokemon["stats"]["hp"] // 4
            if pokemon["current hp"] > pokemon["current hp"]:
                pokemon["current hp"] = pokemon["current hp"]
            else:
                print(pokemon["name"].title() + "'s volt absorb restored some hp!")
        return pokemon, move_power
    """

    def flash_fire(pokemon, move):
        if move["type"] == "fire":
            slow_print(pokemon["name"].title() + "'s flash fire made it immune to " + move["name"] + "!")
            return 0
        return 1

    def multiscale(pokemon):
        if pokemon["current hp"] == pokemon["current hp"]:
            return 0.5
        return 1

    def thick_fat(move):
        if move["type"] == "fire" or move["type"] == "ice":
            return 0.5
        return 1

    def levitate(move):
        if move["type"] == "ground":
            return 0
        return 1

    def calculate_ability_power(atk_pkmn, def_pkmn, move):
        other = 1
        if atk_pkmn["ability"] == "overgrow":
            other *= overgrow(atk_pkmn, move)
        if atk_pkmn["ability"] == "blaze":
            other *= blaze(atk_pkmn, move)
        if atk_pkmn["ability"] == "torrent":
            other *= torrent(atk_pkmn, move)
        if atk_pkmn["ability"] == "swarm":
            other *= swarm(atk_pkmn, move)
        if atk_pkmn["ability"] == "tough claws":
            other *= tough_claws(move)
        if atk_pkmn["ability"] == "mega launcher":
            other *= mega_launcher(move)
        if def_pkmn["ability"] == "levitate":
            other *= levitate(move)
            if other == 0:
                slow_print(def_pkmn["name"] + "'s levitate activated! The " + move["name"] + " doesn't affect " + def_pkmn["name"])
        if def_pkmn["ability"] == "thick fat":
            other *= thick_fat(move)
        if def_pkmn["ability"] == "multiscale":
            other *= multiscale(def_pkmn)
        if def_pkmn["ability"] == "flash fire":
            other *= flash_fire(atk_pkmn, move)
        """if atk_pkmn["ability"] == "volt absorb":
            information = volt_absorb(def_pkmn, move)
            other *= information[1]
            atk_pkmn = information[0]
        if atk_pkmn["ability"] == "water absorb":
            information = water_absorb(def_pkmn, move)
            other *= information[1]
            atk_pkmn = information[0]
        if atk_pkmn["ability"] == "lightning rod":
            information = lightning_rod(def_pkmn, move, s1_boosts)
            other *= information[1]
            s1_boosts = information[0]"""
        return other

    #abilities change type of move
    def pixelate(move):
        if move["type"] == "normal":
            temp_move = move.copy()
            temp_move["type"] = "fairy"
            return temp_move
        return move

    def aerilate(move):
        if move["type"] == "normal":
            temp_move = move.copy()
            temp_move["type"] = "fairy"
            return temp_move
        return move

    def change_type(atk_pokemon, move):
        if atk_pokemon["ability"] == "pixelate":
            return pixelate(move)
        if atk_pokemon["ability"] == "aerilate":
            return aerilate(move)
        else:
            return move

#prints out text in format
def printer_outer(message_1, message_2, chars):
    return message_1 + " "*(chars - len(message_1)) + message_2
if True: # stuff I'll never check; weather, status cond, return mess, atk mults, stat calcs
    def check_weather(move, weather):
        for key in list(weather_dict.keys()):
            if move["name"] in weather_dict[key]:
                weather_counter = 5
                return key
        return weather

    def check_if_weather(move, weather):
        hp_loss_percent = 0
        weather_mult = 1
        if weather == "rain":
            if move["type"] == "water":
                weather_mult *= 1.5
            elif move["type"] == "fire" or move["name"] == "solar beam" or move["name"] == "solar blade":
                weather_mult *= 0.5
        elif weather == "sunny":
            if move["type"] == "fire":
                weather_mult *= 1.5
            elif move["type"] == "water":
                weather_mult *= 0.5
        elif weather == "sandstorm":
            if move["name"] == "solar beam" or move["name"] == "solar blade":
                weather_mult *= 0.5
            hp_loss_percent = 1 / 16
        elif weather == "hail":
            if move["name"] == "solar beam" or move["name"] == "solar blade":
                weather_mult *= 0.5
            hp_loss_percent = 1 / 16
        return weather_mult, hp_loss_percent

    list_of_weather_messages = {"clear": "", "rain": "// A raining storm rages on the battlefield! //", "sunny": "~~ The hot sun schorches the earth! ~~", "sandstorm": "`` A wild sandstorm swirls on! ``", "hail": "## Hail pours from the sky! ##"}
    def print_weather_landscape():
        return None
        if the_current_weather[0] == "clear":
            print(clear)
        if the_current_weather[0] == "rain":
            print(rain)
        if the_current_weather[0] == "sunny":
            print(sunny)
        if the_current_weather[0] == "sandstorm":
            print(sandstorm)
        if the_current_weather[0] == "hail":
            print(hail)

    def check_condition(attacked_pokemon, move):
        if "status condition" in move.keys():
            for condition in move["status condition"].keys():
                if random.randint(0,100) < (move["status condition"][condition] * 100):
                    if condition not in attacked_pokemon["status condition"]:
                        attacked_pokemon["status condition"].append(condition)
                        slow_print(attacked_pokemon["name"] + " got the status condition " + condition + "!")
                    else:
                        slow_print(attacked_pokemon["name"] + " already had the status condition " + condition + "!")
        if move["type"] == "fire":
            if "freeze" in attacked_pokemon["status condition"]:
                attacked_pokemon["status condition"].remove("freeze")
                slow_print(attacked_pokemon["name"] + " thawed out!")
        return attacked_pokemon

    def heal_condition(poke_1, poke_2):
        if "sleep" in poke_1["status condition"]:
            if random.randint(0,3) == 0:
                poke_1["status condition"].remove("sleep")
                slow_print(poke_1["name"] + " woke up!")
        if "frozen" in poke_1["status condition"]:
            if random.randint(0,5) == 0:
                poke_1["status condition"].remove("frozen")
                slow_print(poke_1["name"] + " thawed out on it's own!")
        if "confusion" in poke_1["status condition"]:
            if random.randint(0,3) == 0:
                poke_1["status condition"].remove("confusion")
                slow_print(poke_1["name"] + " snapped out of it's confusion!")
        if "sleep" in poke_2["status condition"]:
            if random.randint(0,3) == 0:
                poke_2["status condition"].remove("sleep")
                slow_print(poke_2["name"] + " woke up!")
        if "frozen" in poke_2["status condition"]:
            if random.randint(0,5) == 0:
                poke_2["status condition"].remove("frozen")
                slow_print(poke_2["name"] + " thawed out on it's own!")
        if "confusion" in poke_2["status condition"]:
            if random.randint(0,3) == 0:
                poke_2["status condition"].remove("confusion")
                slow_print(poke_2["name"] + " snapped out of it's confusion!")
        return poke_1, poke_2

    def check_type(attk_type, def_type = []):
        type_mult = 1
        for typing in def_type:
            if attk_type in type_chart[typing]["weakness"]:
                type_mult *= 2
            elif attk_type in type_chart[typing]["resistance"]:
                type_mult /= 2
            elif attk_type in type_chart[typing]["immunity"]:
                type_mult *= 0
        return type_mult

    def return_message(type_mul, move, pkmn_name):
        if type_mul == 0:
            return "The " + pkmn_name.title() + "'s " + move + " had no effect!"
        elif type_mul == 1/4:
            return "The " + pkmn_name.title() + "'s " + move + " was really not very effective!"
        elif type_mul == 1/2:
            return "The " + pkmn_name.title() + "'s " + move + " was not very effective!"
        elif type_mul == 1:
            return "The " + pkmn_name.title() + "'s " + move + " hit!"
        elif type_mul == 2:
            return("The " + pkmn_name.title() + "'s " + move + " was super effective!")
        elif type_mul == 4:
            return("The " + pkmn_name.title() + "'s " + move + " was really super effective")

    def accuracy_check(move_acc, p1_acc, p2_eva):
        token = random.randint(1,101)
        acc_mult = move_acc
        if p1_acc > 0:
            acc_mult *= (3 + p1_acc) / 3
        else:
            acc_mult *= 3 / (3 - p1_acc)
        if p2_eva > 0:
            acc_mult /= (3 + p2_eva) / 3
        else:
            acc_mult /= 3 / (3 - p2_eva)
        if acc_mult >= token:
            return True
        else:
            return False

    def c_mult(p1_atk, p2_def):
        atk_mult = 1
        if p1_atk > 0:
            atk_mult *= (2 + p1_atk) / 2
        else:
            atk_mult *= 2 / (2 - p1_atk)
        if p2_def > 0:
            atk_mult /= (2 + p2_def) / 2
        else:
            atk_mult /= 2 / (2 - p2_def)
        return atk_mult

    def boost_check(p1_stat_boost, p2_stat_boost, boosted):
        d = {}
        o = {}
        for k in boosted.keys():
            for j in p1_stat_boost.keys():
                if k == j:
                    if type(boosted[k]) != int:
                        token = random.randint(1,101)
                        if token < (boosted[k]) * 100:
                            p1_stat_boost[j] += 1
                            if p1_stat_boost[j] > 6:
                                p1_stat_boost[j] = 6
                                slow_print("This pokemon cannot have it's " + str(j) + " boosted any further!")
                            elif p1_stat_boost[j] < -6:
                                p1_stat_boost[j] = -6
                                slow_print("This pokemon cannot have it's " + str(j) + " lowered any further!")
                            d[k] = 1
                    else:
                        p1_stat_boost[j] += boosted[k]
                        d[k] = boosted[k]
                        if p1_stat_boost[j] > 6:
                            p1_stat_boost[j] = 6
                            slow_print("This pokemon cannot have it's " + str(j) + " boosted any further!")
                        elif p1_stat_boost[j] < -6:
                            p1_stat_boost[j] = -6
                            slow_print("This pokemon cannot have it's " + str(j) + " lowered any further!")
            for i in p2_stat_boost.keys():
                if k[1:] == i:
                    if type(boosted[k]) != int:
                        token = random.randint(1,101)
                        if token < (boosted[k]) * 100:
                            p2_stat_boost[j] += 1
                            if p2_stat_boost[j] > 6:
                                p2_stat_boost[j] = 6
                                slow_print("This pokemon cannot have it's " + str(j) + " boosted any further!")
                            elif p2_stat_boost[j] < -6:
                                p2_stat_boost[j] = -6
                                slow_print("This pokemon cannot have it's " + str(j) + " lowered any further!")
                            o[k] = 1
                    else:
                        p2_stat_boost[i] += boosted[k]
                        o[k] = boosted[k]
                        if p2_stat_boost[j] > 6:
                            p2_stat_boost[j] = 6
                            slow_print("This pokemon cannot have it's " + str(i) + " boosted any further!")
                        elif p2_stat_boost[j] < -6:
                            p2_stat_boost[j] = -6
                            slow_print("This pokemon cannot have it's " + str(i) + " lowered any further!")
        return p1_stat_boost, p2_stat_boost, d, o

    def bst_calc(move_power, c_type, p1_atk = 1, p2_def = 1, p1_satk = 1, p2_sdef = 1):
        if c_type == "physical":
            return move_power * p1_atk / p2_def
        elif c_type == "special":
            return move_power * p1_satk / p2_sdef

    def heal_calc(move, damage_done, pokemon):
        if move["name"] == "belly drum":
            return -1 * int(pokemon["stats"]["hp"] * 0.5)
        elif move["name"] == "explosion":
            return -1 * int(pokemon["stats"]["hp"])
        elif move["name"] == "recover" or move["name"] == "slack off" or move["name"] == "soft boiled":
            return int(pokemon["stats"]["hp"] * 0.5)
        elif move["name"] == "giga drain" or move["name"] == "drain punch" or move["name"] == "draining kiss" or move[
            "name"] == "leech life":
            if pokemon["held item"] == "big root":
                return int(damage_done * 0.65)
            else:
                return int(damage_done * 0.5)
        elif move["name"] == "wild charge" or move["name"] == "take down":
            return -1 * int(damage_done / 4)
        elif move["name"] == "flare blitz" or move["name"] == "brave bird" or move["name"] == "volt tackle" or move[
            "name"] == "wood hammer":
            return -1 * int(damage_done / 3)
        elif move["name"] == "head smash":
            return -1 * int(damage_done / 2)
        else:
            return 0

#  HP = int(0.01 x (2 x Base + IV) x Level) + Level + 10
#  Other Stats = (floor(0.01 x (2 x Base + IV) x Level) + 5) x Nature
if True:  # nature coding
    inc_natures = {
        "attack": ["hardy", "lonely", "adament", "naughty", "brave"],
        "defense": ["bold", "docile", "impish", "lax", "relaxed"],
        "s_attack": ["modest", "mild", "bashful", "rash", "quiet"],
        "s_defense": ["calm", "gentle", "careful", "quirky", "sassy"],
        "speed": ["timid", "hasty", "jolly", "naive", "serious"]
    }

    dec_natures = {
        "attack": ["hardy", "bold", "modest", "calm", "timid"],
        "defense": ["lonely", "docile", "mild", "gentle", "hasty"],
        "s_attack": ["adament", "impish", "bashful", "careful", "jolly"],
        "s_defense": ["naughty", "lax", "rash", "quirky", "naive"],
        "speed": ["brave", "relaxed", "quiet", "sassy", "serious"],
    }


    def nature_calc(pkmn_nature):
        inc_stat = "none"
        dec_stat = "none"
        for stat in inc_natures.keys():
            for nature in inc_natures[stat]:
                if nature == pkmn_nature:
                    inc_stat = stat
        for stat in dec_natures.keys():
            for nature in dec_natures[stat]:
                if nature == pkmn_nature:
                    dec_stat = stat
        return inc_stat, dec_stat


    def nature_mult(stat_selected, pkmn_nature):
        increased_stat, decreased_stat = nature_calc(pkmn_nature)
        if increased_stat == decreased_stat:
            return 1
        else:
            if stat_selected == increased_stat:
                return 1.1
            elif stat_selected == decreased_stat:
                return 0.9


    def all_stats_calc(Base, Level, EVs=[0, 0, 0, 0, 0, 0], IVs=[0, 0, 0, 0, 0, 0], pkmn_nature= "hardy"):
        HP = int(0.01 * (2 * Base["hp"] + IVs[0] + EVs[0] / 4) * Level) + Level + 10
        Attack = int(((0.01 * (2 * Base["attack"] + IVs[1] + EVs[1] / 4) * Level) + 5) * nature_mult("attack", pkmn_nature))
        Defense = int(((0.01 * (2 * Base["defense"] + IVs[2] + EVs[2] / 4) * Level) + 5) * nature_mult("defense", pkmn_nature))
        Special_Attack = int(((0.01 * (2 * Base["s_attack"] + IVs[3] + EVs[3] / 4) * Level) + 5) * nature_mult("s_attack", pkmn_nature))
        Special_Defense = int(((0.01 * (2 * Base["s_defense"] + IVs[4] + EVs[4] / 4) * Level) + 5) * nature_mult("s_defense", pkmn_nature))
        Speed = int(((0.01 * (2 * Base["speed"] + IVs[5] + EVs[5] / 4) * Level) + 5) * nature_mult("speed", pkmn_nature))
        return {"hp": HP, "attack": Attack, "defense": Defense, "s_attack": Special_Attack, "s_defense": Special_Defense, "speed": Speed} # nature

if True:    #terrain
    hazards = {"p1 spikes": 0, "p2 spikes": 0, "p1 toxic spikes": 0, "p2 toxic spikes": 0, "p1 stealth rock": 0, "p2 stealth rock": 0}

    def hazard_setter(move, pokemon, player):
        if player == 1:
            if move["name"] == "spikes":
                hazards["p2 spikes"] += 1
                slow_print(trainer_1 + "set up spikes!")
            if move["name"] == "toxic spikes":
                hazards["p2 toxic spikes"] += 1
                slow_print(trainer_1 + "set up toxic spikes!")
            if move["name"] == "stealth rock":
                hazards["p2 stealth rock"] = 1
                slow_print(trainer_1 + "set up pointed stones!")
        if player == 2:
            if move["name"] == "spikes":
                hazards["p2 spikes"] += 1
                slow_print(trainer_2 + "set up spikes!")
            if move["name"] == "toxic spikes":
                hazards["p2 toxic spikes"] += 1
                slow_print(trainer_2 + "set up toxic spikes!")
            if move["name"] == "stealth rock":
                hazards["p2 stealth rock"] = 1
                slow_print(trainer_2 + "set up pointed stones!")

    def check_hazards(pokemon, playerr):
        if pokemon["held item"] == "heavy duty boots":
            print(pokemon["name"] + " avoided any entry hazards thanks to it's heavy duty boots!")
            return pokemon
        if playerr == 1:
            if hazards["p1 spikes"] >= 3:
                pokemon["current hp"] -= pokemon["stats"]["hp"] // 4
                slow_print(pokemon["name"] + " took damage from spikes!")
            elif hazards["p1 spikes"] == 2:
                pokemon["current hp"] -= pokemon["stats"]["hp"] // 6
                slow_print(pokemon["name"] + " took damage from spikes!")
            elif hazards["p1 spikes"] == 1:
                pokemon["current hp"] -= pokemon["stats"]["hp"] // 8
                slow_print(pokemon["name"] + " took damage from spikes!")
            if hazards["p1 stealth rock"] > 0:
                pokemon["current hp"] -= int(pokemon["stats"]["hp"] * (check_type("rock", pokemon["type"]) // 8))
                slow_print(pokemon["name"] + " took damage from stealth rock!")
            elif hazards["p1 toxic spikes"] > 0:
                if "poison" not in pokemon["status condition"]:
                    pokemon["status condition"].append("poison")
                    slow_print(pokemon["name"] + " got poisoned from toxic spikes!")
        if playerr == 2:
            if hazards["p2 spikes"] >= 3:
                pokemon["current hp"] -= pokemon["stats"]["hp"] // 4
                slow_print(pokemon["name"] + " took damage from spikes!")
            elif hazards["p2 spikes"] == 2:
                pokemon["current hp"] -= pokemon["stats"]["hp"] // 6
                slow_print(pokemon["name"] + " took damage from spikes!")
            elif hazards["p2 spikes"] == 1:
                pokemon["current hp"] -= pokemon["stats"]["hp"] // 8
                slow_print(pokemon["name"] + " took damage from spikes!")
            if hazards["p2 stealth rock"] > 0:
                pokemon["current hp"] -= int(pokemon["stats"]["hp"] * (check_type("rock", pokemon["type"]) // 8))
                slow_print(pokemon["name"] + " took damage from stealth rock!")
            elif hazards["p2 toxic spikes"] > 0:
                if "poison" not in pokemon["status condition"]:
                    pokemon["status condition"].append("poison")
                    slow_print(pokemon["name"] + " got poisoned from toxic spikes!")
        return pokemon

    the_current_weather = [""]
    terrain_conds = {"p1 reflect": 0, "p2 reflect": 0, "p1 light screen": 0, "p2 light screen": 0, "trick room": 0, "electric terrain": 0, "misty terrain": 0, "grassy terrain": 0, "psychic terrain": 0}

    def terrain_setter(move, pokemon, player):
        if player == 1:
            if move["name"] == "reflect":
                terrain_conds["p1 reflect"] = 5
                if pokemon["held item"] == "light clay":
                    terrain_conds["p1 reflect"] = 8
                slow_print("A barrier surrounds " + trainer_1 + "'s team!")
            elif move["name"] == "light screen":
                terrain_conds["p1 light screen"] = 5
                if pokemon["held item"] == "light clay":
                    terrain_conds["p1 light screen"] = 8
                slow_print("A barrier surrounds " + trainer_1 + "'s team!")
        if player == 2:
            if move["name"] == "reflect":
                terrain_conds["p2 reflect"] = 5
                if pokemon["held item"] == "light clay":
                    terrain_conds["p1 reflect"] = 8
                slow_print("A barrier surrounds " + trainer_2 + "'s team!")
            elif move["name"] == "light screen":
                terrain_conds["p2 light screen"] = 5
                if pokemon["held item"] == "light clay":
                    terrain_conds["p1 light screen"] = 8
                slow_print("A barrier surrounds " + trainer_2 + "'s team!")
        elif move["name"] == "trick room":
            terrain_conds["trick room"] = 5
            if pokemon["held item"] == "light clay":
                terrain_conds["trick room"] = 8
            slow_print("Mysterious energy surrounds the battlefield!")
        elif move["name"] == "electric terrain":
            terrain_conds["electric terrain"] = 5
            terrain_conds["grassy terrain"] = 0
            terrain_conds["misty terrain"] = 0
            terrain_conds["psychic terrain"] = 0
            slow_print("An electric surge surrounds the battlefield!")
        elif move["name"] == "misty terrain":
            terrain_conds["electric terrain"] = 0
            terrain_conds["grassy terrain"] = 0
            terrain_conds["misty terrain"] = 5
            terrain_conds["psychic terrain"] = 0
            slow_print("A mystical surge surrounds the battlefield!")
        elif move["name"] == "grassy terrain":
            terrain_conds["electric terrain"] = 0
            terrain_conds["grassy terrain"] = 5
            terrain_conds["misty terrain"] = 0
            terrain_conds["psychic terrain"] = 0
            slow_print("Overgrown greenery surrounds the battlefield!")
        elif move["name"] == "psychic terrain":
            terrain_conds["electric terrain"] = 0
            terrain_conds["grassy terrain"] = 0
            terrain_conds["misty terrain"] = 0
            terrain_conds["psychic terrain"] = 5
            slow_print("Psychic energy surrounds the battlefield!")

    def speed_check(p1_speed, p2_speed, p1_speed_boost = 0, p2_speed_boost = 0, p1_priority = 0, p2_priority = 0):
        if p1_priority != 0 or p2_priority != 0:
            if p1_priority > p2_priority:
                return True
            elif p1_priority < p2_priority:
                return False
        if (p1_speed * c_mult(p1_speed_boost, 0)) > (p2_speed * c_mult(p2_speed_boost, 0)):
            if terrain_conds["trick room"] > 0:
                return False
            return True
        elif (p1_speed * c_mult(p1_speed_boost, 0)) < (p2_speed * c_mult(p2_speed_boost, 0)):
            if terrain_conds["trick room"] > 0:
                return True
            return False
        else:
            token = random.randint(0,1)
            if token == 1:
                return False
            else:
                return True

    def return_weather_hp(pokemon_1, pokemon_2, pokemon_1_hp, pokemon_2_hp):
        if the_current_weather[0] == "clear" or "rain" or "sunny":
            return pokemon_1_hp, pokemon_2_hp
        elif the_current_weather[0] == "sandstorm":
            if "rock" in pokemon_1["type"] or "ground" in pokemon_1["type"] or "steel" in pokemon_1["type"]:
                p1_health_loss = 0
            else:
                p1_health_loss = pokemon_1["stats"]["hp"] / 16
                slow_print(pokemon_1["name"] + " was buffeted by the " + the_current_weather[0])
            if "rock" in pokemon_2["type"] or "ground" in pokemon_2["type"] or "steel" in pokemon_2["type"]:
                p2_health_loss = 0
            else:
                p2_health_loss = pokemon_2["stats"]["hp"] / 16
                slow_print(pokemon_2["name"] + " was buffeted by the " + the_current_weather[0])
        elif the_current_weather[0] == "hail":
            if "ice" in pokemon_1["type"]:
                p1_health_loss = 0
            else:
                p1_health_loss = pokemon_1["stats"]["hp"] / 16
                slow_print(pokemon_1["name"] + " was buffeted by the " + the_current_weather[0])
            if "ice" in pokemon_2["type"]:
                p2_health_loss = 0
            else:
                p2_health_loss = pokemon_2["stats"]["hp"] / 16
                slow_print(pokemon_2["name"] + " was buffeted by the " + the_current_weather[0])
        return int(pokemon_1_hp - p1_health_loss), int(pokemon_2_hp - p2_health_loss)

#Ability functions:
if True:
    def sand_stream(pokemon1, pokemon2):
        if pokemon1["ability"] != "air lock" and pokemon2["ability"] != "air lock":
            the_current_weather[0] = "sandstorm"
            weather_counter[0] = 5
            slow_print(pokemon1["name"] + "'s sandstream activated!")

    def drizzle(pokemon1, pokemon2):
        if pokemon1["ability"] != "air lock" and pokemon2["ability"] != "air lock":
            the_current_weather[0] = "rain"
            weather_counter[0] = 5
            slow_print(pokemon1["name"] + "'s drizzle activated!")

    def drought(pokemon1, pokemon2):
        if pokemon1["ability"] != "air lock" and pokemon2["ability"] != "air lock":
            the_current_weather[0] = "sunny"
            weather_counter[0] = 5
            slow_print(pokemon1["name"] + "'s drought activated!")

    def hail_warning(pokemon1, pokemon2):
        if pokemon1["ability"] != "air lock" and pokemon2["ability"] != "air lock":
            the_current_weather[0] = "hail"
            weather_counter[0] = 5
            slow_print(pokemon1["name"] + "'s hail warning activated!")

    def air_lock(pokemon1, pokemon2):
        the_current_weather[0] = "clear"
        slow_print(pokemon1["name"] + "'s air lock activated!")
        slow_print(" OO  Not a cloud in sight!  OO ")

    def cloud_nine(pokemon1, pokemon2):
        the_current_weather[0] = "clear"
        slow_print(pokemon1["name"] + "'s cloud nine activated!")
        slow_print(" OO  Clear skies today!  OO ")

def move_calc(move_in, def_pkmn, p1_stats, p2_stats, p1_stat_boost, p2_stat_boost, attacking_pkmn,  p1_lvl = 5, player = 1):
    move_info = move_in.copy()
    move_info = change_type(attacking_pkmn, move_info)
    the_current_weather[0] = check_weather(move_info, the_current_weather[0])
    weather_stuff = check_if_weather(move_info, the_current_weather[0])
    weather_mult = weather_stuff[0]
    hp_lost_percent = weather_stuff[1]
    if move_info["name"] == "switch":
        slow_print((attacking_pkmn["name"]).title() + " switched out!")
        return 0
    hazard_setter(move_in, attacking_pkmn, player)
    if move_info["c_type"] == "charging":
        slow_print((attacking_pkmn["name"]).title() + " is charging using " + move_info["name"] + "!")
        return 0
    if move_info["c_type"] == "status":
        slow_print((attacking_pkmn["name"]).title() + " used " + move_info["name"] + "!")
        return 0
    apparant_power = 0
    hit_or_miss = accuracy_check(move_info["accuracy"], p1_stat_boost["accuracy"], p2_stat_boost["evasion"])
    if (move_in["name"] == "blizzard" and the_current_weather[0] == "hail") or (move_in["name"] == "thunder" and the_current_weather[0] == "rain"):
        hit_or_miss = True
    if hit_or_miss == False:
        slow_print(attacking_pkmn["name"] + "'s " + move_in["name"] + " missed!")
        return 0
    if move_info["power"] == 0:
        return 0
    type_mult = check_type(move_info["type"], def_pkmn["type"])
    slow_print(return_message(type_mult, move_info["name"], attacking_pkmn["name"]))
    if move_info["c_type"] == "physical":
        apparant_mult = p1_stats["attack"] / p2_stats["defense"]
    elif move_info["c_type"] == "special":
        apparant_mult = p1_stats["s_attack"] / p2_stats["s_defense"]
    if "freeze" in def_pkmn["status condition"]:
        if move_in["type"] == "fire":
            def_pkmn["status condition"].remove("freeze")
    if move_info["c_type"] == "physical":
        if "burn" in attacking_pkmn["status condition"]:
            c_multiply = c_mult(p1_stat_boost["attack"], p2_stat_boost["defense"]) / 2
        else:
            c_multiply = c_mult(p1_stat_boost["attack"], p2_stat_boost["defense"])
    elif move_info["c_type"] == "special":
        c_multiply = c_mult(p1_stat_boost["s_attack"], p2_stat_boost["s_defense"])
    token = random.randint(0,24)
    if token == 0:
        critical = 1.5 * 1 / c_multiply
        slow_print("It's a critical hit!")
    else:
        critical = 1
    rand_token = (random.randint(86, 101)) / 100
    if move_info["type"] in attacking_pkmn["type"]:
        STAB = 1.5
    else:
        STAB = 1
    other = 1
    other *= check_bands(attacking_pkmn, move_info)
    if type_mult > 1:
        other *= supereffective_berry(def_pkmn, move_info, p2_stat_boost)
    other *= check_type_booster(attacking_pkmn, move_info)
    if (def_pkmn["held item"] == "soul dew" and def_pkmn["name"] == "latios") or (def_pkmn["held item"] == "soul dew" and def_pkmn["name"] == "latias"):
        other *= 2 / 3
    if attacking_pkmn["held item"] == "life orb":
        other *= 1.3
    if attacking_pkmn["held item"] == "expert belt" and type_mult > 1:
        other *= 1.2
    if (def_pkmn["held item"] == "eviolite") and (def_pkmn["name"] in unevolved_list):
        other *= 2 / 3

    other *= calculate_ability_power(attacking_pkmn, def_pkmn, move_info)
    if (terrain_conds["electric terrain"] > 0) and (move_in["type"] == "electric"):
        other *= 1.5
    elif (terrain_conds["grassy terrain"] > 0) and (move_in["type"] == "grassy"):
        other *= 1.5
    elif (terrain_conds["psychic terrain"] > 0) and (move_in["type"] == "psychic"):
        other *= 1.5
    elif (terrain_conds["misty terrain"] > 0) and (move_in["type"] == "fairy"):
        other *= 1.5
    if player == 1:
        if terrain_conds["p1 reflect"] > 0:
            if move_in["c_type"] == "physical":
                other *= 0.5
        if terrain_conds["p1 light screen"] > 0:
            if move_in["c_type"] == "special":
                other *= 0.5
    if player == 2:
        if terrain_conds["p2 reflect"] > 0:
            if move_in["c_type"] == "physical":
                other *= 0.5
        if terrain_conds["p2 light screen"] > 0:
            if move_in["c_type"] == "special":
                other *= 0.5
    apparant_power = (((((2 * p1_lvl) / 5) + 2) * move_info["power"] * apparant_mult / 50) + 2) * type_mult * critical * rand_token * c_multiply * STAB * weather_mult * other
    return int(apparant_power * move_power_modifier)

def full_calc(pkmn_1, pkmn_2, pkmn_1_hp, pkmn_2_hp, p1_stat_boosts, p2_stat_boosts, p1_move, p2_move, weather, p1_lvl = 5, p2_lvl = 5):
    p1_protection = False
    p2_protection = False
    p1_can_attack = True
    p2_can_attack = True
    if p1_move["name"] == "protect":
        p1_protection = True
    if p2_move["name"] == "protect":
        p2_protection = True
    pkmn_1, pkmn_2 = heal_condition(pkmn_1, pkmn_2)
    p1_goes_first = speed_check(pkmn_1["stats"]["speed"], pkmn_2["stats"]["speed"], p1_stat_boosts["speed"], p2_stat_boosts["speed"], p1_move["priority"], p2_move["priority"])
    if "paralyze" in pkmn_1["status condition"]:
        if "paralyze" in pkmn_2["status condition"]:
            p1_goes_first = speed_check(pkmn_1["stats"]["speed"] / 2, pkmn_2["stats"]["speed"] / 2, p1_stat_boosts["speed"], p2_stat_boosts["speed"], p1_move["priority"], p2_move["priority"])
        else:
            p1_goes_first = speed_check(pkmn_1["stats"]["speed"] / 2, pkmn_2["stats"]["speed"], p1_stat_boosts["speed"], p2_stat_boosts["speed"], p1_move["priority"], p2_move["priority"])
    else:
        if "paralyze" in pkmn_2["status condition"]:
            p1_goes_first = speed_check(pkmn_1["stats"]["speed"], pkmn_2["stats"]["speed"] / 2, p1_stat_boosts["speed"], p2_stat_boosts["speed"], p1_move["priority"], p2_move["priority"])
        else:
            p1_goes_first = speed_check(pkmn_1["stats"]["speed"], pkmn_2["stats"]["speed"], p1_stat_boosts["speed"], p2_stat_boosts["speed"], p1_move["priority"], p2_move["priority"])
    if "paralyze" in pkmn_1["status condition"] and random.randint(0,4) == 0:
        p1_can_attack == False
        slow_print(trainer_1 + "'s " + pkmn_1["name"].title() + " is paralyzed!")
    if "paralyze" in pkmn_2["status condition"] and random.randint(0,4) == 0:
        p2_can_attack == False
        slow_print(trainer_2 + "'s " + pkmn_2["name"].title() + " is paralyzed!")
    if "frozen" in pkmn_1["status condition"]:
        p1_can_attack == False
        slow_print(trainer_1 + "'s " + pkmn_1["name"].title() + " is frozen solid!")
    if "frozen" in pkmn_2["status condition"]:
        p2_can_attack == False
        slow_print(trainer_2 + "'s " + pkmn_2["name"].title() + " is frozen solid!")
    if "asleep" in pkmn_1["status condition"]:
        p1_can_attack == False
        slow_print(trainer_1 + "'s " + pkmn_1["name"].title() + " is fast asleep!")
    if "asleep" in pkmn_2["status condition"]:
        p2_can_attack == False
        slow_print(trainer_2 + "'s " + pkmn_2["name"].title() + " is fast asleep!")

    if p1_move["name"] == "potion" or p1_move["name"] == "super potion" or p1_move["name"] == "hyper potion" or p1_move["name"] == "max potion" or p1_move["name"] == "full restore" or p1_move["name"] == "revive" or p1_move["name"] == "max revive" or p1_move["name"] == "full heal":
        while True:
            print("*----------------------------------------------------------------------------------------*")
            slow_print("Choose a pokemon to use the item on! ")
            count = 1
            for pkmn in p1_team:
                print(printer_outer(printer_outer(str(count) + "  " + pkmn["name"].title(), ("HP: " + str(pkmn["current hp"]) + "/" + str(pkmn["stats"]["hp"])), 25), printer_ouuter("Status Condition: " + str("".join(pkmn["status condition"])), "Held Item: " + pkmn["held item"], 20), 60),             "Type: ", pkmn["type"])
                count += 1
            p1_pokemon_chos = input("Pokemon chosen(in numbers): ")
            try:
                p1_pokemon_chos = int(p1_pokemon_chos)
            except:
                p1_pokemon_chos = int(input("Pokemon chosen(use numbers!): "))
            else:
                if p1_pokemon_chos not in range(7):
                    p1_pokemon_chos = int(input("Pokemon chosen(0-5!): "))
            p1_pokemon_chos = int(p1_pokemon_chos)
            p1_team[p1_pokemon_chos - 1] = use_item(p1_move, p1_team[p1_pokemon_chos - 1], p1_stat_boosts)[0]
            pkmn_1_hp = pkmn_1["current hp"]
            break
        clean_bag(items_bought)
        p1_move_log.append(p1_move_selection["name"])
    elif p1_move["name"] == p1_move["name"] == "x accuracy" or p1_move["name"] == "x attack" or p1_move["name"] == "x defense" or p1_move["name"] == "x s_attack" or p1_move["name"] == "x s_defense" or p1_move["name"] == "x speed":
        pkmn_1, p1_stat_boosts = use_item(p1_move, pkmn_1, p1_stat_boosts)
        pkmn_1_hp = pkmn_1["current hp"]
        clean_bag(items_bought)
        p1_move_log.append(p1_move_selection["name"])
    if p2_move["name"] == "potion" or p2_move["name"] == "super potion" or p2_move["name"] == "hyper potion" or p2_move["name"] == "max potion" or p2_move["name"] == "full restore" or p2_move["name"] == "revive" or p2_move["name"] == "max revive" or p2_move["name"] == "full heal":
        while True:
            print("*----------------------------------------------------------------------------------------*")
            slow_print("Choose a pokemon to use the item on! ")
            count = 1
            for pkmn in p2_team:
                print(printer_outer(printer_outer(str(count) + "  " + pkmn["name"].title(), ("HP: " + str(pkmn["current hp"]) + "/" + str(pkmn["stats"]["hp"])), 25), printer_ouuter("Status Condition: " + str("".join(pkmn["status condition"])), "Held Item: " + pkmn["held item"], 20), 60), "Type: ", pkmn["type"])
                count += 1
            p2_pokemon_chos = input("Pokemon chosen(in numbers): ")
            try:
                p2_pokemon_chos = int(p2_pokemon_chos)
            except:
                p2_pokemon_chos = int(input("Pokemon chosen(use numbers!): "))
            else:
                if p2_pokemon_chos not in range(7):
                    p2_pokemon_chos = int(input("Pokemon chosen(0-5!): "))
            p2_pokemon_chos = int(p2_pokemon_chos)
            p2_team[p2_pokemon_chos - 1] = use_item(p2_move, p2_team[p2_pokemon_chos - 1], p2_stat_boosts)[0]
            pkmn_2_hp = pkmn_2["current hp"]
            break
        clean_bag(items_bought2)
        p2_move_log.append(p2_move_selection["name"])
    elif p2_move["name"] == p2_move["name"] == "x accuracy" or p2_move["name"] == "x attack" or p2_move["name"] == "x defense" or p2_move["name"] == "x s_attack" or p2_move["name"] == "x s_defense" or p2_move["name"] == "x speed":
        pkmn_2, p2_stat_boosts = use_item(p2_move, pkmn_2, p2_stat_boosts)
        pkmn_2_hp = pkmn_2["current hp"]
        clean_bag(items_bought2)
        p2_move_log.append(p2_move_selection["name"])
    if p1_goes_first:
        #(p1_move, pkmn_1, pkmn_2, pkmn_1_hp, pkmn_2_hp, p1_stat_boosts, p2_stat_boosts, p1_lvl, p2_lvl) = the_p1_calculator(p1_move, pkmn_1, pkmn_2, pkmn_1_hp, pkmn_2_hp, p1_stat_boosts, p2_stat_boosts, p1_lvl, p2_lvl)
        if p1_can_attack == True:
            the_current_weather[0] = check_weather(p1_move, the_current_weather[0])
            p2_damage_done = move_calc(p1_move, pkmn_2, pkmn_1["stats"], pkmn_2["stats"], p1_stat_boosts, p2_stat_boosts, pkmn_1, p1_lvl, 1)
            if p2_protection == True:
                p2_damage_done = 0
                slow_print(pkmn_2["name"] + " protected itself!")
            pkmn_2_hp -= p2_damage_done
            pkmn_1_hp += heal_calc(p1_move, p2_damage_done, pkmn_1)
            if pkmn_1_hp > pkmn_1["stats"]["hp"]:
                pkmn_1_hp = pkmn_1["stats"]["hp"]
            if pkmn_2_hp > pkmn_2["stats"]["hp"]:
                pkmn_2_hp = pkmn_2["stats"]["hp"]
            if p1_move["stat change"] != {}:
                stat_boosts = boost_check(p1_stat_boosts, p2_stat_boosts, p1_move["stat change"])
                p1_stat_boosts = stat_boosts[0].copy()
                p2_stat_boosts = stat_boosts[1].copy()
                p1_change_boosts = stat_boosts[2].copy()
                p2_change_boosts = stat_boosts[3].copy()
                stat_boosts = {}
                for k in (p1_change_boosts).keys():
                    if p1_change_boosts[k] > 0:
                        slow_print((pkmn_1["name"]).title() + "'s " + str(k) + " went up " + str(p1_change_boosts[k]) + " stages!")
                    elif p1_change_boosts[k] < 0:
                        slow_print((pkmn_1["name"]).title() + "'s " + str(k) + " went down " + str(-p1_change_boosts[k]) + " stages!")
                for j in (p2_change_boosts).keys():
                    if p2_change_boosts[j] > 0:
                        slow_print((pkmn_2["name"]).title() + "'s " + str(j)[1:] + " went up " + str(p2_change_boosts[j]) + " stages!")
                    elif p2_change_boosts[j] < 0:
                        slow_print((pkmn_2["name"]).title() + "'s " + str(j)[1:] + " went down " + str(-p2_change_boosts[j]) + " stages!")
            p2_stat_boosts = check_when_hit(pkmn_2, p1_move, p2_stat_boosts)
            pkmn_2 = check_condition(pkmn_2, p1_move)
            pkmn_2 = use_berry(pkmn_2, p1_move, p2_stat_boosts)
            terrain_setter(p1_move, pkmn_1, 1)
        else:
            print(trainer_1 + "'s " + pkmn_1["name"] + " can't attack!")
        input()
        if pkmn_2_hp < 1:
            slow_print("The opposing " + pkmn_2["name"] + " fainted!")
            p2_stat_boosts = default_boosts.copy()
            input()
        elif pkmn_1_hp < 1:
            slow_print("The opposing " + pkmn_1["name"] + " fainted!")
            p1_stat_boosts = default_boosts.copy()
            input()
        else:
            #(p2_move, pkmn_2, pkmn_1, pkmn_2_hp, pkmn_1_hp, p2_stat_boosts, p1_stat_boosts, p2_lvl, p1_lvl) = the_p2_calculator(p2_move, pkmn_2, pkmn_1, pkmn_2_hp, pkmn_1_hp, p2_stat_boosts, p1_stat_boosts, p2_lvl, p1_lvl)
            if p2_can_attack == True:
                the_current_weather[0] = check_weather(p2_move, the_current_weather[0])
                p1_damage_done = move_calc(p2_move, pkmn_1, pkmn_2["stats"], pkmn_1["stats"], p2_stat_boosts, p1_stat_boosts, pkmn_2, p2_lvl, 2)
                if p1_protection == True:
                    p1_damage_done = 0
                    slow_print(pkmn_1["name"] + " protected itself!")
                pkmn_1_hp -= p1_damage_done
                pkmn_2_hp += heal_calc(p2_move, p1_damage_done, pkmn_2)
                if pkmn_1_hp > pkmn_1["stats"]["hp"]:
                    pkmn_1_hp = pkmn_1["stats"]["hp"]
                if pkmn_2_hp > pkmn_2["stats"]["hp"]:
                    pkmn_2_hp = pkmn_2["stats"]["hp"]
                if p2_move["stat change"] != {}:
                    stat_boosts = boost_check(p2_stat_boosts, p1_stat_boosts, p2_move["stat change"])
                    p2_stat_boosts = stat_boosts[0].copy()
                    p1_stat_boosts = stat_boosts[1].copy()
                    p2_change_boosts = stat_boosts[2].copy()
                    p1_change_boosts = stat_boosts[3].copy()
                    stat_boosts = {}
                    for k in (p2_change_boosts).keys():
                        if p2_change_boosts[k] > 0:
                            slow_print((pkmn_2["name"]).title() + "'s " + str(k) + " went up " + str(p2_change_boosts[k]) + " stages!")
                        elif p2_change_boosts[k] < 0:
                            slow_print((pkmn_2["name"]).title() + "'s " + str(k) + " went down " + str(-p2_change_boosts[k]) + " stages!")
                    for j in (p1_change_boosts).keys():
                        if p1_change_boosts[j] > 0:
                            slow_print((pkmn_1["name"]).title() + "'s " + str(j)[1:] + " went up " + str(p1_change_boosts[j]) + " stages!")
                        elif p1_change_boosts[j] < 0:
                            slow_print((pkmn_1["name"]).title() + "'s " + str(j)[1:] + " went down " + str(-p1_change_boosts[j]) + " stages!")
                p1_stat_boosts = check_when_hit(pkmn_1, p2_move, p1_stat_boosts)
                pkmn_1 = check_condition(pkmn_1, p2_move)
                pkmn_1 = use_berry(pkmn_1, p2_move, p1_stat_boosts)
                terrain_setter(p2_move, pkmn_2, 2)
            else:
                print(trainer_2 + "'s " + pkmn_2["name"] + " can't attack!")
            input()
    else:
        if p2_can_attack == True:
            the_current_weather[0] = check_weather(p2_move, the_current_weather[0])
            p1_damage_done = move_calc(p2_move, pkmn_1, pkmn_2["stats"], pkmn_1["stats"], p2_stat_boosts, p1_stat_boosts, pkmn_2, p2_lvl, 2)
            if p1_protection == True:
                p1_damage_done = 0
                slow_print(pkmn_1["name"] + " protected itself!")
            pkmn_1_hp -= p1_damage_done
            pkmn_2_hp += heal_calc(p2_move, p1_damage_done, pkmn_2)
            if pkmn_1_hp > pkmn_1["stats"]["hp"]:
                pkmn_1_hp = pkmn_1["stats"]["hp"]
            if pkmn_2_hp > pkmn_2["stats"]["hp"]:
                pkmn_2_hp = pkmn_2["stats"]["hp"]
            if p2_move["stat change"] != {}:
                stat_boosts = boost_check(p2_stat_boosts, p1_stat_boosts, p2_move["stat change"])
                p2_stat_boosts = stat_boosts[0].copy()
                p1_stat_boosts = stat_boosts[1].copy()
                p2_change_boosts = stat_boosts[2].copy()
                p1_change_boosts = stat_boosts[3].copy()
                stat_boosts = {}
                for k in (p2_change_boosts).keys():
                    if p2_change_boosts[k] > 0:
                        slow_print((pkmn_2["name"]).title() + "'s " + str(k) + " went up " + str(p2_change_boosts[k]) + " stages!")
                    elif p2_change_boosts[k] < 0:
                        slow_print((pkmn_2["name"]).title() + "'s " + str(k) + " went down " + str(-p2_change_boosts[k]) + " stages!")
                for j in (p1_change_boosts).keys():
                    if p1_change_boosts[j] > 0:
                        slow_print((pkmn_1["name"]).title() + "'s " + str(j)[1:] + " went up " + str(p1_change_boosts[j]) + " stages!")
                    elif p1_change_boosts[j] < 0:
                        slow_print((pkmn_1["name"]).title() + "'s " + str(j)[1:] + " went down " + str(-p1_change_boosts[j]) + " stages!")
            p1_stat_boosts = check_when_hit(pkmn_1, p2_move, p1_stat_boosts)
            pkmn_1 = check_condition(pkmn_1, p2_move)
            pkmn_1 = use_berry(pkmn_1, p2_move, p1_stat_boosts)
            terrain_setter(p2_move, pkmn_2, 2)
        else:
            print(trainer_2 + "'s " + pkmn_2["name"] + " can't attack!")
        input()
        if pkmn_1_hp < 1:
            slow_print("Your " + pkmn_1["name"] + " fainted!")
            p1_stat_boosts = default_boosts.copy()
            input()
        elif pkmn_2_hp < 1:
            slow_print("Your " + pkmn_2["name"] + " fainted!")
            p2_stat_boosts = default_boosts.copy()
            input()
        else:
            if p1_can_attack == True:
                the_current_weather[0] = check_weather(p1_move, the_current_weather[0])
                p2_damage_done = move_calc(p1_move, pkmn_2, pkmn_1["stats"], pkmn_2["stats"], p1_stat_boosts, p2_stat_boosts, pkmn_1, p1_lvl, 1)
                if p1_protection == True:
                    p2_damage_done = 0
                    slow_print(pkmn_2["name"] + " protected itself!")
                pkmn_2_hp -= p2_damage_done
                pkmn_1_hp += heal_calc(p1_move, p2_damage_done, pkmn_1)
                if pkmn_1_hp > pkmn_1["stats"]["hp"]:
                    pkmn_1_hp = pkmn_1["stats"]["hp"]
                if pkmn_2_hp > pkmn_2["stats"]["hp"]:
                    pkmn_2_hp = pkmn_2["stats"]["hp"]
                if p1_move["stat change"] != {}:
                    stat_boosts = boost_check(p1_stat_boosts, p2_stat_boosts, p1_move["stat change"])
                    p1_stat_boosts = stat_boosts[0].copy()
                    p2_stat_boosts = stat_boosts[1].copy()
                    p1_change_boosts = stat_boosts[2].copy()
                    p2_change_boosts = stat_boosts[3].copy()
                    stat_boosts = {}
                    for k in (p1_change_boosts).keys():
                        if p1_change_boosts[k] > 0:
                            slow_print((pkmn_1["name"]).title() + "'s " + str(k) + " went up " + str(p1_change_boosts[k]) + " stages!")
                        elif p1_change_boosts[k] < 0:
                            slow_print((pkmn_1["name"]).title() + "'s " + str(k) + " went down " + str(-p1_change_boosts[k]) + " stages!")
                    for j in (p2_change_boosts).keys():
                        if p2_change_boosts[j] > 0:
                            slow_print((pkmn_2["name"]).title() + "'s " + str(j)[1:] + " went up " + str(p2_change_boosts[j]) + " stages!")
                        elif p2_change_boosts[j] < 0:
                            slow_print((pkmn_2["name"]).title() + "'s " + str(j)[1:] + " went down " + str(-p2_change_boosts[j]) + " stages!")
                p2_stat_boosts = check_when_hit(pkmn_2, p1_move, p2_stat_boosts)
                pkmn_2 = check_condition(pkmn_2, p1_move)
                pkmn_2 = use_berry(pkmn_2, p1_move, p2_stat_boosts)
                terrain_setter(p1_move, pkmn_1, 1)
            else:
                print(trainer_1 + "'s " + pkmn_1["name"] + " can't attack!")
            input()
    the_healths = return_weather_hp(pkmn_1, pkmn_2, pkmn_1_hp, pkmn_2_hp)
    pkmn_1_hp = the_healths[0]
    pkmn_2_hp = the_healths[1]
    if pkmn_1_hp < 1:
        p1_stat_boosts = default_boosts.copy()
    if pkmn_2_hp < 1:
        p2_stat_boosts = default_boosts.copy()
    weather_counter[0] -= 1
    if weather_counter[0] == 0:
        the_current_weather[0] = "clear"
    for key in terrain_conds.keys():
        terrain_conds[key] -= 1
    return pkmn_1_hp, pkmn_2_hp, p1_stat_boosts, p2_stat_boosts, the_current_weather[0]

#bot move generator
def get_move(my_move_list, my_health, opponent_health, my_pkmn, opponent_pkmn, my_stat_boosts, opponent_stat_boosts):
    if my_health / my_pkmn["stats"]["hp"] > 0.8:
        for move in my_move_list:
            if move_list[move]["c_type"] == "status":
                if random.randint(0,1) == 0:
                    return move
            elif move_list[move]["stat change"] != {}:
                if random.randint(0, 3) == 0:
                    return move
            elif opponent_health / opponent_pkmn["stats"]["hp"] > 0.8:
                if move_list[move]["stat change"] != {}:
                    if random.randint(0, 2) == 0:
                        return move
    I_move_first = speed_check(my_pkmn["stats"]["speed"], opponent_pkmn["stats"]["speed"], my_stat_boosts["speed"], opponent_stat_boosts["speed"])
    if terrain_conds["trick room"] > 0:
        I_move_first = not I_move_first
    for move in my_move_list:
        if move_list[move]["priority"] > 0:
            I_move_first = True
            priority_move = move
    if my_health / my_pkmn["stats"]["hp"] < 0.2:
        if opponent_health / opponent_pkmn["stats"]["hp"] < 0.2 and I_move_first:
            return move
        else:
            if random.randint(0,1) == 0:
                return "potion"
            else:
                return move
    else:
        for move in my_move_list:
            check_it = check_type(move_list[move]["type"], opponent_pkmn["type"])
            if check_it == 4:
                if random.randint(0, 2) < 2:
                    return move
            elif check_it == 2:
                if random.randint(0, 3) == 0:
                    return move
            elif check_it == 1:
                if random.randint(0, 4) == 0:
                    return move
            elif check_it == 0.5:
                if random.randint(0, 10) == 0:
                    return move
    for move in my_move_list:
        check_it = check_type(move_list[move]["type"], opponent_pkmn["type"])
        if check_it == 4:
            if random.randint(0, 1) == 0:
                return move
        elif check_it == 2:
            if random.randint(0, 3) == 0:
                return move
        elif check_it == 1:
            if random.randint(0, 4) == 0:
                return move
        elif check_it == 0.5:
            if random.randint(0, 10) == 0:
                return move
    move = my_move_list[random.randint(0, (len(my_move_list) - 1))]
    if move not in my_move_list:
        return move
    else:
        return my_move_list[0]

def single_battle(pkmn1, pkmn2, pkmn1_hp, pkmn2_hp, p1_sboosts, p2_sboosts, pl1_level = 5, pl2_level = 5):
    battle_yes = True
    while battle_yes == True:
        if pkmn1["ability"] == "air lock" or pkmn1["ability"] == "cloud nine" or pkmn2["ability"] == "air lock" or pkmn2["ability"] == "cloud nine":
            slow_print("The skies cleared up!")
            the_current_weather[0] = "clear"
        print(" ")
        print("Moves:    ", (",    ".join(pkmn1["moves"])).title())
        print("Other:    \'Switch\', \'Mega\', Bag: ", items_bought)
        print(" ")
        print("Moves:    ", (",    ".join(pkmn2["moves"])).title())
        print("Other:    \'Switch\', \'Mega\', Bag: ", items_bought2)
        while True:
            move_selection = (input("Which move would trainer 1 like to use? (\"info\" for move info)" )).lower()
            if move_selection.lower() == "mega":
                pkmn1 = mega_evolve(pkmn1)
                pkmn1_hp = pkmn1["current hp"]
                move_selection = (input("Which move would trainer 1 like to use? (\"info\" for move info)")).lower()
            if move_selection.lower() == "info":
                for move in pkmn1["moves"]:
                    print(printer_outer(printer_outer("Move: " + move_list[move]["name"], "Type: " + move_list[move]["type"], 30), printer_outer("Power: " + str(move_list[move]["power"]), "C type: " + move_list[move]["c_type"], 30), 60))
                move_selection = (input("Which move would trainer 1 like to use? ")).lower()
            for i in range(0,10):
                if move_selection in move_list:
                    break
                elif move_selection not in move_list:
                    move_selection = (input("Not in move list; which move would trainer 1 like to use?" )).lower()
                    if move_selection.lower() == "mega":
                        pkmn1 = mega_evolve(pkmn1)
                        pkmn1_hp = pkmn1["current hp"]
                        move_selection = (input("Which move would trainer 1 like to use? (\"info\" for move info)")).lower()
                    if move_selection.lower() == "info":
                        for move in pkmn1["moves"]:
                            print(printer_outer(
                                printer_outer("Move: " + move_list[move]["name"], "Type: " + move_list[move]["type"], 30), printer_outer("Power: " + str(move_list[move]["power"]), "C type: " + move_list[move]["c_type"], 30), 60))
                            move_selection = (input("Which move would trainer 1 like to use? ")).lower()
            print("------------------------------------------------------------------------------------------")
            p1_move_selection = move_list[move_selection]
            if p1_move_selection["name"] in items.keys():
                if check_in_bag(items_bought, p1_move_selection["name"]):
                    if items_bought[p1_move_selection["name"]] > 0:
                        items_bought[p1_move_selection["name"]] -= 1
                        break
                    else:
                        slow_print("You don't have enough of this item! ")
                else:
                    slow_print("You don't have this item in your bag! ")
            else:
                break
        while True:
            move_selection2 = (input("Which move would trainer 2 like to use? (\"info\" for move info)")).lower()
            if move_selection2.lower() == "mega":
                pkmn2 = mega_evolve(pkmn2)
                pkmn2_hp = pkmn2["current hp"]
                move_selection2 = (input("Which move would trainer 2 like to use? (\"info\" for move info)")).lower()
            if move_selection2.lower() == "info":
                for move in pkmn2["moves"]:
                    slow_print(
                        printer_outer(
                            printer_outer("Move: " + move_list[move]["name"], "Type: " + move_list[move]["type"], 30),
                            printer_outer("Power: " + str(move_list[move]["power"]),
                                          "C type: " + move_list[move]["c_type"], 30), 60))
                move_selection2 = (input("Which move would trainer 2 like to use? ")).lower()
            for i in range(0, 10):
                if move_selection2 in move_list:
                    break
                elif move_selection2 not in move_list:
                    move_selection2 = (input("Not in move list; which move would trainer 2 like to use?")).lower()
                    if move_selection2.lower() == "mega":
                        pkmn2 = mega_evolve(pkmn2)
                        pkmn2_hp = pkmn2["current hp"]
                        move_selection2 = (input("Which move would trainer 2 like to use? (\"info\" for move info)")).lower()
                    if move_selection2.lower() == "info":
                        for move in pkmn2["moves"]:
                            slow_print(printer_outer(
                                printer_outer("Move: " + move_list[move]["name"], "Type: " + move_list[move]["type"], 30), printer_outer("Power: " + str(move_list[move]["power"]), "C type: " + move_list[move]["c_type"], 30), 60))
                            move_selection2 = (input("Which move would trainer 2 like to use? ")).lower()
            print("------------------------------------------------------------------------------------------")
            p2_move_selection = move_list[move_selection2]
            if p2_move_selection["name"] in items.keys():
                if check_in_bag(items_bought2, p2_move_selection["name"]):
                    if items_bought2[p2_move_selection["name"]] > 0:
                        items_bought2[p2_move_selection["name"]] -= 1
                        break
                    else:
                        slow_print("You don't have enough of this item! ")
                else:
                    slow_print("You don't have this item in your bag! ")
            else:
                break
        if p1_move_selection["name"] == "switch":
            count_pkmn = 0
            for pokemon in p1_team:
                if pokemon["current hp"] > 1:
                    count_pkmn += 1
                else:
                    pokemon["current hp"] = 0
            if count_pkmn < 1:
                slow_print("All of " + trainer_1 + "'s pokemon fainted!")
                battle_tot = False
                break
            while True:
                print("*----------------------------------------------------------------------------------------*")
                slow_print(trainer_1 + ", choose a new pokemon! ")
                count = 1
                for pkmn in p1_team:
                    print(printer_outer(printer_outer(str(count) + "  " + pkmn["name"].title(), ("HP: " + str(pkmn["current hp"]) + "/" + str(pkmn["stats"]["hp"])), 20),"Status Condition: " + str("".join(pkmn["status condition"])), 40), "Type: ", pkmn["type"])
                    count += 1
                p1_pokemon_chos = input("Pokemon chosen(in numbers): ")
                try:
                    p1_pokemon_chos = int(p1_pokemon_chos)
                except:
                    p1_pokemon_chos = int(input("Pokemon chosen(use numbers!): "))
                else:
                    if p1_pokemon_chos not in range(num_pkmn_in_team + 1):
                        p1_pokemon_chos = int(input("Pokemon chosen(0-5!): "))
                p1_pokemon_chos = int(p1_pokemon_chos)
                if p1_team[p1_pokemon_chos - 1]["current hp"] > 0:
                    pkmn1 = p1_team[p1_pokemon_chos - 1]
                    pkmn1 = check_hazards(pkmn1, 1)
                    pkmn1_hp = pkmn1["current hp"]
                    p1_sboosts = default_boosts.copy()
                    break
                else:
                    slow_print("This pokemon has no hp! ")
            pkmn1_hp = pkmn1["current hp"]
            print("------------------------------------------------------------------------------------------")
        if p2_move_selection["name"] == "switch":
            count_pkmn = 0
            for pokemon in p2_team:
                if pokemon["current hp"] > 1:
                    count_pkmn += 1
                else:
                    pokemon["current hp"] = 0
            if count_pkmn < 1:
                slow_print("All of " + trainer_2 + "'s pokemon fainted!")
                battle_tot = False
                break
            while True:
                print("*----------------------------------------------------------------------------------------*")
                slow_print(trainer_2 + ", choose a new pokemon! ")
                count = 1
                for pkmn in p2_team:
                    print(printer_outer(printer_outer(str(count) + "  " + pkmn["name"].title(), ("HP: " + str(pkmn["current hp"]) + "/" + str(pkmn["stats"]["hp"])), 20),"Status Condition: " + str("".join(pkmn["status condition"])), 40), "Type: ", pkmn["type"])
                    count += 1
                p2_pokemon_chos = input("Pokemon chosen(in numbers): ")
                try:
                    p2_pokemon_chos = int(p2_pokemon_chos)
                except:
                    p2_pokemon_chos = int(input("Pokemon chosen(use numbers!): "))
                else:
                    if p2_pokemon_chos not in range(num_pkmn_in_team + 1):
                        p2_pokemon_chos = int(input("Pokemon chosen(0-5!): "))
                p2_pokemon_chos = int(p2_pokemon_chos)
                if p2_team[p2_pokemon_chos - 1]["current hp"] > 0:
                    pkmn2 = p2_team[p2_pokemon_chos - 1]
                    pkmn2 = check_hazards(pkmn2, 2)
                    pkmn2_hp = pkmn2["current hp"]
                    p2_sboosts = default_boosts.copy()
                    break
                else:
                    slow_print("This pokemon has no hp! ")
            pkmn2_hp = pkmn2["current hp"]
            print("------------------------------------------------------------------------------------------")
        if pkmn1_hp < 1:
            battle_yes = False
            return pkmn1, pkmn2, pkmn1_hp, pkmn2_hp, p1_sboosts, p2_sboosts
        elif pkmn2_hp < 1:
            battle_yes = False
            return pkmn1, pkmn2, pkmn1_hp, pkmn2_hp, p1_sboosts, p2_sboosts
        info = full_calc(pkmn1, pkmn2, pkmn1_hp, pkmn2_hp, p1_sboosts, p2_sboosts, p1_move_selection, p2_move_selection, the_current_weather[0], pl1_level, pl2_level)
        pkmn1_hp = info[0]
        pkmn2_hp = info[1]
        p1_s_boosts = info[2]
        p2_s_boosts = info[3]
        the_current_weather[0] = info[4]
        if the_current_weather[0] == "sandstorm":
            if "rock" in pkmn1["type"] or "ground" in pkmn1["type"] or "steel" in pkmn1["type"]:
                p1_health_loss = 0
            else:
                p1_health_loss = pkmn1["stats"]["hp"] / 16
                slow_print(pkmn1["name"].title() + " was buffeted by the " + the_current_weather[0])
            if "rock" in pkmn2["type"] or "ground" in pkmn2["type"] or "steel" in pkmn2["type"]:
                p2_health_loss = 0
            else:
                p2_health_loss = pkmn2["stats"]["hp"] / 16
                slow_print(pkmn2["name"].title() + " was buffeted by the " + the_current_weather[0])
        elif the_current_weather[0] == "hail":
            if "ice" in pkmn1["type"]:
                p1_health_loss = 0
            else:
                p1_health_loss = pkmn1["stats"]["hp"] / 16
                slow_print(pkmn1["name"].title() + " was buffeted by the " + the_current_weather[0])
            if "ice" in pkmn2["type"]:
                p2_health_loss = 0
            else:
                p2_health_loss = pkmn2["stats"]["hp"] / 16
                slow_print(pkmn2["name"].title() + " was buffeted by the " + the_current_weather[0])
        else:
            p1_health_loss = 0
            p2_health_loss = 0
        if "poison" in pkmn1["status condition"]:
            p1_health_loss += pkmn1["stats"]["hp"] / 16
            slow_print(pkmn1["name"].title() + " took damage from poison")
        if "poison" in pkmn2["status condition"]:
            p2_health_loss += pkmn2["stats"]["hp"] / 16
            slow_print(pkmn2["name"].title() + " took damage from poison")

        if "burn" in pkmn1["status condition"]:
            p1_health_loss += pkmn1["stats"]["hp"] / 16
            slow_print(pkmn1["name"].title() + " took damage from burn")
        if "burn" in pkmn2["status condition"]:
            p2_health_loss += pkmn2["stats"]["hp"] / 16
            slow_print(pkmn2["name"].title() + " took damage from burn")

        pkmn1_hp -= int(p1_health_loss)
        pkmn2_hp -= int(p2_health_loss)
        slow_print(list_of_weather_messages[the_current_weather[0]])

        #held item check
        if pkmn1["held item"] == "leftovers":
            pkmn1_hp += pkmn1["stats"]["hp"] // 10
            slow_print(trainer_1 + pkmn1["name"].title() + "'s leftovers healed some hp!")
        if pkmn2["held item"] == "leftovers":
            pkmn2_hp += pkmn2["stats"]["hp"] // 10
            slow_print(trainer_2 + pkmn2["name"].title() + "'s leftovers healed some hp!")
        if pkmn1["held item"] == "life orb":
            pkmn1_hp -= pkmn1["stats"]["hp"] // 10
            slow_print(trainer_1 + pkmn1["name"].title() + "'s life orb took some hp!")
        if pkmn2["held item"] == "life orb":
            pkmn2_hp -= pkmn2["stats"]["hp"] // 10
            slow_print(trainer_2 + pkmn2["name"].title() + "'s life orb took some hp!")

        if pkmn1_hp > pkmn1["current hp"]:
            pkmn1_hp = pkmn1["current hp"]
        if pkmn2_hp > pkmn2["current hp"]:
            pkmn2_hp = pkmn2["current hp"]
        if pkmn1_hp < 0:
            pkmn1_hp = 0
        if pkmn2_hp < 0:
            pkmn2_hp = 0
        pkmn1["current hp"] = pkmn1_hp
        pkmn2["current hp"] = pkmn2_hp
        if pkmn1_hp < 1:
            battle_yes = False
            return pkmn1, pkmn2, pkmn1_hp, pkmn2_hp, p1_sboosts, p2_sboosts
        elif pkmn2_hp < 1:
            battle_yes = False
            return pkmn1, pkmn2, pkmn1_hp, pkmn2_hp, p1_sboosts, p2_sboosts
        else:
            print_weather_landscape()
            print("")
            print("------------------------------------------------------------------------------------------")
            num_bars_1 = int(pkmn1_hp / pkmn1["stats"]["hp"] * 30)
            healthbar_1 = ""
            for i in range(num_bars_1):
                healthbar_1 += "="
            for j in range(30 - num_bars_1):
                healthbar_1 += "_"
            num_bars_2 = int(pkmn2_hp / pkmn2["stats"]["hp"] * 30)
            healthbar_2 = ""
            for i in range(num_bars_2):
                healthbar_2 += "="
            for j in range(30 - num_bars_2):
                healthbar_2 += "_"
            print(printer_outer("Trainer 1: " + trainer_1, "Trainer 2: " + trainer_2, 50))
            print(printer_outer("Pokemon 1: " + (pkmn1["name"]).title(), "Pokemon 2: " + (pkmn2["name"]).title(), 50))
            print(printer_outer("HP: " + str(pkmn1_hp) + "/" + str(pkmn1["stats"]["hp"]), "HP: " + str(pkmn2_hp) + "/" + str(pkmn2["stats"]["hp"]), 50))
            print(printer_outer(healthbar_1, healthbar_2, 50))
            print("------------------------------------------------------------------------------------------")
            print_weather_landscape()
        #check for abilities
        #speed boost
        if pkmn1["ability"] == "speed boost":
            p1_sboosts["speed"] += 1
            if p1_sboosts["speed"] > 6:
                slow_print(pkmn1["name"] + "'s speed cannot be raised any further by speed boost!")
                p1_sboosts["speed"] = 6
            else:
                slow_print(pkmn1["name"] + "'s speed boost raised it's speed by 1!")
        if pkmn2["ability"] == "speed boost":
            p2_sboosts["speed"] += 1
            if p2_sboosts["speed"] > 6:
                slow_print(pkmn2["name"] + "'s speed cannot be raised any further by speed boost!")
                p2_sboosts["speed"] = 6
            else:
                slow_print(pkmn2["name"] + "'s speed boost raised it's speed by 1!")
    return pkmn1, pkmn2, pkmn1_hp, pkmn2_hp, p1_sboosts, p2_sboosts

if True: # choosing pkmn
    def limit_team_choose(num_choices):
        slow_print("Choose your team of 6 pokemon!")
        team_list = list(pokemon_list.keys())
        pokemon_team = []
        for i in range(1, num_pkmn_in_team + 1):
            random.shuffle(team_list)
            print("Pokemon choices: ", team_list[0: num_choices])
            pokemon_chosen = (input("Pokemon " + str(i) + ": ").lower())
            for j in range(0,10):
                if pokemon_chosen not in team_list:
                    pokemon_chosen = input("Choose a valid pokemon 1: ").lower()
                elif pokemon_chosen in team_list:
                    team_list.remove(pokemon_chosen)
                    break
            pokemon_1 = (pokemon_list[pokemon_chosen]).copy()
            print("Pokemon " + str(i) + ", Name: " + pokemon_1["name"] + ",     Type: ", pokemon_1["type"], ",     Moves: ",
                  pokemon_1["moves"], ",     stats", pokemon_1["stats"])
            print("")
            pokemon_team.append(pokemon_1)
        return pokemon_team

    def full_team_choose():
        slow_print("Choose your team of pokemon!" )
        team_list = list(pokemon_list.keys())
        slow_print("List of pokemon: ")
        for pokemen in team_list:
            pokemn = pokemon_list[pokemen]
            print(printer_outer(printer_outer("Name: " + pokemn["name"], "Types: " + ", ".join(pokemn["type"]), 30), printer_outer("Ability: " + pokemn["ability"], "Moves: " + ", ".join(pokemn["moves"]), 30), 60))
        pokemon_team = []
        for i in range(1, num_pkmn_in_team + 1):
            pokemon_chosen = (input("Pokemon " + str(i) + ": ").lower())
            for j in range(0,10):
                if pokemon_chosen not in team_list:
                    pokemon_chosen = input("Choose a valid pokemon 1: ").lower()
                elif pokemon_chosen in team_list:
                    team_list.remove(pokemon_chosen)
                    break
            pokemon_1 = (pokemon_list[pokemon_chosen]).copy()
            print("Pokemon " + str(i) + ", Name: " + pokemon_1["name"] + ",     Type: ", pokemon_1["type"], ",     Moves: ", pokemon_1["moves"], ",     stats", pokemon_1["stats"])
            print("")
            pokemon_team.append(pokemon_1)
        return pokemon_team

    def ai_team_choose():
        team_list = list(pokemon_list.keys())
        pokemon_team = []
        for i in range(1,6):
            pokemon_chosen_idx = team_list[random.randint(0, len(team_list) - 1)]
            pokemon_team.append((pokemon_list[pokemon_chosen_idx]).copy())
            team_list.remove(pokemon_chosen_idx)
        pokemon_team.append(pokemon_list["mewtwo"].copy())
        return pokemon_team

    def choose_box(box):
        pokemon_team = []
        count = 1
        for pokemon in box:
            print(str(count) + " - " + printer_outer(printer_outer(printer_outer("Name: " + pokemon["name"], "Types: " + ", ".join(pokemon["type"]), 25), printer_outer("Ability: " + pokemon["ability"], "Moves: " + ", ".join(pokemon["moves"]), 25), 50)
                                ,"Held Item:" + pokemon["held item"], 80))
            count += 1
        for i in range(1, num_pkmn_in_team + 1):
            while True:
                pokemon_selected = input("Pokemon " + str(i) + "(In numbers!): ")
                try:
                    pokemon_1 = box[int(pokemon_selected) - 1]
                    print("Pokemon " + str(i) + ", Name: " + pokemon_1["name"] + ",     Type: ", pokemon_1["type"],
                          ",     Moves: ", pokemon_1["moves"], ",     stats", pokemon_1["stats"])
                    print("")
                    pokemon_team.append(box[int(pokemon_selected) - 1])
                    break
                except:
                    print("Use numbers!!!")
        return pokemon_team

p1_level = 50
p2_level = 50
battle_tot = True


rental_teams = [
[{'name': 'groudon', 'type': ['ground'], 'moves': ['precipice blades', 'overheat', 'stone edge', 'bulk up'], 'stats': {'hp': 160, 'attack': 155, 'defense': 145, 's_attack': 105, 's_defense': 95, 'speed': 95}, 'ability': 'drought', 'current hp': 160, 'status condition': [], 'held item': 'life orb'}, {'name': 'charizard', 'type': ['fire', 'flying'], 'moves': ['dragon pulse', 'blast burn', 'protect', 'steel wing'], 'stats': {'hp': 138, 'attack': 89, 'defense': 83, 's_attack': 114, 's_defense': 90, 'speed': 105}, 'ability': 'blaze', 'current hp': 138, 'status condition': [], 'held item': 'charizardite y'}, {'name': 'venusaur', 'type': ['grass', 'poison'], 'moves': ['light screen', 'frenzy plant', 'sunny day', 'earthquake'], 'stats': {'hp': 140, 'attack': 87, 'defense': 88, 's_attack': 105, 's_defense': 105, 'speed': 85}, 'ability': 'overgrow', 'current hp': 140, 'status condition': [], 'held item': 'expert belt'}, {'name': 'flareon', 'type': ['fire'], 'moves': ['sunny day', 'overheat', 'shadow ball', 'charm'], 'stats': {'hp': 125, 'attack': 135, 'defense': 65, 's_attack': 100, 's_defense': 115, 'speed': 70}, 'ability': 'flash fire', 'current hp': 125, 'status condition': [], 'held item': 'charcoal'}, {'name': 'swampert', 'type': ['water', 'ground'], 'moves': ['earthquake', 'surf', 'amnesia', 'ice beam'], 'stats': {'hp': 160, 'attack': 115, 'defense': 95, 's_attack': 90, 's_defense': 95, 'speed': 65}, 'ability': 'torrent', 'current hp': 160, 'status condition': [], 'held item': 'leftovers'}, {'name': 'dragonite', 'type': ['dragon', 'flying'], 'moves': ['breaking swipe', 'thunder punch', 'fire punch', 'dragon dance'], 'stats': {'hp': 151, 'attack': 139, 'defense': 100, 's_attack': 105, 's_defense': 105, 'speed': 85}, 'ability': 'multiscale', 'current hp': 151, 'status condition': [], 'held item': ''}],
[{'name': 'kyogre', 'type': ['water'], 'moves': ['origin pulse', 'ice beam', 'rain dance', 'calm mind'], 'stats': {'hp': 160, 'attack': 105, 'defense': 95, 's_attack': 155, 's_defense': 145, 'speed': 95}, 'ability': 'drizzle', 'current hp': 160, 'status condition': [], 'held item': 'leftovers'}, {'name': 'kingdra', 'type': ['water', 'dragon'], 'moves': ['hydro pump', 'ice beam', 'rain dance', 'draco meteor'], 'stats': {'hp': 135, 'attack': 100, 'defense': 100, 's_attack': 100, 's_defense': 100, 'speed': 90}, 'ability': 'sift swim', 'current hp': 135, 'status condition': [], 'held item': 'leftovers'}, {'name': 'ludicolo', 'type': ['water', 'grass'], 'moves': ['hydro pump', 'ice beam', 'energy ball', 'rain dance'], 'stats': {'hp': 140, 'attack': 75, 'defense': 75, 's_attack': 95, 's_defense': 105, 'speed': 75}, 'ability': 'sift swim', 'current hp': 140, 'status condition': [], 'held item': 'leftovers'}, {'name': 'swampert', 'type': ['water', 'ground'], 'moves': ['earthquake', 'surf', 'amnesia', 'ice beam'], 'stats': {'hp': 160, 'attack': 115, 'defense': 95, 's_attack': 90, 's_defense': 95, 'speed': 65}, 'ability': 'torrent', 'current hp': 160, 'status condition': [], 'held item': 'swampertite'}, {'name': 'pidgeot', 'type': ['normal', 'flying'], 'moves': ['protect', 'quick attack', 'hurricane', 'steel wing'], 'stats': {'hp': 143, 'attack': 85, 'defense': 80, 's_attack': 75, 's_defense': 75, 'speed': 106}, 'ability': 'keen eye', 'current hp': 143, 'status condition': [], 'held item': 'cell battery'}, {'name': 'scizor', 'type': ['bug', 'steel'], 'moves': ['x scissor', 'light screen', 'quick attack', 'swords dance'], 'stats': {'hp': 130, 'attack': 135, 'defense': 105, 's_attack': 60, 's_defense': 85, 'speed': 70}, 'ability': 'swarm', 'current hp': 130, 'status condition': [], 'held item': 'wise glasses'}],
[{'name': 'rayquaza', 'type': ['dragon', 'flying'], 'moves': ['dragon ascent', 'ancient power', 'draco meteor', 'dragon dance'], 'stats': {'hp': 165, 'attack': 155, 'defense': 95, 's_attack': 155, 's_defense': 95, 'speed': 100}, 'ability': 'air lock', 'current hp': 165, 'status condition': [], 'held item': 'life orb'}, {'name': 'deoxys defense', 'type': ['psychic'], 'moves': ['cosmic power', 'recover', 'psychic', 'protect'], 'stats': {'hp': 110, 'attack': 75, 'defense': 165, 's_attack': 75, 's_defense': 165, 'speed': 95}, 'ability': 'pressure', 'current hp': 110, 'status condition': [], 'held item': 'weakness policy'}, {'name': 'salamence', 'type': ['dragon', 'flying'], 'moves': ['earthquake', 'stone edge', 'draco meteor', 'dragon dance'], 'stats': {'hp': 155, 'attack': 140, 'defense': 85, 's_attack': 115, 's_defense': 85, 'speed': 115}, 'ability': 'intimidate', 'current hp': 155, 'status condition': [], 'held item': 'salamencite'}, {'name': 'blaziken', 'type': ['fire', 'fighting'], 'moves': ['close combat', 'flare blitz', 'stone edge', 'swords dance'], 'stats': {'hp': 140, 'attack': 125, 'defense': 75, 's_attack': 115, 's_defense': 75, 'speed': 85}, 'ability': 'speed boost', 'current hp': 140, 'status condition': [], 'held item': 'life orb'}, {'name': 'meganium', 'type': ['grass'], 'moves': ['frenzy plant', 'ancient power', 'earthquake', 'double team'], 'stats': {'hp': 140, 'attack': 87, 'defense': 105, 's_attack': 88, 's_defense': 105, 'speed': 85}, 'ability': 'overgrow', 'current hp': 140, 'status condition': [], 'held item': 'snowball'}, {'name': 'metagross', 'type': ['steel', 'psychic'], 'moves': ['meteor mash', 'light screen', 'reflect', 'sandstorm'], 'stats': {'hp': 140, 'attack': 140, 'defense': 135, 's_attack': 100, 's_defense': 95, 'speed': 75}, 'ability': 'clear body', 'current hp': 140, 'status condition': [], 'held item': 'snowball'}],
[{'name': 'tyranitar', 'type': ['rock', 'dark'], 'moves': ['breaking swipe', 'bite', 'stone edge', 'dragon dance'], 'stats': {'hp': 160, 'attack': 139, 'defense': 115, 's_attack': 100, 's_defense': 105, 'speed': 66}, 'ability': 'sandstream', 'current hp': 160, 'status condition': [], 'held item': 'tyranitarite'}, {'name': 'golem', 'type': ['rock', 'ground'], 'moves': ['rock slide', 'earthquake', 'rock tomb', 'hammer arm'], 'stats': {'hp': 140, 'attack': 125, 'defense': 135, 's_attack': 60, 's_defense': 70, 'speed': 50}, 'ability': 'sand veil', 'current hp': 140, 'status condition': [], 'held item': 'muscle band'}, {'name': 'aerodactyl', 'type': ['rock', 'flying'], 'moves': ['ancient power', 'earthquake', 'bite', 'steel wing'], 'stats': {'hp': 140, 'attack': 110, 'defense': 70, 's_attack': 65, 's_defense': 80, 'speed': 135}, 'ability': 'rock head', 'current hp': 140, 'status condition': [], 'held item': 'absorb bulb'}, {'name': 'steelix', 'type': ['steel', 'ground'], 'moves': ['stone edge', 'earthquake', 'sandstorm', 'ice fang'], 'stats': {'hp': 135, 'attack': 90, 'defense': 205, 's_attack': 60, 's_defense': 70, 'speed': 35}, 'ability': 'sturdy', 'current hp': 135, 'status condition': [], 'held item': 'metal coat'}, {'name': 'skarmory', 'type': ['steel', 'flying'], 'moves': ['protect', 'steel wing', 'metal sound', 'sandstorm'], 'stats': {'hp': 125, 'attack': 85, 'defense': 145, 's_attack': 45, 's_defense': 75, 'speed': 75}, 'ability': 'keen eye', 'current hp': 125, 'status condition': [], 'held item': 'metal coat'}, {'name': 'celebi', 'type': ['grass', 'psychic'], 'moves': ['leaf storm', 'reflect', 'trick room', 'psychic'], 'stats': {'hp': 160, 'attack': 105, 'defense': 105, 's_attack': 105, 's_defense': 105, 'speed': 105}, 'ability': 'natural cure', 'current hp': 160, 'status condition': [], 'held item': 'leftovers'}]
]


while True:
    print("Player 1, choose your team!")
    p1_og_team = choose_box(trainer1_box)
    print("Player 2, choose your team!")
    p2_og_team = choose_box(trainer2_box)

    p1_team = p1_og_team.copy()
    p2_team = p2_og_team.copy()

    for pokemon in p1_team:
        pokemon["stats"] = all_stats_calc(pokemon_list[pokemon["name"]]["stats"], pokemon["level"], pokemon["EVs"])
    for pokemon in p2_team:
        pokemon["stats"] = all_stats_calc(pokemon_list[pokemon["name"]]["stats"], pokemon["level"], pokemon["EVs"])

    print("Player 1 Pokemon: ")
    print(p1_team)
    print("Player 1 Bag: ")
    print(items_bought)
    print("Player 2 Pokemon: ")
    print(p2_team)
    print("Player 2 Bag: ")
    print(items_bought2)
    hazards = {"p1 spikes": 0, "p2 spikes": 0, "p1 toxic spikes": 0, "p2 toxic spikes": 0, "p1 stealth rock": 0,
               "p2 stealth rock": 0}
    terrain_conds = {"p1 reflect": 0, "p2 reflect": 0, "p1 light screen": 0, "p2 light screen": 0, "trick room": 0,
                     "electric terrain": 0, "misty terrain": 0, "grassy terrain": 0, "psychic terrain": 0}
    the_current_weather = ["clear"]
    for pokemon in p1_team:
        pokemon["current hp"] = pokemon["stats"]["hp"]
        pokemon["status condition"] = []
    for pokemon in p2_team:
        pokemon["current hp"] = pokemon["stats"]["hp"]
        pokemon["status condition"] = []
    p1_pokemon_chosen = p1_team[0]
    p2_pokemon_chosen = p2_team[0]
    pokemon1_hp = p1_pokemon_chosen["current hp"]
    pokemon2_hp = p2_pokemon_chosen["current hp"]
    p1_sboosts = default_boosts.copy()
    p2_sboosts = default_boosts.copy()
    print_battle_teams(p1_team, p2_team)
    p1_idx = 0
    p2_idx = 0
    print("\n")
    print(trainer_1 + " sent out " + p1_pokemon_chosen["name"])
    print(trainer_2 + " sent out " + p2_pokemon_chosen["name"])

    print("")
    print("------------------------------------------------------------------------------------------")
    num_bars_1 = int(pokemon1_hp / p1_pokemon_chosen["stats"]["hp"] * 30)
    healthbar_1 = ""
    for i in range(num_bars_1):
        healthbar_1 += "="
    for j in range(30 - num_bars_1):
        healthbar_1 += "_"
    num_bars_2 = int(pokemon1_hp / p1_pokemon_chosen["stats"]["hp"] * 30)
    healthbar_2 = ""
    for i in range(num_bars_2):
        healthbar_2 += "="
    for j in range(30 - num_bars_2):
        healthbar_2 += "_"
    print(printer_outer("Trainer 1: " + trainer_1, "Trainer 2: " + trainer_2, 50))
    print(printer_outer("Pokemon 1: " + (p1_pokemon_chosen["name"]).title(), "Pokemon 2: " + (p2_pokemon_chosen["name"]).title(), 50))
    print(printer_outer("HP: " + str(pokemon1_hp) + "/" + str(p1_pokemon_chosen["stats"]["hp"]), "HP: " + str(pokemon2_hp) + "/" + str(p2_pokemon_chosen["stats"]["hp"]), 50))
    print(printer_outer(healthbar_1, healthbar_2, 50))
    print("------------------------------------------------------------------------------------------")

    the_current_weather[0] = "clear"
    weather_counter = [0]
    p1_move_log = []
    p2_move_log = []


    while battle_tot == True:
        #check if pokemon have fainted
        if pokemon1_hp < 1:
            p2_pokemon_chosen = level_up(p2_pokemon_chosen, p1_pokemon_chosen)
            p1_move_log.append("fainted")
            count_pkmn = 0
            for pokemon in p1_team:
                if pokemon["current hp"] > 1:
                    count_pkmn += 1
                else:
                    pokemon["current hp"] = 0
            if count_pkmn < 1:
                slow_print("All " + trainer_1 + "'s pokemon fainted!")
                pokemon_file.write(trainer_1 + " won!")
                p2_money += 5000
                p1_money += 2500
                battle_tot = False
                break
            while True:
                print("*----------------------------------------------------------------------------------------*")
                slow_print("Choose a new pokemon! ")
                count = 1
                for pkmn in p1_team:
                    print(printer_outer(printer_outer(str(count) + "  " + pkmn["name"].title(), ("HP: " + str(pkmn["current hp"]) + "/" + str(pkmn["stats"]["hp"])), 20), "Status Condition: " + str("".join(pkmn["status condition"])), 40), "Type: ", pkmn["type"])
                    count += 1
                p1_pokemon_chos = input("Pokemon chosen(in numbers): ")
                try:
                    p1_pokemon_chos = int(p1_pokemon_chos)
                except:
                    p1_pokemon_chos = int(input("Pokemon chosen(use numbers!): "))
                else:
                    if p1_pokemon_chos not in range(7):
                        p1_pokemon_chos = int(input("Pokemon chosen(0-5!): "))
                p1_pokemon_chos = int(p1_pokemon_chos)
                if p1_team[p1_pokemon_chos - 1]["current hp"] > 0:
                    p1_pokemon_chosen = p1_team[p1_pokemon_chos - 1]
                    pokemon1_hp = p1_pokemon_chosen["current hp"]
                    p1_sboosts = default_boosts.copy()
                    break
                else:
                    print("This pokemon has no hp! ")
            #ability check
            print(trainer_1 + " sent out " + p1_pokemon_chosen["name"])
            if p1_pokemon_chosen["ability"] == "intimidate":
                p2_sboosts["attack"] -= 1
                if p2_sboosts["attack"] < -6:
                    slow_print(p2_pokemon_chosen["name"] + "'s attack cannot be lowered any further by intimidate!")
                    p2_sboosts["attack"] = -6
                else:
                    slow_print(p1_pokemon_chosen["name"] + "'s intimidate lowered " + p2_pokemon_chosen["name"] + " by 1!")
            elif p1_pokemon_chosen["ability"] == "drizzle":
                if p1_pokemon_chosen["ability"] != "air lock" and p2_pokemon_chosen["ability"] != "air lock":
                    drizzle(p1_pokemon_chosen, p2_pokemon_chosen)
                    slow_print(p1_pokemon_chosen["name"] + "'s drizzle activated!")
            elif p1_pokemon_chosen["ability"] == "drought":
                if p1_pokemon_chosen["ability"] != "air lock" and p2_pokemon_chosen["ability"] != "air lock":
                    drought(p1_pokemon_chosen, p2_pokemon_chosen)
                    slow_print(p1_pokemon_chosen["name"] + "'s drought activated!")
            elif p1_pokemon_chosen["ability"] == "sandstream":
                if p1_pokemon_chosen["ability"] != "air lock" and p2_pokemon_chosen["ability"] != "air lock":
                    sand_stream(p1_pokemon_chosen, p2_pokemon_chosen)
                    slow_print(p1_pokemon_chosen["name"] + "'s sandstream activated!")
            elif p1_pokemon_chosen["ability"] == "hail warning":
                if p1_pokemon_chosen["ability"] != "air lock" and p2_pokemon_chosen["ability"] != "air lock":
                    hail_warning(p1_pokemon_chosen, p2_pokemon_chosen)
                    slow_print(p1_pokemon_chosen["name"] + "'s snow warning activated!")
            elif p1_pokemon_chosen["ability"] == "air lock":
                air_lock(p1_pokemon_chosen, p2_pokemon_chosen)
                slow_print(p1_pokemon_chosen["name"] + "'s air lock activated!")
            elif p1_pokemon_chosen["ability"] == "cloud nine":
                cloud_nine(p1_pokemon_chosen, p2_pokemon_chosen)
                slow_print(p1_pokemon_chosen["name"] + "'s cloud nine activated!")
            p1_pokemon_chosen = check_hazards(p1_pokemon_chosen, 1)
            #printing info
            print("")
            print("------------------------------------------------------------------------------------------")
            num_bars_1 = int(pokemon1_hp / p1_pokemon_chosen["stats"]["hp"] * 30)
            healthbar_1 = ""
            for i in range(num_bars_1):
                healthbar_1 += "="
            for j in range(30 - num_bars_1):
                healthbar_1 += "_"
            num_bars_2 = int(pokemon2_hp / p2_pokemon_chosen["stats"]["hp"] * 30)
            healthbar_2 = ""
            for i in range(num_bars_2):
                healthbar_2 += "="
            for j in range(30 - num_bars_2):
                healthbar_2 += "_"
            print(printer_outer("Trainer 1: " + trainer_1, "Trainer 2: " + trainer_2, 50))
            print(printer_outer("Pokemon 1: " + (p1_pokemon_chosen["name"]).title(), "Pokemon 2: " + (p2_pokemon_chosen["name"]).title(), 50))
            print(printer_outer("HP: " + str(pokemon1_hp) + "/" + str(p1_pokemon_chosen["stats"]["hp"]), "HP: " + str(pokemon2_hp) + "/" + str(p2_pokemon_chosen["stats"]["hp"]), 50))
            print(printer_outer(healthbar_1, healthbar_2, 50))
            print("------------------------------------------------------------------------------------------")
            print_weather_landscape()
        if pokemon2_hp < 1:
            p1_pokemon_chosen = level_up(p1_pokemon_chosen, p2_pokemon_chosen)
            p2_move_log.append("fainted")
            count_pkmn = 0
            for pokemon in p2_team:
                if pokemon["current hp"] > 1:
                    count_pkmn += 1
                else:
                    pokemon["current hp"] = 0
            if count_pkmn < 1:
                slow_print("All " + trainer_2 + "'s pokemon fainted!")
                pokemon_file.write(trainer_2 + " won!")
                p1_money += 5000
                p2_money += 2500
                battle_tot = False
                break
            while True:
                print("*----------------------------------------------------------------------------------------*")
                slow_print("Choose a new pokemon! ")
                count = 1
                for pkmn in p2_team:
                    print(printer_outer(printer_outer(str(count) + "  " + pkmn["name"].title(),
                                                      ("HP: " + str(pkmn["current hp"]) + "/" + str(pkmn["stats"]["hp"])),
                                                      20), "Status Condition: " + str("".join(pkmn["status condition"])),
                                        40), "Type: ", pkmn["type"])
                    count += 1
                p2_pokemon_chos = input("Pokemon chosen(in numbers): ")
                try:
                    p2_pokemon_chos = int(p2_pokemon_chos)
                except:
                    p2_pokemon_chos = int(input("Pokemon chosen(use numbers!): "))
                else:
                    if p2_pokemon_chos not in range(7):
                        p2_pokemon_chos = int(input("Pokemon chosen(0-5!): "))
                p2_pokemon_chos = int(p2_pokemon_chos)
                if p2_team[p2_pokemon_chos - 1]["current hp"] > 0:
                    p2_pokemon_chosen = p2_team[p2_pokemon_chos - 1]
                    pokemon2_hp = p2_pokemon_chosen["current hp"]
                    p2_sboosts = default_boosts.copy()
                    break
                else:
                    slow_print("This pokemon has no hp! ")

                #ability check
            slow_print(trainer_2 + " sent out " + p2_pokemon_chosen["name"])
            if p2_pokemon_chosen["ability"] == "intimidate":
                p1_sboosts["attack"] -= 1
                if p1_sboosts["attack"] < -6:
                    slow_print(p1_pokemon_chosen["name"] + "'s attack cannot be lowered any further by intimidate!")
                    p1_sboosts["attack"] = -6
                else:
                    slow_print(p2_pokemon_chosen["name"] + "'s intimidate lowered " + p1_pokemon_chosen["name"] + " by 1!")
            elif p2_pokemon_chosen["ability"] == "drizzle":
                if p2_pokemon_chosen["ability"] != "air lock" and p1_pokemon_chosen["ability"] != "air lock":
                    drizzle(p2_pokemon_chosen, p1_pokemon_chosen)
                    slow_print(p2_pokemon_chosen["name"] + "'s drizzle activated!")
            elif p2_pokemon_chosen["ability"] == "drought":
                if p2_pokemon_chosen["ability"] != "air lock" and p1_pokemon_chosen["ability"] != "air lock":
                    drought(p2_pokemon_chosen, p1_pokemon_chosen)
                    slow_print(p2_pokemon_chosen["name"] + "'s drought activated!")
            elif p2_pokemon_chosen["ability"] == "sandstream":
                if p2_pokemon_chosen["ability"] != "air lock" and p1_pokemon_chosen["ability"] != "air lock":
                    sand_stream(p2_pokemon_chosen, p1_pokemon_chosen)
                    slow_print(p2_pokemon_chosen["name"] + "'s sandstream activated!")
            elif p2_pokemon_chosen["ability"] == "hail warning":
                if p2_pokemon_chosen["ability"] != "air lock" and p1_pokemon_chosen["ability"] != "air lock":
                    hail_warning(p2_pokemon_chosen, p1_pokemon_chosen)
                    slow_print(p2_pokemon_chosen["name"] + "'s snow warning activated!")
            elif p2_pokemon_chosen["ability"] == "air lock":
                air_lock(p2_pokemon_chosen, p1_pokemon_chosen)
                slow_print(p2_pokemon_chosen["name"] + "'s air lock activated!")
            elif p2_pokemon_chosen["ability"] == "cloud nine":
                cloud_nine(p2_pokemon_chosen, p1_pokemon_chosen)
                slow_print(p2_pokemon_chosen["name"] + "'s cloud nine activated!")
            p2_pokemon_chosen = check_hazards(p2_pokemon_chosen, 2)
            #printing info
            print("")
            print("------------------------------------------------------------------------------------------")
            num_bars_1 = int(pokemon1_hp / p1_pokemon_chosen["stats"]["hp"] * 30)
            healthbar_1 = ""
            for i in range(num_bars_1):
                healthbar_1 += "="
            for j in range(30 - num_bars_1):
                healthbar_1 += "_"
            num_bars_2 = int(pokemon2_hp / p2_pokemon_chosen["stats"]["hp"] * 30)
            healthbar_2 = ""
            for i in range(num_bars_2):
                healthbar_2 += "="
            for j in range(30 - num_bars_2):
                healthbar_2 += "_"
            print(printer_outer("Trainer 1: " + trainer_1, "Trainer 2: " + trainer_2, 50))
            print(printer_outer("Pokemon 1: " + (p1_pokemon_chosen["name"]).title(),
                                "Pokemon 2: " + (p2_pokemon_chosen["name"]).title(), 50))
            print(printer_outer("HP: " + str(pokemon1_hp) + "/" + str(p1_pokemon_chosen["stats"]["hp"]), "HP: " + str(pokemon2_hp) + "/" + str(p2_pokemon_chosen["stats"]["hp"]), 50))
            print(printer_outer(healthbar_1, healthbar_2, 50))
            print("------------------------------------------------------------------------------------------")
            print_weather_landscape()
        #initiating battle
        information = single_battle(p1_pokemon_chosen, p2_pokemon_chosen, pokemon1_hp, pokemon2_hp, p1_sboosts, p2_sboosts, p1_pokemon_chosen["level"], p2_pokemon_chosen["level"])
        p1_pokemon_chosen = information[0]
        p2_pokemon_chosen = information[1]
        pokemon1_hp = information[2]
        pokemon2_hp = information[3]
        p1_sboosts = information[4]
        p2_sboosts = information[5]
        if pokemon1_hp > p1_pokemon_chosen["stats"]["hp"]:
            pokemon1_hp = p1_pokemon_chosen["stats"]["hp"]
        if pokemon2_hp > p2_pokemon_chosen["stats"]["hp"]:
            pokemon2_hp = p2_pokemon_chosen["stats"]["hp"]

        #weather checking
        if the_current_weather[0] == "sandstorm":
            if "rock" in p1_pokemon_chosen["type"] or "ground" in p1_pokemon_chosen["type"] or "steel" in p1_pokemon_chosen["type"]:
                p1_health_loss = 0
            else:
                p1_health_loss = p1_pokemon_chosen["stats"]["hp"] / 16
                slow_print(p1_pokemon_chosen["name"].title() + " was buffeted by the " + the_current_weather[0])
            if "rock" in p2_pokemon_chosen["type"] or "ground" in p2_pokemon_chosen["type"] or "steel" in p2_pokemon_chosen["type"]:
                p2_health_loss = 0
            else:
                p2_health_loss = p2_pokemon_chosen["stats"]["hp"] / 16
                slow_print(p2_pokemon_chosen["name"].title() + " was buffeted by the " + the_current_weather[0])
        elif the_current_weather[0] == "hail":
            if "ice" in p1_pokemon_chosen["type"]:
                p1_health_loss = 0
            else:
                p1_health_loss = p1_pokemon_chosen["stats"]["hp"] / 16
                slow_print(p1_pokemon_chosen["name"].title() + " was buffeted by the " + the_current_weather[0])
            if "ice" in p2_pokemon_chosen["type"]:
                p2_health_loss = 0
            else:
                p2_health_loss = p2_pokemon_chosen["stats"]["hp"] / 16
                slow_print(p2_pokemon_chosen["name"].title() + " was buffeted by the " + the_current_weather[0])
        else:
            p1_health_loss = 0
            p2_health_loss = 0
        if "poison" in p1_pokemon_chosen["status condition"]:
            p1_health_loss += p1_pokemon_chosen["stats"]["hp"] / 16
            slow_print(p1_pokemon_chosen["name"].title() + " took damage from poison")
        if "poison" in p2_pokemon_chosen["status condition"]:
            p2_health_loss += p2_pokemon_chosen["stats"]["hp"] / 16
            slow_print(p2_pokemon_chosen["name"].title() + " took damage from poison")
        if "burn" in p1_pokemon_chosen["status condition"]:
            p1_health_loss += p1_pokemon_chosen["stats"]["hp"] / 16
            slow_print(p1_pokemon_chosen["name"].title() + " took damage from burn")
        if "burn" in p2_pokemon_chosen["status condition"]:
            p2_health_loss += p2_pokemon_chosen["stats"]["hp"] / 16
            slow_print(p2_pokemon_chosen["name"].title() + " took damage from burn")
        pokemon1_hp -= int(p1_health_loss)
        pokemon2_hp -= int(p2_health_loss)

    for poke in p1_team:
        poke["status condition"] = []
        poke["current hp"] = poke["stats"]["hp"]
    for poke in p2_team:
        poke["status condition"] = []
        poke["current hp"] = poke["stats"]["hp"]
    slow_print("Nurse joy healed both trainer's pokemon!")

    for i in range(len(p1_og_team) - 1):
        p1_og_team[i]["current hp"] = p1_team[i]["current hp"]
        p1_og_team[i]["status condition"] = p1_team[i]["status condition"]
        p1_og_team[i]["exp"] = p1_team[i]["exp"]
        p1_og_team[i]["level"] = p1_team[i]["level"]

    for j in range(len(p2_og_team) - 1):
        p2_og_team[i]["current hp"] = p2_team[i]["current hp"]
        p2_og_team[i]["status condition"] = p2_team[i]["status condition"]
        p2_og_team[i]["exp"] = p2_team[i]["exp"]
        p2_og_team[i]["level"] = p2_team[i]["level"]

    full_write(trainer_1_file, trainer_1, items_bought, p1_money, trainer1_box)
    full_write(trainer_2_file, trainer_2, items_bought2, p2_money, trainer2_box)
    slow_print("Save files updated!")

    continue_battling = (input("Would you like to continue battling? (Press any key to continue, 'n' to stop):")).lower()
    battle_tot = True
    if continue_battling.startswith("n"):
        break
    else:
        buy_items = (input("Would player 1 like to buy any more items? (Y/N)")).lower()
        if buy_items.startswith("n") == False:
            items_bought = buy(p1_money)
            print("\n")
            p1_team = item_assigner(p1_team, items_bought)
        tm_inputs(p1_team)
        buy_items = (input("Would player 2 like to buy any more items? (Y/N)")).lower()
        if buy_items.startswith("n") == False:
            items_bought2 = buy(p2_money)
            print("\n")
            p2_team = item_assigner(p2_team, items_bought2)
        tm_inputs(p2_team)
